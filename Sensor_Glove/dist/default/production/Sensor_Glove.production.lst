

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Feb 27 15:19:05 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F87J10
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    29  0000                     
    30                           	psect	idataBANK0
    31  01F83C                     __pidataBANK0:
    32                           	opt stack 0
    33                           
    34                           ;initializer for _CDC_RESULT_REGISTER
    35  01F83C  000B               	dw	11
    36  01F83E  000C               	dw	12
    37  01F840  000D               	dw	13
    38  01F842  000E               	dw	14
    39  01F844  000F               	dw	15
    40  01F846  0010               	dw	16
    41  01F848  0011               	dw	17
    42  01F84A  0012               	dw	18
    43  01F84C  0013               	dw	19
    44  01F84E  0014               	dw	20
    45  01F850  0015               	dw	21
    46  01F852  0016               	dw	22
    47  0000                     _BAUDCON2	set	3964
    48  0000                     _PIE1bits	set	3997
    49  0000                     _PIR3bits	set	4004
    50  0000                     _PORTCbits	set	3970
    51  0000                     _PORTDbits	set	3971
    52  0000                     _RCREG2	set	3950
    53  0000                     _RCSTA2bits	set	3947
    54  0000                     _SPBRG2	set	3951
    55  0000                     _SSP1BUF	set	4041
    56  0000                     _SSP1CON1bits	set	4038
    57  0000                     _SSP1STATbits	set	4039
    58  0000                     _TRISC	set	3988
    59  0000                     _TRISD	set	3989
    60  0000                     _TRISE	set	3990
    61  0000                     _TRISF	set	3991
    62  0000                     _TRISG	set	3992
    63  0000                     _TXREG	set	4013
    64  0000                     _TXREG2	set	3949
    65  0000                     _TXSTA2	set	3948
    66  0000                     _RCIF	set	31989
    67  0000                     _TRMT	set	32097
    68  0000                     _TRMT2	set	31585
    69                           
    70                           ; #config settings
    71  0000                     
    72                           	psect	cinit
    73  01F8E0                     __pcinit:
    74                           	opt stack 0
    75  01F8E0                     start_initialization:
    76                           	opt stack 0
    77  01F8E0                     __initialization:
    78                           	opt stack 0
    79                           
    80                           ; Initialize objects allocated to BANK0 (24 bytes)
    81                           ; load TBLPTR registers with __pidataBANK0
    82  01F8E0  0E3C               	movlw	low __pidataBANK0
    83  01F8E2  6EF6               	movwf	tblptrl,c
    84  01F8E4  0EF8               	movlw	high __pidataBANK0
    85  01F8E6  6EF7               	movwf	tblptrh,c
    86  01F8E8  0E01               	movlw	low (__pidataBANK0 shr (0+16))
    87  01F8EA  6EF8               	movwf	tblptru,c
    88  01F8EC  EE00  F078         	lfsr	0,__pdataBANK0
    89  01F8F0  EE10 F018          	lfsr	1,24
    90  01F8F4                     copy_data0:
    91  01F8F4  0009               	tblrd		*+
    92  01F8F6  CFF5 FFEE          	movff	tablat,postinc0
    93  01F8FA  50E5               	movf	postdec1,w,c
    94  01F8FC  50E1               	movf	fsr1l,w,c
    95  01F8FE  E1FA               	bnz	copy_data0
    96                           
    97                           ; Clear objects allocated to BANK0 (24 bytes)
    98  01F900  EE00  F060         	lfsr	0,__pbssBANK0
    99  01F904  0E18               	movlw	24
   100  01F906                     clear_0:
   101  01F906  6AEE               	clrf	postinc0,c
   102  01F908  06E8               	decf	wreg,f,c
   103  01F90A  E1FD               	bnz	clear_0
   104                           
   105                           ; Clear objects allocated to COMRAM (46 bytes)
   106  01F90C  EE00  F001         	lfsr	0,__pbssCOMRAM
   107  01F910  0E2E               	movlw	46
   108  01F912                     clear_1:
   109  01F912  6AEE               	clrf	postinc0,c
   110  01F914  06E8               	decf	wreg,f,c
   111  01F916  E1FD               	bnz	clear_1
   112  01F918                     end_of_initialization:
   113                           	opt stack 0
   114  01F918                     __end_of__initialization:
   115                           	opt stack 0
   116  01F918  0100               	movlb	0
   117  01F91A  EFD8  F0FC         	goto	_main	;jump to C main() function
   118                           tblptru	equ	0xFF8
   119                           tblptrh	equ	0xFF7
   120                           tblptrl	equ	0xFF6
   121                           tablat	equ	0xFF5
   122                           postinc0	equ	0xFEE
   123                           wreg	equ	0xFE8
   124                           postdec1	equ	0xFE5
   125                           fsr1l	equ	0xFE1
   126                           
   127                           	psect	bssCOMRAM
   128  000001                     __pbssCOMRAM:
   129                           	opt stack 0
   130  000001                     _AD7147Registers:
   131                           	opt stack 0
   132  000001                     	ds	46
   133                           tblptru	equ	0xFF8
   134                           tblptrh	equ	0xFF7
   135                           tblptrl	equ	0xFF6
   136                           tablat	equ	0xFF5
   137                           postinc0	equ	0xFEE
   138                           wreg	equ	0xFE8
   139                           postdec1	equ	0xFE5
   140                           fsr1l	equ	0xFE1
   141                           
   142                           	psect	bssBANK0
   143  000060                     __pbssBANK0:
   144                           	opt stack 0
   145  000060                     _CDC_RESULT:
   146                           	opt stack 0
   147  000060                     	ds	24
   148                           tblptru	equ	0xFF8
   149                           tblptrh	equ	0xFF7
   150                           tblptrl	equ	0xFF6
   151                           tablat	equ	0xFF5
   152                           postinc0	equ	0xFEE
   153                           wreg	equ	0xFE8
   154                           postdec1	equ	0xFE5
   155                           fsr1l	equ	0xFE1
   156                           
   157                           	psect	dataBANK0
   158  000078                     __pdataBANK0:
   159                           	opt stack 0
   160  000078                     _CDC_RESULT_REGISTER:
   161                           	opt stack 0
   162  000078                     	ds	24
   163                           tblptru	equ	0xFF8
   164                           tblptrh	equ	0xFF7
   165                           tblptrl	equ	0xFF6
   166                           tablat	equ	0xFF5
   167                           postinc0	equ	0xFEE
   168                           wreg	equ	0xFE8
   169                           postdec1	equ	0xFE5
   170                           fsr1l	equ	0xFE1
   171                           
   172                           	psect	cstackCOMRAM
   173  00002F                     __pcstackCOMRAM:
   174                           	opt stack 0
   175  00002F                     ?_w16_r16_spi:
   176                           	opt stack 0
   177  00002F                     ?___awdiv:
   178                           	opt stack 0
   179  00002F                     uart_write_char@data:
   180                           	opt stack 0
   181  00002F                     write_AD7147@RegisterAddress:
   182                           	opt stack 0
   183  00002F                     w16_r16_spi@address:
   184                           	opt stack 0
   185  00002F                     uart_write_unsigned_int@number:
   186                           	opt stack 0
   187  00002F                     ___awdiv@dividend:
   188                           	opt stack 0
   189                           
   190                           ; 2 bytes @ 0x0
   191  00002F                     	ds	2
   192  000031                     ??_w16_r16_spi:
   193  000031                     uart_write_unsigned_int@char1:
   194                           	opt stack 0
   195  000031                     write_AD7147@NumberOfRegisters:
   196                           	opt stack 0
   197  000031                     ___awdiv@divisor:
   198                           	opt stack 0
   199                           
   200                           ; 2 bytes @ 0x2
   201  000031                     	ds	1
   202  000032                     uart_write_unsigned_int@char2:
   203                           	opt stack 0
   204                           
   205                           ; 1 bytes @ 0x3
   206  000032                     	ds	1
   207  000033                     ___awdiv@counter:
   208                           	opt stack 0
   209  000033                     write_AD7147@DataBuffer:
   210                           	opt stack 0
   211  000033                     w16_r16_spi@p1:
   212                           	opt stack 0
   213                           
   214                           ; 2 bytes @ 0x4
   215  000033                     	ds	1
   216  000034                     ___awdiv@sign:
   217                           	opt stack 0
   218                           
   219                           ; 1 bytes @ 0x5
   220  000034                     	ds	1
   221  000035                     ??_write_AD7147:
   222  000035                     w16_r16_spi@p2:
   223                           	opt stack 0
   224  000035                     ___awdiv@quotient:
   225                           	opt stack 0
   226                           
   227                           ; 2 bytes @ 0x6
   228  000035                     	ds	2
   229  000037                     write_AD7147@Register_Values:
   230                           	opt stack 0
   231  000037                     write_AD7147@enable_word:
   232                           	opt stack 0
   233  000037                     delay_ms@n:
   234                           	opt stack 0
   235  000037                     w16_r16_spi@address_low:
   236                           	opt stack 0
   237                           
   238                           ; 2 bytes @ 0x8
   239  000037                     	ds	2
   240  000039                     ??_delay_ms:
   241  000039                     write_AD7147@i:
   242                           	opt stack 0
   243  000039                     w16_r16_spi@address_high:
   244                           	opt stack 0
   245                           
   246                           ; 2 bytes @ 0xA
   247  000039                     	ds	1
   248  00003A                     delay_ms@j:
   249                           	opt stack 0
   250                           
   251                           ; 2 bytes @ 0xB
   252  00003A                     	ds	1
   253  00003B                     w16_r16_spi@result:
   254                           	opt stack 0
   255  00003B                     setup_AD7147@StageBuffer:
   256                           	opt stack 0
   257                           
   258                           ; 16 bytes @ 0xC
   259  00003B                     	ds	2
   260  00003D                     w16_r16_spi@blank_low:
   261                           	opt stack 0
   262                           
   263                           ; 2 bytes @ 0xE
   264  00003D                     	ds	2
   265  00003F                     w16_r16_spi@blank_high:
   266                           	opt stack 0
   267                           
   268                           ; 2 bytes @ 0x10
   269  00003F                     	ds	2
   270  000041                     w16_r16_spi@p3:
   271                           	opt stack 0
   272                           
   273                           ; 2 bytes @ 0x12
   274  000041                     	ds	2
   275  000043                     w16_r16_spi@p4:
   276                           	opt stack 0
   277                           
   278                           ; 2 bytes @ 0x14
   279  000043                     	ds	2
   280  000045                     ?_read_sensor:
   281                           	opt stack 0
   282  000045                     ?_get_ID:
   283                           	opt stack 0
   284  000045                     read_sensor@sensor:
   285                           	opt stack 0
   286                           
   287                           ; 2 bytes @ 0x16
   288  000045                     	ds	2
   289  000047                     ??_get_ID:
   290  000047                     read_sensor@register1:
   291                           	opt stack 0
   292                           
   293                           ; 2 bytes @ 0x18
   294  000047                     	ds	1
   295  000048                     get_ID@result:
   296                           	opt stack 0
   297                           
   298                           ; 2 bytes @ 0x19
   299  000048                     	ds	1
   300  000049                     read_sensor@sensor_value:
   301                           	opt stack 0
   302                           
   303                           ; 2 bytes @ 0x1A
   304  000049                     	ds	2
   305  00004B                     main@device_ID:
   306                           	opt stack 0
   307                           
   308                           ; 2 bytes @ 0x1C
   309  00004B                     	ds	2
   310  00004D                     main@sensor_1:
   311                           	opt stack 0
   312                           
   313                           ; 2 bytes @ 0x1E
   314  00004D                     	ds	2
   315  00004F                     main@ind:
   316                           	opt stack 0
   317                           
   318                           ; 1 bytes @ 0x20
   319  00004F                     	ds	1
   320  000050                     main@indicator:
   321                           	opt stack 0
   322                           
   323                           ; 1 bytes @ 0x21
   324  000050                     	ds	1
   325                           tblptru	equ	0xFF8
   326                           tblptrh	equ	0xFF7
   327                           tblptrl	equ	0xFF6
   328                           tablat	equ	0xFF5
   329                           postinc0	equ	0xFEE
   330                           wreg	equ	0xFE8
   331                           postdec1	equ	0xFE5
   332                           fsr1l	equ	0xFE1
   333                           
   334 ;;
   335 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   336 ;;
   337 ;; *************** function _main *****************
   338 ;; Defined at:
   339 ;;		line 6 in file "main.c"
   340 ;; Parameters:    Size  Location     Type
   341 ;;		None
   342 ;; Auto vars:     Size  Location     Type
   343 ;;  sensor_1        2   30[COMRAM] unsigned int 
   344 ;;  device_ID       2   28[COMRAM] unsigned int 
   345 ;;  indicator       1   33[COMRAM] unsigned char 
   346 ;;  ind             1   32[COMRAM] unsigned char 
   347 ;; Return value:  Size  Location     Type
   348 ;;                  1    wreg      void 
   349 ;; Registers used:
   350 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   351 ;; Tracked objects:
   352 ;;		On entry : 0/0
   353 ;;		On exit  : 0/0
   354 ;;		Unchanged: 0/0
   355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   357 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   359 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   360 ;;Total ram usage:        6 bytes
   361 ;; Hardware stack levels required when called:    2
   362 ;; This function calls:
   363 ;;		_delay_ms
   364 ;;		_get_ID
   365 ;;		_read_sensor
   366 ;;		_setup_AD7147
   367 ;;		_setup_mcu
   368 ;;		_setup_spi
   369 ;;		_uart_read_char
   370 ;;		_uart_write_char
   371 ;;		_uart_write_unsigned_int
   372 ;; This function is called by:
   373 ;;		Startup code after reset
   374 ;; This function uses a non-reentrant model
   375 ;;
   376                           
   377                           	psect	text0
   378  01F9B0                     __ptext0:
   379                           	opt stack 0
   380  01F9B0                     _main:
   381                           	opt stack 29
   382                           
   383                           ;main.c: 8: delay_ms(500);
   384                           
   385                           ;incstack = 0
   386  01F9B0  0E01               	movlw	1
   387  01F9B2  6E38               	movwf	delay_ms@n+1,c
   388  01F9B4  0EF4               	movlw	244
   389  01F9B6  6E37               	movwf	delay_ms@n,c
   390  01F9B8  EC8F  F0FC         	call	_delay_ms	;wreg free
   391                           
   392                           ;main.c: 9: setup_mcu();
   393  01F9BC  ECF1  F0FB         	call	_setup_mcu	;wreg free
   394                           
   395                           ;main.c: 10: setup_spi();
   396  01F9C0  EC37  F0FC         	call	_setup_spi	;wreg free
   397                           
   398                           ;main.c: 11: setup_AD7147();
   399  01F9C4  EC9A  F0FD         	call	_setup_AD7147	;wreg free
   400                           
   401                           ;main.c: 13: char ind = 's';
   402  01F9C8  0E73               	movlw	115
   403  01F9CA  6E4F               	movwf	main@ind,c
   404  01F9CC                     l1561:
   405                           
   406                           ;main.c: 16: {
   407                           ;main.c: 17: uart_write_char(ind);
   408  01F9CC  504F               	movf	main@ind,w,c
   409  01F9CE  ECEB  F0FB         	call	_uart_write_char
   410                           
   411                           ;main.c: 18: indicator = uart_read_char();
   412  01F9D2  EC14  F0FC         	call	_uart_read_char	;wreg free
   413  01F9D6  6E50               	movwf	main@indicator,c
   414                           
   415                           ;main.c: 19: if (indicator == 'i')
   416  01F9D8  0E69               	movlw	105
   417  01F9DA  1850               	xorwf	main@indicator,w,c
   418  01F9DC  A4D8               	btfss	status,2,c
   419  01F9DE  D00C               	goto	l1571
   420                           
   421                           ;main.c: 20: {
   422                           ;main.c: 21: unsigned int device_ID = get_ID();
   423  01F9E0  EC58  F0FC         	call	_get_ID	;wreg free
   424  01F9E4  C045  F04B         	movff	?_get_ID,main@device_ID
   425  01F9E8  C046  F04C         	movff	?_get_ID+1,main@device_ID+1
   426                           
   427                           ;main.c: 22: uart_write_unsigned_int(device_ID);
   428  01F9EC  C04B  F02F         	movff	main@device_ID,uart_write_unsigned_int@number
   429  01F9F0  C04C  F030         	movff	main@device_ID+1,uart_write_unsigned_int@number+1
   430  01F9F4  EC2A  F0FC         	call	_uart_write_unsigned_int	;wreg free
   431  01F9F8                     l1571:
   432                           
   433                           ;main.c: 23: }
   434                           ;main.c: 24: if (indicator == 's')
   435  01F9F8  0E73               	movlw	115
   436  01F9FA  1850               	xorwf	main@indicator,w,c
   437  01F9FC  A4D8               	btfss	status,2,c
   438  01F9FE  D010               	goto	l1577
   439                           
   440                           ;main.c: 25: {
   441                           ;main.c: 26: unsigned int sensor_1 = read_sensor(1);
   442  01FA00  0E00               	movlw	0
   443  01FA02  6E46               	movwf	read_sensor@sensor+1,c
   444  01FA04  0E01               	movlw	1
   445  01FA06  6E45               	movwf	read_sensor@sensor,c
   446  01FA08  EC45  F0FC         	call	_read_sensor	;wreg free
   447  01FA0C  C045  F04D         	movff	?_read_sensor,main@sensor_1
   448  01FA10  C046  F04E         	movff	?_read_sensor+1,main@sensor_1+1
   449                           
   450                           ;main.c: 27: uart_write_unsigned_int(sensor_1);
   451  01FA14  C04D  F02F         	movff	main@sensor_1,uart_write_unsigned_int@number
   452  01FA18  C04E  F030         	movff	main@sensor_1+1,uart_write_unsigned_int@number+1
   453  01FA1C  EC2A  F0FC         	call	_uart_write_unsigned_int	;wreg free
   454  01FA20                     l1577:
   455                           
   456                           ;main.c: 28: }
   457                           ;main.c: 29: delay_ms(500);
   458  01FA20  0E01               	movlw	1
   459  01FA22  6E38               	movwf	delay_ms@n+1,c
   460  01FA24  0EF4               	movlw	244
   461  01FA26  6E37               	movwf	delay_ms@n,c
   462  01FA28  EC8F  F0FC         	call	_delay_ms	;wreg free
   463  01FA2C  D7CF               	goto	l1561
   464  01FA2E                     __end_of_main:
   465                           	opt stack 0
   466                           tblptru	equ	0xFF8
   467                           tblptrh	equ	0xFF7
   468                           tblptrl	equ	0xFF6
   469                           tablat	equ	0xFF5
   470                           postinc0	equ	0xFEE
   471                           wreg	equ	0xFE8
   472                           postdec1	equ	0xFE5
   473                           fsr1l	equ	0xFE1
   474                           status	equ	0xFD8
   475                           
   476 ;; *************** function _uart_write_unsigned_int *****************
   477 ;; Defined at:
   478 ;;		line 39 in file "uart.c"
   479 ;; Parameters:    Size  Location     Type
   480 ;;  number          2    0[COMRAM] unsigned int 
   481 ;; Auto vars:     Size  Location     Type
   482 ;;  char2           1    3[COMRAM] unsigned char 
   483 ;;  char1           1    2[COMRAM] unsigned char 
   484 ;; Return value:  Size  Location     Type
   485 ;;                  1    wreg      void 
   486 ;; Registers used:
   487 ;;		wreg, status,2
   488 ;; Tracked objects:
   489 ;;		On entry : 0/0
   490 ;;		On exit  : 0/0
   491 ;;		Unchanged: 0/0
   492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   493 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   494 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   496 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   497 ;;Total ram usage:        4 bytes
   498 ;; Hardware stack levels used:    1
   499 ;; This function calls:
   500 ;;		Nothing
   501 ;; This function is called by:
   502 ;;		_main
   503 ;; This function uses a non-reentrant model
   504 ;;
   505                           
   506                           	psect	text1
   507  01F854                     __ptext1:
   508                           	opt stack 0
   509  01F854                     _uart_write_unsigned_int:
   510                           	opt stack 30
   511                           
   512                           ;uart.c: 41: char char1 = number & 0xFF;
   513                           
   514                           ;incstack = 0
   515  01F854  C02F  F031         	movff	uart_write_unsigned_int@number,uart_write_unsigned_int@char1
   516                           
   517                           ;uart.c: 42: char char2 = number >> 8;
   518  01F858  5030               	movf	uart_write_unsigned_int@number+1,w,c
   519  01F85A  6E32               	movwf	uart_write_unsigned_int@char2,c
   520  01F85C                     l253:
   521  01F85C  A26C               	btfss	3948,1,c	;volatile
   522  01F85E  D7FE               	goto	l253
   523                           
   524                           ;uart.c: 45: TXREG2 = char1;
   525  01F860  C031  FF6D         	movff	uart_write_unsigned_int@char1,3949	;volatile
   526  01F864                     l256:
   527  01F864  A26C               	btfss	3948,1,c	;volatile
   528  01F866  D7FE               	goto	l256
   529                           
   530                           ;uart.c: 47: TXREG2 = char2;
   531  01F868  C032  FF6D         	movff	uart_write_unsigned_int@char2,3949	;volatile
   532  01F86C  0012               	return		;funcret
   533  01F86E                     __end_of_uart_write_unsigned_int:
   534                           	opt stack 0
   535                           tblptru	equ	0xFF8
   536                           tblptrh	equ	0xFF7
   537                           tblptrl	equ	0xFF6
   538                           tablat	equ	0xFF5
   539                           postinc0	equ	0xFEE
   540                           wreg	equ	0xFE8
   541                           postdec1	equ	0xFE5
   542                           fsr1l	equ	0xFE1
   543                           status	equ	0xFD8
   544                           
   545 ;; *************** function _uart_write_char *****************
   546 ;; Defined at:
   547 ;;		line 24 in file "uart.c"
   548 ;; Parameters:    Size  Location     Type
   549 ;;  data            1    wreg     unsigned char 
   550 ;; Auto vars:     Size  Location     Type
   551 ;;  data            1    0[COMRAM] unsigned char 
   552 ;; Return value:  Size  Location     Type
   553 ;;                  1    wreg      void 
   554 ;; Registers used:
   555 ;;		wreg
   556 ;; Tracked objects:
   557 ;;		On entry : 0/0
   558 ;;		On exit  : 0/0
   559 ;;		Unchanged: 0/0
   560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   562 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   564 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   565 ;;Total ram usage:        1 bytes
   566 ;; Hardware stack levels used:    1
   567 ;; This function calls:
   568 ;;		Nothing
   569 ;; This function is called by:
   570 ;;		_main
   571 ;;		_uart_write_string
   572 ;; This function uses a non-reentrant model
   573 ;;
   574                           
   575                           	psect	text2
   576  01F7D6                     __ptext2:
   577                           	opt stack 0
   578  01F7D6                     _uart_write_char:
   579                           	opt stack 30
   580                           
   581                           ;incstack = 0
   582                           ;uart_write_char@data stored from wreg
   583  01F7D6  6E2F               	movwf	uart_write_char@data,c
   584  01F7D8                     l241:
   585  01F7D8  A26C               	btfss	3948,1,c	;volatile
   586  01F7DA  D7FE               	goto	l241
   587                           
   588                           ;uart.c: 28: TXREG2 = data;
   589  01F7DC  C02F  FF6D         	movff	uart_write_char@data,3949	;volatile
   590  01F7E0  0012               	return		;funcret
   591  01F7E2                     __end_of_uart_write_char:
   592                           	opt stack 0
   593                           tblptru	equ	0xFF8
   594                           tblptrh	equ	0xFF7
   595                           tblptrl	equ	0xFF6
   596                           tablat	equ	0xFF5
   597                           postinc0	equ	0xFEE
   598                           wreg	equ	0xFE8
   599                           postdec1	equ	0xFE5
   600                           fsr1l	equ	0xFE1
   601                           status	equ	0xFD8
   602                           
   603 ;; *************** function _uart_read_char *****************
   604 ;; Defined at:
   605 ;;		line 75 in file "uart.c"
   606 ;; Parameters:    Size  Location     Type
   607 ;;		None
   608 ;; Auto vars:     Size  Location     Type
   609 ;;		None
   610 ;; Return value:  Size  Location     Type
   611 ;;                  1    wreg      unsigned char 
   612 ;; Registers used:
   613 ;;		wreg, status,2
   614 ;; Tracked objects:
   615 ;;		On entry : 0/0
   616 ;;		On exit  : 0/0
   617 ;;		Unchanged: 0/0
   618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   623 ;;Total ram usage:        0 bytes
   624 ;; Hardware stack levels used:    1
   625 ;; This function calls:
   626 ;;		Nothing
   627 ;; This function is called by:
   628 ;;		_main
   629 ;;		_uart_read_text
   630 ;; This function uses a non-reentrant model
   631 ;;
   632                           
   633                           	psect	text3
   634  01F828                     __ptext3:
   635                           	opt stack 0
   636  01F828                     _uart_read_char:
   637                           	opt stack 30
   638                           
   639                           ;uart.c: 77: while(PIR3bits.RC2IF == 0)
   640                           
   641                           ;incstack = 0
   642  01F828  D005               	goto	l277
   643  01F82A                     l278:
   644                           
   645                           ;uart.c: 78: {
   646                           ;uart.c: 79: if(RCSTA2bits.OERR == 1)
   647  01F82A  A26B               	btfss	3947,1,c	;volatile
   648  01F82C  D003               	goto	l277
   649                           
   650                           ;uart.c: 80: {
   651                           ;uart.c: 81: RCSTA2bits.OERR = 0;
   652  01F82E  926B               	bcf	3947,1,c	;volatile
   653                           
   654                           ;uart.c: 82: RCSTA2bits.CREN = 0;
   655  01F830  986B               	bcf	3947,4,c	;volatile
   656                           
   657                           ;uart.c: 83: RCSTA2bits.CREN = 1;
   658  01F832  886B               	bsf	3947,4,c	;volatile
   659  01F834                     l277:
   660  01F834  AAA4               	btfss	4004,5,c	;volatile
   661  01F836  D7F9               	goto	l278
   662                           
   663                           ;uart.c: 84: }
   664                           ;uart.c: 85: }
   665                           ;uart.c: 86: return RCREG2;
   666  01F838  506E               	movf	3950,w,c	;volatile
   667  01F83A  0012               	return	
   668  01F83C                     __end_of_uart_read_char:
   669                           	opt stack 0
   670                           tblptru	equ	0xFF8
   671                           tblptrh	equ	0xFF7
   672                           tblptrl	equ	0xFF6
   673                           tablat	equ	0xFF5
   674                           postinc0	equ	0xFEE
   675                           wreg	equ	0xFE8
   676                           postdec1	equ	0xFE5
   677                           fsr1l	equ	0xFE1
   678                           status	equ	0xFD8
   679                           
   680 ;; *************** function _setup_spi *****************
   681 ;; Defined at:
   682 ;;		line 4 in file "spi.c"
   683 ;; Parameters:    Size  Location     Type
   684 ;;		None
   685 ;; Auto vars:     Size  Location     Type
   686 ;;		None
   687 ;; Return value:  Size  Location     Type
   688 ;;                  1    wreg      void 
   689 ;; Registers used:
   690 ;;		status,2, status,0
   691 ;; Tracked objects:
   692 ;;		On entry : 0/0
   693 ;;		On exit  : 0/0
   694 ;;		Unchanged: 0/0
   695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   700 ;;Total ram usage:        0 bytes
   701 ;; Hardware stack levels used:    1
   702 ;; This function calls:
   703 ;;		Nothing
   704 ;; This function is called by:
   705 ;;		_main
   706 ;; This function uses a non-reentrant model
   707 ;;
   708                           
   709                           	psect	text4
   710  01F86E                     __ptext4:
   711                           	opt stack 0
   712  01F86E                     _setup_spi:
   713                           	opt stack 30
   714                           
   715                           ;spi.c: 6: SSP1STATbits.SMP = 0;
   716                           
   717                           ;incstack = 0
   718  01F86E  9EC7               	bcf	4039,7,c	;volatile
   719                           
   720                           ;spi.c: 7: SSP1STATbits.CKE = 0;
   721  01F870  9CC7               	bcf	4039,6,c	;volatile
   722                           
   723                           ;spi.c: 9: SSP1CON1bits.WCOL = 0;
   724  01F872  9EC6               	bcf	4038,7,c	;volatile
   725                           
   726                           ;spi.c: 10: SSP1CON1bits.CKP = 1;
   727  01F874  88C6               	bsf	4038,4,c	;volatile
   728                           
   729                           ;spi.c: 12: SSP1CON1bits.SSPM3 = 0;
   730  01F876  96C6               	bcf	4038,3,c	;volatile
   731                           
   732                           ;spi.c: 13: SSP1CON1bits.SSPM2 = 0;
   733  01F878  94C6               	bcf	4038,2,c	;volatile
   734                           
   735                           ;spi.c: 14: SSP1CON1bits.SSPM1 = 1;
   736  01F87A  82C6               	bsf	4038,1,c	;volatile
   737                           
   738                           ;spi.c: 15: SSP1CON1bits.SSPM0 = 0;
   739  01F87C  90C6               	bcf	4038,0,c	;volatile
   740                           
   741                           ;spi.c: 17: PIE1bits.SSP1IE = 0;
   742  01F87E  969D               	bcf	3997,3,c	;volatile
   743                           
   744                           ;spi.c: 18: SSP1CON1bits.SSPEN = 1;
   745  01F880  8AC6               	bsf	4038,5,c	;volatile
   746                           
   747                           ;spi.c: 20: TRISC &= 0xDF;
   748  01F882  9A94               	bcf	3988,5,c	;volatile
   749                           
   750                           ;spi.c: 21: TRISC &= 0xF7;
   751  01F884  9694               	bcf	3988,3,c	;volatile
   752                           
   753                           ;spi.c: 23: TRISF &= 0x7F;
   754  01F886  9E97               	bcf	3991,7,c	;volatile
   755  01F888  0012               	return		;funcret
   756  01F88A                     __end_of_setup_spi:
   757                           	opt stack 0
   758                           tblptru	equ	0xFF8
   759                           tblptrh	equ	0xFF7
   760                           tblptrl	equ	0xFF6
   761                           tablat	equ	0xFF5
   762                           postinc0	equ	0xFEE
   763                           wreg	equ	0xFE8
   764                           postdec1	equ	0xFE5
   765                           fsr1l	equ	0xFE1
   766                           status	equ	0xFD8
   767                           
   768 ;; *************** function _setup_mcu *****************
   769 ;; Defined at:
   770 ;;		line 4 in file "micro_setup.c"
   771 ;; Parameters:    Size  Location     Type
   772 ;;		None
   773 ;; Auto vars:     Size  Location     Type
   774 ;;		None
   775 ;; Return value:  Size  Location     Type
   776 ;;                  1    wreg      void 
   777 ;; Registers used:
   778 ;;		wreg, status,2, cstack
   779 ;; Tracked objects:
   780 ;;		On entry : 0/0
   781 ;;		On exit  : 0/0
   782 ;;		Unchanged: 0/0
   783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   788 ;;Total ram usage:        0 bytes
   789 ;; Hardware stack levels used:    1
   790 ;; Hardware stack levels required when called:    1
   791 ;; This function calls:
   792 ;;		_init_pin
   793 ;;		_init_uart
   794 ;;		_setup_port
   795 ;; This function is called by:
   796 ;;		_main
   797 ;; This function uses a non-reentrant model
   798 ;;
   799                           
   800                           	psect	text5
   801  01F7E2                     __ptext5:
   802                           	opt stack 0
   803  01F7E2                     _setup_mcu:
   804                           	opt stack 29
   805                           
   806                           ;micro_setup.c: 6: setup_port();
   807                           
   808                           ;incstack = 0
   809  01F7E2  EC01  F0FC         	call	_setup_port	;wreg free
   810                           
   811                           ;micro_setup.c: 7: init_pin();
   812  01F7E6  ECF8  F0FB         	call	_init_pin	;wreg free
   813                           
   814                           ;micro_setup.c: 8: init_uart();
   815  01F7EA  EC0A  F0FC         	call	_init_uart	;wreg free
   816  01F7EE  0012               	return		;funcret
   817  01F7F0                     __end_of_setup_mcu:
   818                           	opt stack 0
   819                           tblptru	equ	0xFF8
   820                           tblptrh	equ	0xFF7
   821                           tblptrl	equ	0xFF6
   822                           tablat	equ	0xFF5
   823                           postinc0	equ	0xFEE
   824                           wreg	equ	0xFE8
   825                           postdec1	equ	0xFE5
   826                           fsr1l	equ	0xFE1
   827                           status	equ	0xFD8
   828                           
   829 ;; *************** function _setup_port *****************
   830 ;; Defined at:
   831 ;;		line 11 in file "micro_setup.c"
   832 ;; Parameters:    Size  Location     Type
   833 ;;		None
   834 ;; Auto vars:     Size  Location     Type
   835 ;;		None
   836 ;; Return value:  Size  Location     Type
   837 ;;                  1    wreg      void 
   838 ;; Registers used:
   839 ;;		wreg, status,2
   840 ;; Tracked objects:
   841 ;;		On entry : 0/0
   842 ;;		On exit  : 0/0
   843 ;;		Unchanged: 0/0
   844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   849 ;;Total ram usage:        0 bytes
   850 ;; Hardware stack levels used:    1
   851 ;; This function calls:
   852 ;;		Nothing
   853 ;; This function is called by:
   854 ;;		_setup_mcu
   855 ;; This function uses a non-reentrant model
   856 ;;
   857                           
   858                           	psect	text6
   859  01F802                     __ptext6:
   860                           	opt stack 0
   861  01F802                     _setup_port:
   862                           	opt stack 29
   863                           
   864                           ;micro_setup.c: 13: TRISD = 0b00000000;
   865                           
   866                           ;incstack = 0
   867  01F802  0E00               	movlw	0
   868  01F804  6E95               	movwf	3989,c	;volatile
   869                           
   870                           ;micro_setup.c: 14: TRISC = 0b00010000;
   871  01F806  0E10               	movlw	16
   872  01F808  6E94               	movwf	3988,c	;volatile
   873                           
   874                           ;micro_setup.c: 15: TRISE = 0b00000000;
   875  01F80A  0E00               	movlw	0
   876  01F80C  6E96               	movwf	3990,c	;volatile
   877                           
   878                           ;micro_setup.c: 16: TRISG = 0b00000100;
   879  01F80E  0E04               	movlw	4
   880  01F810  6E98               	movwf	3992,c	;volatile
   881  01F812  0012               	return		;funcret
   882  01F814                     __end_of_setup_port:
   883                           	opt stack 0
   884                           tblptru	equ	0xFF8
   885                           tblptrh	equ	0xFF7
   886                           tblptrl	equ	0xFF6
   887                           tablat	equ	0xFF5
   888                           postinc0	equ	0xFEE
   889                           wreg	equ	0xFE8
   890                           postdec1	equ	0xFE5
   891                           fsr1l	equ	0xFE1
   892                           status	equ	0xFD8
   893                           
   894 ;; *************** function _init_uart *****************
   895 ;; Defined at:
   896 ;;		line 19 in file "micro_setup.c"
   897 ;; Parameters:    Size  Location     Type
   898 ;;		None
   899 ;; Auto vars:     Size  Location     Type
   900 ;;		None
   901 ;; Return value:  Size  Location     Type
   902 ;;                  1    wreg      void 
   903 ;; Registers used:
   904 ;;		wreg, status,2
   905 ;; Tracked objects:
   906 ;;		On entry : 0/0
   907 ;;		On exit  : 0/0
   908 ;;		Unchanged: 0/0
   909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   914 ;;Total ram usage:        0 bytes
   915 ;; Hardware stack levels used:    1
   916 ;; This function calls:
   917 ;;		Nothing
   918 ;; This function is called by:
   919 ;;		_setup_mcu
   920 ;; This function uses a non-reentrant model
   921 ;;
   922                           
   923                           	psect	text7
   924  01F814                     __ptext7:
   925                           	opt stack 0
   926  01F814                     _init_uart:
   927                           	opt stack 29
   928                           
   929                           ;micro_setup.c: 21: TXSTA2 = 0b00100000;
   930                           
   931                           ;incstack = 0
   932  01F814  0E20               	movlw	32
   933  01F816  6E6C               	movwf	3948,c	;volatile
   934                           
   935                           ;micro_setup.c: 33: SPBRG2 = 15;
   936  01F818  0E0F               	movlw	15
   937  01F81A  6E6F               	movwf	3951,c	;volatile
   938                           
   939                           ;micro_setup.c: 35: BAUDCON2 = 0b00000000;
   940  01F81C  0E00               	movlw	0
   941  01F81E  6E7C               	movwf	3964,c	;volatile
   942                           
   943                           ;micro_setup.c: 55: RCSTA2bits.SPEN=1;
   944  01F820  8E6B               	bsf	3947,7,c	;volatile
   945                           
   946                           ;micro_setup.c: 56: RCSTA2bits.RX9=0;
   947  01F822  9C6B               	bcf	3947,6,c	;volatile
   948                           
   949                           ;micro_setup.c: 57: RCSTA2bits.CREN=1;
   950  01F824  886B               	bsf	3947,4,c	;volatile
   951  01F826  0012               	return		;funcret
   952  01F828                     __end_of_init_uart:
   953                           	opt stack 0
   954                           tblptru	equ	0xFF8
   955                           tblptrh	equ	0xFF7
   956                           tblptrl	equ	0xFF6
   957                           tablat	equ	0xFF5
   958                           postinc0	equ	0xFEE
   959                           wreg	equ	0xFE8
   960                           postdec1	equ	0xFE5
   961                           fsr1l	equ	0xFE1
   962                           status	equ	0xFD8
   963                           
   964 ;; *************** function _init_pin *****************
   965 ;; Defined at:
   966 ;;		line 66 in file "micro_setup.c"
   967 ;; Parameters:    Size  Location     Type
   968 ;;		None
   969 ;; Auto vars:     Size  Location     Type
   970 ;;		None
   971 ;; Return value:  Size  Location     Type
   972 ;;                  1    wreg      void 
   973 ;; Registers used:
   974 ;;		None
   975 ;; Tracked objects:
   976 ;;		On entry : 0/0
   977 ;;		On exit  : 0/0
   978 ;;		Unchanged: 0/0
   979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   984 ;;Total ram usage:        0 bytes
   985 ;; Hardware stack levels used:    1
   986 ;; This function calls:
   987 ;;		Nothing
   988 ;; This function is called by:
   989 ;;		_setup_mcu
   990 ;; This function uses a non-reentrant model
   991 ;;
   992                           
   993                           	psect	text8
   994  01F7F0                     __ptext8:
   995                           	opt stack 0
   996  01F7F0                     _init_pin:
   997                           	opt stack 29
   998                           
   999                           ;micro_setup.c: 68: PORTDbits.RD7 = 1;
  1000                           
  1001                           ;incstack = 0
  1002  01F7F0  8E83               	bsf	3971,7,c	;volatile
  1003                           
  1004                           ;micro_setup.c: 69: PORTDbits.RD6 = 0;
  1005  01F7F2  9C83               	bcf	3971,6,c	;volatile
  1006                           
  1007                           ;micro_setup.c: 70: PORTDbits.RD5 = 0;
  1008  01F7F4  9A83               	bcf	3971,5,c	;volatile
  1009                           
  1010                           ;micro_setup.c: 71: PORTDbits.RD4 = 0;
  1011  01F7F6  9883               	bcf	3971,4,c	;volatile
  1012                           
  1013                           ;micro_setup.c: 72: PORTDbits.RD3 = 0;
  1014  01F7F8  9683               	bcf	3971,3,c	;volatile
  1015                           
  1016                           ;micro_setup.c: 73: PORTDbits.RD2 = 0;
  1017  01F7FA  9483               	bcf	3971,2,c	;volatile
  1018                           
  1019                           ;micro_setup.c: 74: PORTDbits.RD1 = 0;
  1020  01F7FC  9283               	bcf	3971,1,c	;volatile
  1021                           
  1022                           ;micro_setup.c: 75: PORTDbits.RD0 = 0;
  1023  01F7FE  9083               	bcf	3971,0,c	;volatile
  1024  01F800  0012               	return		;funcret
  1025  01F802                     __end_of_init_pin:
  1026                           	opt stack 0
  1027                           tblptru	equ	0xFF8
  1028                           tblptrh	equ	0xFF7
  1029                           tblptrl	equ	0xFF6
  1030                           tablat	equ	0xFF5
  1031                           postinc0	equ	0xFEE
  1032                           wreg	equ	0xFE8
  1033                           postdec1	equ	0xFE5
  1034                           fsr1l	equ	0xFE1
  1035                           status	equ	0xFD8
  1036                           
  1037 ;; *************** function _setup_AD7147 *****************
  1038 ;; Defined at:
  1039 ;;		line 5 in file "AD7147.c"
  1040 ;; Parameters:    Size  Location     Type
  1041 ;;		None
  1042 ;; Auto vars:     Size  Location     Type
  1043 ;;  StageBuffer    16   12[COMRAM] unsigned int [8]
  1044 ;; Return value:  Size  Location     Type
  1045 ;;                  1    wreg      void 
  1046 ;; Registers used:
  1047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1048 ;; Tracked objects:
  1049 ;;		On entry : 0/0
  1050 ;;		On exit  : 0/0
  1051 ;;		Unchanged: 0/0
  1052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1054 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1056 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1057 ;;Total ram usage:       16 bytes
  1058 ;; Hardware stack levels used:    1
  1059 ;; Hardware stack levels required when called:    1
  1060 ;; This function calls:
  1061 ;;		_write_AD7147
  1062 ;; This function is called by:
  1063 ;;		_main
  1064 ;; This function uses a non-reentrant model
  1065 ;;
  1066                           
  1067                           	psect	text9
  1068  01FB34                     __ptext9:
  1069                           	opt stack 0
  1070  01FB34                     _setup_AD7147:
  1071                           	opt stack 29
  1072                           
  1073                           ;AD7147.c: 7: unsigned int StageBuffer[8];
  1074                           ;AD7147.c: 23: StageBuffer[0] = 0x3FFE;
  1075                           
  1076                           ;incstack = 0
  1077  01FB34  0E3F               	movlw	63
  1078  01FB36  6E3C               	movwf	setup_AD7147@StageBuffer+1,c
  1079  01FB38  0EFE               	movlw	254
  1080  01FB3A  6E3B               	movwf	setup_AD7147@StageBuffer,c
  1081                           
  1082                           ;AD7147.c: 24: StageBuffer[1] = 0x1FFF;
  1083  01FB3C  0E1F               	movlw	31
  1084  01FB3E  6E3E               	movwf	setup_AD7147@StageBuffer+3,c
  1085  01FB40  683D               	setf	setup_AD7147@StageBuffer+2,c
  1086                           
  1087                           ;AD7147.c: 25: StageBuffer[2] = 0x0100;
  1088  01FB42  0E01               	movlw	1
  1089  01FB44  6E40               	movwf	setup_AD7147@StageBuffer+5,c
  1090  01FB46  0E00               	movlw	0
  1091  01FB48  6E3F               	movwf	setup_AD7147@StageBuffer+4,c
  1092                           
  1093                           ;AD7147.c: 26: StageBuffer[3] = 0x2121;
  1094  01FB4A  0E21               	movlw	33
  1095  01FB4C  6E42               	movwf	setup_AD7147@StageBuffer+7,c
  1096  01FB4E  0E21               	movlw	33
  1097  01FB50  6E41               	movwf	setup_AD7147@StageBuffer+6,c
  1098                           
  1099                           ;AD7147.c: 27: StageBuffer[4] = 4000;
  1100  01FB52  0E0F               	movlw	15
  1101  01FB54  6E44               	movwf	setup_AD7147@StageBuffer+9,c
  1102  01FB56  0EA0               	movlw	160
  1103  01FB58  6E43               	movwf	setup_AD7147@StageBuffer+8,c
  1104                           
  1105                           ;AD7147.c: 28: StageBuffer[5] = 4000;
  1106  01FB5A  0E0F               	movlw	15
  1107  01FB5C  6E46               	movwf	setup_AD7147@StageBuffer+11,c
  1108  01FB5E  0EA0               	movlw	160
  1109  01FB60  6E45               	movwf	setup_AD7147@StageBuffer+10,c
  1110                           
  1111                           ;AD7147.c: 29: StageBuffer[6] = 4250;
  1112  01FB62  0E10               	movlw	16
  1113  01FB64  6E48               	movwf	setup_AD7147@StageBuffer+13,c
  1114  01FB66  0E9A               	movlw	154
  1115  01FB68  6E47               	movwf	setup_AD7147@StageBuffer+12,c
  1116                           
  1117                           ;AD7147.c: 30: StageBuffer[7] = 4250;
  1118  01FB6A  0E10               	movlw	16
  1119  01FB6C  6E4A               	movwf	setup_AD7147@StageBuffer+15,c
  1120  01FB6E  0E9A               	movlw	154
  1121  01FB70  6E49               	movwf	setup_AD7147@StageBuffer+14,c
  1122                           
  1123                           ;AD7147.c: 31: write_AD7147(0x80, 8, StageBuffer);
  1124  01FB72  0E00               	movlw	0
  1125  01FB74  6E30               	movwf	write_AD7147@RegisterAddress+1,c
  1126  01FB76  0E80               	movlw	128
  1127  01FB78  6E2F               	movwf	write_AD7147@RegisterAddress,c
  1128  01FB7A  0E00               	movlw	0
  1129  01FB7C  6E32               	movwf	write_AD7147@NumberOfRegisters+1,c
  1130  01FB7E  0E08               	movlw	8
  1131  01FB80  6E31               	movwf	write_AD7147@NumberOfRegisters,c
  1132  01FB82  0E3B               	movlw	low setup_AD7147@StageBuffer
  1133  01FB84  6E33               	movwf	write_AD7147@DataBuffer,c
  1134  01FB86  0E00               	movlw	high setup_AD7147@StageBuffer
  1135  01FB88  6E34               	movwf	write_AD7147@DataBuffer+1,c
  1136  01FB8A  ECAF  F0FC         	call	_write_AD7147	;wreg free
  1137                           
  1138                           ;AD7147.c: 36: StageBuffer[0]=0x3FFB;
  1139  01FB8E  0E3F               	movlw	63
  1140  01FB90  6E3C               	movwf	setup_AD7147@StageBuffer+1,c
  1141  01FB92  0EFB               	movlw	251
  1142  01FB94  6E3B               	movwf	setup_AD7147@StageBuffer,c
  1143                           
  1144                           ;AD7147.c: 37: StageBuffer[1]=0x1FFF;
  1145  01FB96  0E1F               	movlw	31
  1146  01FB98  6E3E               	movwf	setup_AD7147@StageBuffer+3,c
  1147  01FB9A  683D               	setf	setup_AD7147@StageBuffer+2,c
  1148                           
  1149                           ;AD7147.c: 38: StageBuffer[2]=0x0100;
  1150  01FB9C  0E01               	movlw	1
  1151  01FB9E  6E40               	movwf	setup_AD7147@StageBuffer+5,c
  1152  01FBA0  0E00               	movlw	0
  1153  01FBA2  6E3F               	movwf	setup_AD7147@StageBuffer+4,c
  1154                           
  1155                           ;AD7147.c: 39: StageBuffer[3]=0x2121;
  1156  01FBA4  0E21               	movlw	33
  1157  01FBA6  6E42               	movwf	setup_AD7147@StageBuffer+7,c
  1158  01FBA8  0E21               	movlw	33
  1159  01FBAA  6E41               	movwf	setup_AD7147@StageBuffer+6,c
  1160                           
  1161                           ;AD7147.c: 40: StageBuffer[4]=4000;
  1162  01FBAC  0E0F               	movlw	15
  1163  01FBAE  6E44               	movwf	setup_AD7147@StageBuffer+9,c
  1164  01FBB0  0EA0               	movlw	160
  1165  01FBB2  6E43               	movwf	setup_AD7147@StageBuffer+8,c
  1166                           
  1167                           ;AD7147.c: 41: StageBuffer[5]=4000;
  1168  01FBB4  0E0F               	movlw	15
  1169  01FBB6  6E46               	movwf	setup_AD7147@StageBuffer+11,c
  1170  01FBB8  0EA0               	movlw	160
  1171  01FBBA  6E45               	movwf	setup_AD7147@StageBuffer+10,c
  1172                           
  1173                           ;AD7147.c: 42: StageBuffer[6]=4250;
  1174  01FBBC  0E10               	movlw	16
  1175  01FBBE  6E48               	movwf	setup_AD7147@StageBuffer+13,c
  1176  01FBC0  0E9A               	movlw	154
  1177  01FBC2  6E47               	movwf	setup_AD7147@StageBuffer+12,c
  1178                           
  1179                           ;AD7147.c: 43: StageBuffer[7]=4250;
  1180  01FBC4  0E10               	movlw	16
  1181  01FBC6  6E4A               	movwf	setup_AD7147@StageBuffer+15,c
  1182  01FBC8  0E9A               	movlw	154
  1183  01FBCA  6E49               	movwf	setup_AD7147@StageBuffer+14,c
  1184                           
  1185                           ;AD7147.c: 44: write_AD7147(0x88, 8, StageBuffer);
  1186  01FBCC  0E00               	movlw	0
  1187  01FBCE  6E30               	movwf	write_AD7147@RegisterAddress+1,c
  1188  01FBD0  0E88               	movlw	136
  1189  01FBD2  6E2F               	movwf	write_AD7147@RegisterAddress,c
  1190  01FBD4  0E00               	movlw	0
  1191  01FBD6  6E32               	movwf	write_AD7147@NumberOfRegisters+1,c
  1192  01FBD8  0E08               	movlw	8
  1193  01FBDA  6E31               	movwf	write_AD7147@NumberOfRegisters,c
  1194  01FBDC  0E3B               	movlw	low setup_AD7147@StageBuffer
  1195  01FBDE  6E33               	movwf	write_AD7147@DataBuffer,c
  1196  01FBE0  0E00               	movlw	high setup_AD7147@StageBuffer
  1197  01FBE2  6E34               	movwf	write_AD7147@DataBuffer+1,c
  1198  01FBE4  ECAF  F0FC         	call	_write_AD7147	;wreg free
  1199                           
  1200                           ;AD7147.c: 49: StageBuffer[0]=0x3FEF;
  1201  01FBE8  0E3F               	movlw	63
  1202  01FBEA  6E3C               	movwf	setup_AD7147@StageBuffer+1,c
  1203  01FBEC  0EEF               	movlw	239
  1204  01FBEE  6E3B               	movwf	setup_AD7147@StageBuffer,c
  1205                           
  1206                           ;AD7147.c: 50: StageBuffer[1]=0x1FFF;
  1207  01FBF0  0E1F               	movlw	31
  1208  01FBF2  6E3E               	movwf	setup_AD7147@StageBuffer+3,c
  1209  01FBF4  683D               	setf	setup_AD7147@StageBuffer+2,c
  1210                           
  1211                           ;AD7147.c: 51: StageBuffer[2]=0x0100;
  1212  01FBF6  0E01               	movlw	1
  1213  01FBF8  6E40               	movwf	setup_AD7147@StageBuffer+5,c
  1214  01FBFA  0E00               	movlw	0
  1215  01FBFC  6E3F               	movwf	setup_AD7147@StageBuffer+4,c
  1216                           
  1217                           ;AD7147.c: 52: StageBuffer[3]=0x2121;
  1218  01FBFE  0E21               	movlw	33
  1219  01FC00  6E42               	movwf	setup_AD7147@StageBuffer+7,c
  1220  01FC02  0E21               	movlw	33
  1221  01FC04  6E41               	movwf	setup_AD7147@StageBuffer+6,c
  1222                           
  1223                           ;AD7147.c: 53: StageBuffer[4]=4000;
  1224  01FC06  0E0F               	movlw	15
  1225  01FC08  6E44               	movwf	setup_AD7147@StageBuffer+9,c
  1226  01FC0A  0EA0               	movlw	160
  1227  01FC0C  6E43               	movwf	setup_AD7147@StageBuffer+8,c
  1228                           
  1229                           ;AD7147.c: 54: StageBuffer[5]=4000;
  1230  01FC0E  0E0F               	movlw	15
  1231  01FC10  6E46               	movwf	setup_AD7147@StageBuffer+11,c
  1232  01FC12  0EA0               	movlw	160
  1233  01FC14  6E45               	movwf	setup_AD7147@StageBuffer+10,c
  1234                           
  1235                           ;AD7147.c: 55: StageBuffer[6]=4250;
  1236  01FC16  0E10               	movlw	16
  1237  01FC18  6E48               	movwf	setup_AD7147@StageBuffer+13,c
  1238  01FC1A  0E9A               	movlw	154
  1239  01FC1C  6E47               	movwf	setup_AD7147@StageBuffer+12,c
  1240                           
  1241                           ;AD7147.c: 56: StageBuffer[7]=4250;
  1242  01FC1E  0E10               	movlw	16
  1243  01FC20  6E4A               	movwf	setup_AD7147@StageBuffer+15,c
  1244  01FC22  0E9A               	movlw	154
  1245  01FC24  6E49               	movwf	setup_AD7147@StageBuffer+14,c
  1246                           
  1247                           ;AD7147.c: 57: write_AD7147(0x90, 8, StageBuffer);
  1248  01FC26  0E00               	movlw	0
  1249  01FC28  6E30               	movwf	write_AD7147@RegisterAddress+1,c
  1250  01FC2A  0E90               	movlw	144
  1251  01FC2C  6E2F               	movwf	write_AD7147@RegisterAddress,c
  1252  01FC2E  0E00               	movlw	0
  1253  01FC30  6E32               	movwf	write_AD7147@NumberOfRegisters+1,c
  1254  01FC32  0E08               	movlw	8
  1255  01FC34  6E31               	movwf	write_AD7147@NumberOfRegisters,c
  1256  01FC36  0E3B               	movlw	low setup_AD7147@StageBuffer
  1257  01FC38  6E33               	movwf	write_AD7147@DataBuffer,c
  1258  01FC3A  0E00               	movlw	high setup_AD7147@StageBuffer
  1259  01FC3C  6E34               	movwf	write_AD7147@DataBuffer+1,c
  1260  01FC3E  ECAF  F0FC         	call	_write_AD7147	;wreg free
  1261                           
  1262                           ;AD7147.c: 62: StageBuffer[0]=0x3FBF;
  1263  01FC42  0E3F               	movlw	63
  1264  01FC44  6E3C               	movwf	setup_AD7147@StageBuffer+1,c
  1265  01FC46  0EBF               	movlw	191
  1266  01FC48  6E3B               	movwf	setup_AD7147@StageBuffer,c
  1267                           
  1268                           ;AD7147.c: 63: StageBuffer[1]=0x1FFF;
  1269  01FC4A  0E1F               	movlw	31
  1270  01FC4C  6E3E               	movwf	setup_AD7147@StageBuffer+3,c
  1271  01FC4E  683D               	setf	setup_AD7147@StageBuffer+2,c
  1272                           
  1273                           ;AD7147.c: 64: StageBuffer[2]=0x0100;
  1274  01FC50  0E01               	movlw	1
  1275  01FC52  6E40               	movwf	setup_AD7147@StageBuffer+5,c
  1276  01FC54  0E00               	movlw	0
  1277  01FC56  6E3F               	movwf	setup_AD7147@StageBuffer+4,c
  1278                           
  1279                           ;AD7147.c: 65: StageBuffer[3]=0x2121;
  1280  01FC58  0E21               	movlw	33
  1281  01FC5A  6E42               	movwf	setup_AD7147@StageBuffer+7,c
  1282  01FC5C  0E21               	movlw	33
  1283  01FC5E  6E41               	movwf	setup_AD7147@StageBuffer+6,c
  1284                           
  1285                           ;AD7147.c: 66: StageBuffer[4]=4000;
  1286  01FC60  0E0F               	movlw	15
  1287  01FC62  6E44               	movwf	setup_AD7147@StageBuffer+9,c
  1288  01FC64  0EA0               	movlw	160
  1289  01FC66  6E43               	movwf	setup_AD7147@StageBuffer+8,c
  1290                           
  1291                           ;AD7147.c: 67: StageBuffer[5]=4000;
  1292  01FC68  0E0F               	movlw	15
  1293  01FC6A  6E46               	movwf	setup_AD7147@StageBuffer+11,c
  1294  01FC6C  0EA0               	movlw	160
  1295  01FC6E  6E45               	movwf	setup_AD7147@StageBuffer+10,c
  1296                           
  1297                           ;AD7147.c: 68: StageBuffer[6]=4250;
  1298  01FC70  0E10               	movlw	16
  1299  01FC72  6E48               	movwf	setup_AD7147@StageBuffer+13,c
  1300  01FC74  0E9A               	movlw	154
  1301  01FC76  6E47               	movwf	setup_AD7147@StageBuffer+12,c
  1302                           
  1303                           ;AD7147.c: 69: StageBuffer[7]=4250;
  1304  01FC78  0E10               	movlw	16
  1305  01FC7A  6E4A               	movwf	setup_AD7147@StageBuffer+15,c
  1306  01FC7C  0E9A               	movlw	154
  1307  01FC7E  6E49               	movwf	setup_AD7147@StageBuffer+14,c
  1308                           
  1309                           ;AD7147.c: 70: write_AD7147(0x98, 8, StageBuffer);
  1310  01FC80  0E00               	movlw	0
  1311  01FC82  6E30               	movwf	write_AD7147@RegisterAddress+1,c
  1312  01FC84  0E98               	movlw	152
  1313  01FC86  6E2F               	movwf	write_AD7147@RegisterAddress,c
  1314  01FC88  0E00               	movlw	0
  1315  01FC8A  6E32               	movwf	write_AD7147@NumberOfRegisters+1,c
  1316  01FC8C  0E08               	movlw	8
  1317  01FC8E  6E31               	movwf	write_AD7147@NumberOfRegisters,c
  1318  01FC90  0E3B               	movlw	low setup_AD7147@StageBuffer
  1319  01FC92  6E33               	movwf	write_AD7147@DataBuffer,c
  1320  01FC94  0E00               	movlw	high setup_AD7147@StageBuffer
  1321  01FC96  6E34               	movwf	write_AD7147@DataBuffer+1,c
  1322  01FC98  ECAF  F0FC         	call	_write_AD7147	;wreg free
  1323                           
  1324                           ;AD7147.c: 75: StageBuffer[0]=0x3EFF;
  1325  01FC9C  0E3E               	movlw	62
  1326  01FC9E  6E3C               	movwf	setup_AD7147@StageBuffer+1,c
  1327  01FCA0  683B               	setf	setup_AD7147@StageBuffer,c
  1328                           
  1329                           ;AD7147.c: 76: StageBuffer[1]=0x1FFF;
  1330  01FCA2  0E1F               	movlw	31
  1331  01FCA4  6E3E               	movwf	setup_AD7147@StageBuffer+3,c
  1332  01FCA6  683D               	setf	setup_AD7147@StageBuffer+2,c
  1333                           
  1334                           ;AD7147.c: 77: StageBuffer[2]=0x0100;
  1335  01FCA8  0E01               	movlw	1
  1336  01FCAA  6E40               	movwf	setup_AD7147@StageBuffer+5,c
  1337  01FCAC  0E00               	movlw	0
  1338  01FCAE  6E3F               	movwf	setup_AD7147@StageBuffer+4,c
  1339                           
  1340                           ;AD7147.c: 78: StageBuffer[3]=0x2121;
  1341  01FCB0  0E21               	movlw	33
  1342  01FCB2  6E42               	movwf	setup_AD7147@StageBuffer+7,c
  1343  01FCB4  0E21               	movlw	33
  1344  01FCB6  6E41               	movwf	setup_AD7147@StageBuffer+6,c
  1345                           
  1346                           ;AD7147.c: 79: StageBuffer[4]=4000;
  1347  01FCB8  0E0F               	movlw	15
  1348  01FCBA  6E44               	movwf	setup_AD7147@StageBuffer+9,c
  1349  01FCBC  0EA0               	movlw	160
  1350  01FCBE  6E43               	movwf	setup_AD7147@StageBuffer+8,c
  1351                           
  1352                           ;AD7147.c: 80: StageBuffer[5]=4000;
  1353  01FCC0  0E0F               	movlw	15
  1354  01FCC2  6E46               	movwf	setup_AD7147@StageBuffer+11,c
  1355  01FCC4  0EA0               	movlw	160
  1356  01FCC6  6E45               	movwf	setup_AD7147@StageBuffer+10,c
  1357                           
  1358                           ;AD7147.c: 81: StageBuffer[6]=4250;
  1359  01FCC8  0E10               	movlw	16
  1360  01FCCA  6E48               	movwf	setup_AD7147@StageBuffer+13,c
  1361  01FCCC  0E9A               	movlw	154
  1362  01FCCE  6E47               	movwf	setup_AD7147@StageBuffer+12,c
  1363                           
  1364                           ;AD7147.c: 82: StageBuffer[7]=4250;
  1365  01FCD0  0E10               	movlw	16
  1366  01FCD2  6E4A               	movwf	setup_AD7147@StageBuffer+15,c
  1367  01FCD4  0E9A               	movlw	154
  1368  01FCD6  6E49               	movwf	setup_AD7147@StageBuffer+14,c
  1369                           
  1370                           ;AD7147.c: 83: write_AD7147(0xA0, 8, StageBuffer);
  1371  01FCD8  0E00               	movlw	0
  1372  01FCDA  6E30               	movwf	write_AD7147@RegisterAddress+1,c
  1373  01FCDC  0EA0               	movlw	160
  1374  01FCDE  6E2F               	movwf	write_AD7147@RegisterAddress,c
  1375  01FCE0  0E00               	movlw	0
  1376  01FCE2  6E32               	movwf	write_AD7147@NumberOfRegisters+1,c
  1377  01FCE4  0E08               	movlw	8
  1378  01FCE6  6E31               	movwf	write_AD7147@NumberOfRegisters,c
  1379  01FCE8  0E3B               	movlw	low setup_AD7147@StageBuffer
  1380  01FCEA  6E33               	movwf	write_AD7147@DataBuffer,c
  1381  01FCEC  0E00               	movlw	high setup_AD7147@StageBuffer
  1382  01FCEE  6E34               	movwf	write_AD7147@DataBuffer+1,c
  1383  01FCF0  ECAF  F0FC         	call	_write_AD7147	;wreg free
  1384                           
  1385                           ;AD7147.c: 88: StageBuffer[0]=0x3BFF;
  1386  01FCF4  0E3B               	movlw	59
  1387  01FCF6  6E3C               	movwf	setup_AD7147@StageBuffer+1,c
  1388  01FCF8  683B               	setf	setup_AD7147@StageBuffer,c
  1389                           
  1390                           ;AD7147.c: 89: StageBuffer[1]=0x1FFF;
  1391  01FCFA  0E1F               	movlw	31
  1392  01FCFC  6E3E               	movwf	setup_AD7147@StageBuffer+3,c
  1393  01FCFE  683D               	setf	setup_AD7147@StageBuffer+2,c
  1394                           
  1395                           ;AD7147.c: 90: StageBuffer[2]=0x0100;
  1396  01FD00  0E01               	movlw	1
  1397  01FD02  6E40               	movwf	setup_AD7147@StageBuffer+5,c
  1398  01FD04  0E00               	movlw	0
  1399  01FD06  6E3F               	movwf	setup_AD7147@StageBuffer+4,c
  1400                           
  1401                           ;AD7147.c: 91: StageBuffer[3]=0x2121;
  1402  01FD08  0E21               	movlw	33
  1403  01FD0A  6E42               	movwf	setup_AD7147@StageBuffer+7,c
  1404  01FD0C  0E21               	movlw	33
  1405  01FD0E  6E41               	movwf	setup_AD7147@StageBuffer+6,c
  1406                           
  1407                           ;AD7147.c: 92: StageBuffer[4]=4000;
  1408  01FD10  0E0F               	movlw	15
  1409  01FD12  6E44               	movwf	setup_AD7147@StageBuffer+9,c
  1410  01FD14  0EA0               	movlw	160
  1411  01FD16  6E43               	movwf	setup_AD7147@StageBuffer+8,c
  1412                           
  1413                           ;AD7147.c: 93: StageBuffer[5]=4000;
  1414  01FD18  0E0F               	movlw	15
  1415  01FD1A  6E46               	movwf	setup_AD7147@StageBuffer+11,c
  1416  01FD1C  0EA0               	movlw	160
  1417  01FD1E  6E45               	movwf	setup_AD7147@StageBuffer+10,c
  1418                           
  1419                           ;AD7147.c: 94: StageBuffer[6]=4250;
  1420  01FD20  0E10               	movlw	16
  1421  01FD22  6E48               	movwf	setup_AD7147@StageBuffer+13,c
  1422  01FD24  0E9A               	movlw	154
  1423  01FD26  6E47               	movwf	setup_AD7147@StageBuffer+12,c
  1424                           
  1425                           ;AD7147.c: 95: StageBuffer[7]=4250;
  1426  01FD28  0E10               	movlw	16
  1427  01FD2A  6E4A               	movwf	setup_AD7147@StageBuffer+15,c
  1428  01FD2C  0E9A               	movlw	154
  1429  01FD2E  6E49               	movwf	setup_AD7147@StageBuffer+14,c
  1430                           
  1431                           ;AD7147.c: 96: write_AD7147(0xA8, 8, StageBuffer);
  1432  01FD30  0E00               	movlw	0
  1433  01FD32  6E30               	movwf	write_AD7147@RegisterAddress+1,c
  1434  01FD34  0EA8               	movlw	168
  1435  01FD36  6E2F               	movwf	write_AD7147@RegisterAddress,c
  1436  01FD38  0E00               	movlw	0
  1437  01FD3A  6E32               	movwf	write_AD7147@NumberOfRegisters+1,c
  1438  01FD3C  0E08               	movlw	8
  1439  01FD3E  6E31               	movwf	write_AD7147@NumberOfRegisters,c
  1440  01FD40  0E3B               	movlw	low setup_AD7147@StageBuffer
  1441  01FD42  6E33               	movwf	write_AD7147@DataBuffer,c
  1442  01FD44  0E00               	movlw	high setup_AD7147@StageBuffer
  1443  01FD46  6E34               	movwf	write_AD7147@DataBuffer+1,c
  1444  01FD48  ECAF  F0FC         	call	_write_AD7147	;wreg free
  1445                           
  1446                           ;AD7147.c: 101: StageBuffer[0]=0x2FFF;
  1447  01FD4C  0E2F               	movlw	47
  1448  01FD4E  6E3C               	movwf	setup_AD7147@StageBuffer+1,c
  1449  01FD50  683B               	setf	setup_AD7147@StageBuffer,c
  1450                           
  1451                           ;AD7147.c: 102: StageBuffer[1]=0x1FFF;
  1452  01FD52  0E1F               	movlw	31
  1453  01FD54  6E3E               	movwf	setup_AD7147@StageBuffer+3,c
  1454  01FD56  683D               	setf	setup_AD7147@StageBuffer+2,c
  1455                           
  1456                           ;AD7147.c: 103: StageBuffer[2]=0x0100;
  1457  01FD58  0E01               	movlw	1
  1458  01FD5A  6E40               	movwf	setup_AD7147@StageBuffer+5,c
  1459  01FD5C  0E00               	movlw	0
  1460  01FD5E  6E3F               	movwf	setup_AD7147@StageBuffer+4,c
  1461                           
  1462                           ;AD7147.c: 104: StageBuffer[3]=0x2121;
  1463  01FD60  0E21               	movlw	33
  1464  01FD62  6E42               	movwf	setup_AD7147@StageBuffer+7,c
  1465  01FD64  0E21               	movlw	33
  1466  01FD66  6E41               	movwf	setup_AD7147@StageBuffer+6,c
  1467                           
  1468                           ;AD7147.c: 105: StageBuffer[4]=4000;
  1469  01FD68  0E0F               	movlw	15
  1470  01FD6A  6E44               	movwf	setup_AD7147@StageBuffer+9,c
  1471  01FD6C  0EA0               	movlw	160
  1472  01FD6E  6E43               	movwf	setup_AD7147@StageBuffer+8,c
  1473                           
  1474                           ;AD7147.c: 106: StageBuffer[5]=4000;
  1475  01FD70  0E0F               	movlw	15
  1476  01FD72  6E46               	movwf	setup_AD7147@StageBuffer+11,c
  1477  01FD74  0EA0               	movlw	160
  1478  01FD76  6E45               	movwf	setup_AD7147@StageBuffer+10,c
  1479                           
  1480                           ;AD7147.c: 107: StageBuffer[6]=4250;
  1481  01FD78  0E10               	movlw	16
  1482  01FD7A  6E48               	movwf	setup_AD7147@StageBuffer+13,c
  1483  01FD7C  0E9A               	movlw	154
  1484  01FD7E  6E47               	movwf	setup_AD7147@StageBuffer+12,c
  1485                           
  1486                           ;AD7147.c: 108: StageBuffer[7]=4250;
  1487  01FD80  0E10               	movlw	16
  1488  01FD82  6E4A               	movwf	setup_AD7147@StageBuffer+15,c
  1489  01FD84  0E9A               	movlw	154
  1490  01FD86  6E49               	movwf	setup_AD7147@StageBuffer+14,c
  1491                           
  1492                           ;AD7147.c: 109: write_AD7147(0xB0, 8, StageBuffer);
  1493  01FD88  0E00               	movlw	0
  1494  01FD8A  6E30               	movwf	write_AD7147@RegisterAddress+1,c
  1495  01FD8C  0EB0               	movlw	176
  1496  01FD8E  6E2F               	movwf	write_AD7147@RegisterAddress,c
  1497  01FD90  0E00               	movlw	0
  1498  01FD92  6E32               	movwf	write_AD7147@NumberOfRegisters+1,c
  1499  01FD94  0E08               	movlw	8
  1500  01FD96  6E31               	movwf	write_AD7147@NumberOfRegisters,c
  1501  01FD98  0E3B               	movlw	low setup_AD7147@StageBuffer
  1502  01FD9A  6E33               	movwf	write_AD7147@DataBuffer,c
  1503  01FD9C  0E00               	movlw	high setup_AD7147@StageBuffer
  1504  01FD9E  6E34               	movwf	write_AD7147@DataBuffer+1,c
  1505  01FDA0  ECAF  F0FC         	call	_write_AD7147	;wreg free
  1506                           
  1507                           ;AD7147.c: 114: StageBuffer[0]=0x3FFF;
  1508  01FDA4  0E3F               	movlw	63
  1509  01FDA6  6E3C               	movwf	setup_AD7147@StageBuffer+1,c
  1510  01FDA8  683B               	setf	setup_AD7147@StageBuffer,c
  1511                           
  1512                           ;AD7147.c: 115: StageBuffer[1]=0x1FFE;
  1513  01FDAA  0E1F               	movlw	31
  1514  01FDAC  6E3E               	movwf	setup_AD7147@StageBuffer+3,c
  1515  01FDAE  0EFE               	movlw	254
  1516  01FDB0  6E3D               	movwf	setup_AD7147@StageBuffer+2,c
  1517                           
  1518                           ;AD7147.c: 116: StageBuffer[2]=0x0100;
  1519  01FDB2  0E01               	movlw	1
  1520  01FDB4  6E40               	movwf	setup_AD7147@StageBuffer+5,c
  1521  01FDB6  0E00               	movlw	0
  1522  01FDB8  6E3F               	movwf	setup_AD7147@StageBuffer+4,c
  1523                           
  1524                           ;AD7147.c: 117: StageBuffer[3]=0x2121;
  1525  01FDBA  0E21               	movlw	33
  1526  01FDBC  6E42               	movwf	setup_AD7147@StageBuffer+7,c
  1527  01FDBE  0E21               	movlw	33
  1528  01FDC0  6E41               	movwf	setup_AD7147@StageBuffer+6,c
  1529                           
  1530                           ;AD7147.c: 118: StageBuffer[4]=4000;
  1531  01FDC2  0E0F               	movlw	15
  1532  01FDC4  6E44               	movwf	setup_AD7147@StageBuffer+9,c
  1533  01FDC6  0EA0               	movlw	160
  1534  01FDC8  6E43               	movwf	setup_AD7147@StageBuffer+8,c
  1535                           
  1536                           ;AD7147.c: 119: StageBuffer[5]=4000;
  1537  01FDCA  0E0F               	movlw	15
  1538  01FDCC  6E46               	movwf	setup_AD7147@StageBuffer+11,c
  1539  01FDCE  0EA0               	movlw	160
  1540  01FDD0  6E45               	movwf	setup_AD7147@StageBuffer+10,c
  1541                           
  1542                           ;AD7147.c: 120: StageBuffer[6]=4250;
  1543  01FDD2  0E10               	movlw	16
  1544  01FDD4  6E48               	movwf	setup_AD7147@StageBuffer+13,c
  1545  01FDD6  0E9A               	movlw	154
  1546  01FDD8  6E47               	movwf	setup_AD7147@StageBuffer+12,c
  1547                           
  1548                           ;AD7147.c: 121: StageBuffer[7]=4250;
  1549  01FDDA  0E10               	movlw	16
  1550  01FDDC  6E4A               	movwf	setup_AD7147@StageBuffer+15,c
  1551  01FDDE  0E9A               	movlw	154
  1552  01FDE0  6E49               	movwf	setup_AD7147@StageBuffer+14,c
  1553                           
  1554                           ;AD7147.c: 122: write_AD7147(0xB8, 8, StageBuffer);
  1555  01FDE2  0E00               	movlw	0
  1556  01FDE4  6E30               	movwf	write_AD7147@RegisterAddress+1,c
  1557  01FDE6  0EB8               	movlw	184
  1558  01FDE8  6E2F               	movwf	write_AD7147@RegisterAddress,c
  1559  01FDEA  0E00               	movlw	0
  1560  01FDEC  6E32               	movwf	write_AD7147@NumberOfRegisters+1,c
  1561  01FDEE  0E08               	movlw	8
  1562  01FDF0  6E31               	movwf	write_AD7147@NumberOfRegisters,c
  1563  01FDF2  0E3B               	movlw	low setup_AD7147@StageBuffer
  1564  01FDF4  6E33               	movwf	write_AD7147@DataBuffer,c
  1565  01FDF6  0E00               	movlw	high setup_AD7147@StageBuffer
  1566  01FDF8  6E34               	movwf	write_AD7147@DataBuffer+1,c
  1567  01FDFA  ECAF  F0FC         	call	_write_AD7147	;wreg free
  1568                           
  1569                           ;AD7147.c: 127: StageBuffer[0]=0x3FFF;
  1570  01FDFE  0E3F               	movlw	63
  1571  01FE00  6E3C               	movwf	setup_AD7147@StageBuffer+1,c
  1572  01FE02  683B               	setf	setup_AD7147@StageBuffer,c
  1573                           
  1574                           ;AD7147.c: 128: StageBuffer[1]=0x1FFB;
  1575  01FE04  0E1F               	movlw	31
  1576  01FE06  6E3E               	movwf	setup_AD7147@StageBuffer+3,c
  1577  01FE08  0EFB               	movlw	251
  1578  01FE0A  6E3D               	movwf	setup_AD7147@StageBuffer+2,c
  1579                           
  1580                           ;AD7147.c: 129: StageBuffer[2]=0x0100;
  1581  01FE0C  0E01               	movlw	1
  1582  01FE0E  6E40               	movwf	setup_AD7147@StageBuffer+5,c
  1583  01FE10  0E00               	movlw	0
  1584  01FE12  6E3F               	movwf	setup_AD7147@StageBuffer+4,c
  1585                           
  1586                           ;AD7147.c: 130: StageBuffer[3]=0x2121;
  1587  01FE14  0E21               	movlw	33
  1588  01FE16  6E42               	movwf	setup_AD7147@StageBuffer+7,c
  1589  01FE18  0E21               	movlw	33
  1590  01FE1A  6E41               	movwf	setup_AD7147@StageBuffer+6,c
  1591                           
  1592                           ;AD7147.c: 131: StageBuffer[4]=4000;
  1593  01FE1C  0E0F               	movlw	15
  1594  01FE1E  6E44               	movwf	setup_AD7147@StageBuffer+9,c
  1595  01FE20  0EA0               	movlw	160
  1596  01FE22  6E43               	movwf	setup_AD7147@StageBuffer+8,c
  1597                           
  1598                           ;AD7147.c: 132: StageBuffer[5]=4000;
  1599  01FE24  0E0F               	movlw	15
  1600  01FE26  6E46               	movwf	setup_AD7147@StageBuffer+11,c
  1601  01FE28  0EA0               	movlw	160
  1602  01FE2A  6E45               	movwf	setup_AD7147@StageBuffer+10,c
  1603                           
  1604                           ;AD7147.c: 133: StageBuffer[6]=4250;
  1605  01FE2C  0E10               	movlw	16
  1606  01FE2E  6E48               	movwf	setup_AD7147@StageBuffer+13,c
  1607  01FE30  0E9A               	movlw	154
  1608  01FE32  6E47               	movwf	setup_AD7147@StageBuffer+12,c
  1609                           
  1610                           ;AD7147.c: 134: StageBuffer[7]=4250;
  1611  01FE34  0E10               	movlw	16
  1612  01FE36  6E4A               	movwf	setup_AD7147@StageBuffer+15,c
  1613  01FE38  0E9A               	movlw	154
  1614  01FE3A  6E49               	movwf	setup_AD7147@StageBuffer+14,c
  1615                           
  1616                           ;AD7147.c: 135: write_AD7147(0xC0, 8, StageBuffer);
  1617  01FE3C  0E00               	movlw	0
  1618  01FE3E  6E30               	movwf	write_AD7147@RegisterAddress+1,c
  1619  01FE40  0EC0               	movlw	192
  1620  01FE42  6E2F               	movwf	write_AD7147@RegisterAddress,c
  1621  01FE44  0E00               	movlw	0
  1622  01FE46  6E32               	movwf	write_AD7147@NumberOfRegisters+1,c
  1623  01FE48  0E08               	movlw	8
  1624  01FE4A  6E31               	movwf	write_AD7147@NumberOfRegisters,c
  1625  01FE4C  0E3B               	movlw	low setup_AD7147@StageBuffer
  1626  01FE4E  6E33               	movwf	write_AD7147@DataBuffer,c
  1627  01FE50  0E00               	movlw	high setup_AD7147@StageBuffer
  1628  01FE52  6E34               	movwf	write_AD7147@DataBuffer+1,c
  1629  01FE54  ECAF  F0FC         	call	_write_AD7147	;wreg free
  1630                           
  1631                           ;AD7147.c: 140: StageBuffer[0]=0x3FFF;
  1632  01FE58  0E3F               	movlw	63
  1633  01FE5A  6E3C               	movwf	setup_AD7147@StageBuffer+1,c
  1634  01FE5C  683B               	setf	setup_AD7147@StageBuffer,c
  1635                           
  1636                           ;AD7147.c: 141: StageBuffer[1]=0x1FEF;
  1637  01FE5E  0E1F               	movlw	31
  1638  01FE60  6E3E               	movwf	setup_AD7147@StageBuffer+3,c
  1639  01FE62  0EEF               	movlw	239
  1640  01FE64  6E3D               	movwf	setup_AD7147@StageBuffer+2,c
  1641                           
  1642                           ;AD7147.c: 142: StageBuffer[2]=0x0100;
  1643  01FE66  0E01               	movlw	1
  1644  01FE68  6E40               	movwf	setup_AD7147@StageBuffer+5,c
  1645  01FE6A  0E00               	movlw	0
  1646  01FE6C  6E3F               	movwf	setup_AD7147@StageBuffer+4,c
  1647                           
  1648                           ;AD7147.c: 143: StageBuffer[3]=0x2121;
  1649  01FE6E  0E21               	movlw	33
  1650  01FE70  6E42               	movwf	setup_AD7147@StageBuffer+7,c
  1651  01FE72  0E21               	movlw	33
  1652  01FE74  6E41               	movwf	setup_AD7147@StageBuffer+6,c
  1653                           
  1654                           ;AD7147.c: 144: StageBuffer[4]=4000;
  1655  01FE76  0E0F               	movlw	15
  1656  01FE78  6E44               	movwf	setup_AD7147@StageBuffer+9,c
  1657  01FE7A  0EA0               	movlw	160
  1658  01FE7C  6E43               	movwf	setup_AD7147@StageBuffer+8,c
  1659                           
  1660                           ;AD7147.c: 145: StageBuffer[5]=4000;
  1661  01FE7E  0E0F               	movlw	15
  1662  01FE80  6E46               	movwf	setup_AD7147@StageBuffer+11,c
  1663  01FE82  0EA0               	movlw	160
  1664  01FE84  6E45               	movwf	setup_AD7147@StageBuffer+10,c
  1665                           
  1666                           ;AD7147.c: 146: StageBuffer[6]=4250;
  1667  01FE86  0E10               	movlw	16
  1668  01FE88  6E48               	movwf	setup_AD7147@StageBuffer+13,c
  1669  01FE8A  0E9A               	movlw	154
  1670  01FE8C  6E47               	movwf	setup_AD7147@StageBuffer+12,c
  1671                           
  1672                           ;AD7147.c: 147: StageBuffer[7]=4250;
  1673  01FE8E  0E10               	movlw	16
  1674  01FE90  6E4A               	movwf	setup_AD7147@StageBuffer+15,c
  1675  01FE92  0E9A               	movlw	154
  1676  01FE94  6E49               	movwf	setup_AD7147@StageBuffer+14,c
  1677                           
  1678                           ;AD7147.c: 148: write_AD7147(0xC8, 8, StageBuffer);
  1679  01FE96  0E00               	movlw	0
  1680  01FE98  6E30               	movwf	write_AD7147@RegisterAddress+1,c
  1681  01FE9A  0EC8               	movlw	200
  1682  01FE9C  6E2F               	movwf	write_AD7147@RegisterAddress,c
  1683  01FE9E  0E00               	movlw	0
  1684  01FEA0  6E32               	movwf	write_AD7147@NumberOfRegisters+1,c
  1685  01FEA2  0E08               	movlw	8
  1686  01FEA4  6E31               	movwf	write_AD7147@NumberOfRegisters,c
  1687  01FEA6  0E3B               	movlw	low setup_AD7147@StageBuffer
  1688  01FEA8  6E33               	movwf	write_AD7147@DataBuffer,c
  1689  01FEAA  0E00               	movlw	high setup_AD7147@StageBuffer
  1690  01FEAC  6E34               	movwf	write_AD7147@DataBuffer+1,c
  1691  01FEAE  ECAF  F0FC         	call	_write_AD7147	;wreg free
  1692                           
  1693                           ;AD7147.c: 153: StageBuffer[0]=0x3FFF;
  1694  01FEB2  0E3F               	movlw	63
  1695  01FEB4  6E3C               	movwf	setup_AD7147@StageBuffer+1,c
  1696  01FEB6  683B               	setf	setup_AD7147@StageBuffer,c
  1697                           
  1698                           ;AD7147.c: 154: StageBuffer[1]=0x1FBF;
  1699  01FEB8  0E1F               	movlw	31
  1700  01FEBA  6E3E               	movwf	setup_AD7147@StageBuffer+3,c
  1701  01FEBC  0EBF               	movlw	191
  1702  01FEBE  6E3D               	movwf	setup_AD7147@StageBuffer+2,c
  1703                           
  1704                           ;AD7147.c: 155: StageBuffer[2]=0x0100;
  1705  01FEC0  0E01               	movlw	1
  1706  01FEC2  6E40               	movwf	setup_AD7147@StageBuffer+5,c
  1707  01FEC4  0E00               	movlw	0
  1708  01FEC6  6E3F               	movwf	setup_AD7147@StageBuffer+4,c
  1709                           
  1710                           ;AD7147.c: 156: StageBuffer[3]=0x2121;
  1711  01FEC8  0E21               	movlw	33
  1712  01FECA  6E42               	movwf	setup_AD7147@StageBuffer+7,c
  1713  01FECC  0E21               	movlw	33
  1714  01FECE  6E41               	movwf	setup_AD7147@StageBuffer+6,c
  1715                           
  1716                           ;AD7147.c: 157: StageBuffer[4]=4000;
  1717  01FED0  0E0F               	movlw	15
  1718  01FED2  6E44               	movwf	setup_AD7147@StageBuffer+9,c
  1719  01FED4  0EA0               	movlw	160
  1720  01FED6  6E43               	movwf	setup_AD7147@StageBuffer+8,c
  1721                           
  1722                           ;AD7147.c: 158: StageBuffer[5]=4000;
  1723  01FED8  0E0F               	movlw	15
  1724  01FEDA  6E46               	movwf	setup_AD7147@StageBuffer+11,c
  1725  01FEDC  0EA0               	movlw	160
  1726  01FEDE  6E45               	movwf	setup_AD7147@StageBuffer+10,c
  1727                           
  1728                           ;AD7147.c: 159: StageBuffer[6]=4250;
  1729  01FEE0  0E10               	movlw	16
  1730  01FEE2  6E48               	movwf	setup_AD7147@StageBuffer+13,c
  1731  01FEE4  0E9A               	movlw	154
  1732  01FEE6  6E47               	movwf	setup_AD7147@StageBuffer+12,c
  1733                           
  1734                           ;AD7147.c: 160: StageBuffer[7]=4250;
  1735  01FEE8  0E10               	movlw	16
  1736  01FEEA  6E4A               	movwf	setup_AD7147@StageBuffer+15,c
  1737  01FEEC  0E9A               	movlw	154
  1738  01FEEE  6E49               	movwf	setup_AD7147@StageBuffer+14,c
  1739                           
  1740                           ;AD7147.c: 161: write_AD7147(0xD0, 8, StageBuffer);
  1741  01FEF0  0E00               	movlw	0
  1742  01FEF2  6E30               	movwf	write_AD7147@RegisterAddress+1,c
  1743  01FEF4  0ED0               	movlw	208
  1744  01FEF6  6E2F               	movwf	write_AD7147@RegisterAddress,c
  1745  01FEF8  0E00               	movlw	0
  1746  01FEFA  6E32               	movwf	write_AD7147@NumberOfRegisters+1,c
  1747  01FEFC  0E08               	movlw	8
  1748  01FEFE  6E31               	movwf	write_AD7147@NumberOfRegisters,c
  1749  01FF00  0E3B               	movlw	low setup_AD7147@StageBuffer
  1750  01FF02  6E33               	movwf	write_AD7147@DataBuffer,c
  1751  01FF04  0E00               	movlw	high setup_AD7147@StageBuffer
  1752  01FF06  6E34               	movwf	write_AD7147@DataBuffer+1,c
  1753  01FF08  ECAF  F0FC         	call	_write_AD7147	;wreg free
  1754                           
  1755                           ;AD7147.c: 166: StageBuffer[0]=0x3FFF;
  1756  01FF0C  0E3F               	movlw	63
  1757  01FF0E  6E3C               	movwf	setup_AD7147@StageBuffer+1,c
  1758  01FF10  683B               	setf	setup_AD7147@StageBuffer,c
  1759                           
  1760                           ;AD7147.c: 167: StageBuffer[1]=0x1EFF;
  1761  01FF12  0E1E               	movlw	30
  1762  01FF14  6E3E               	movwf	setup_AD7147@StageBuffer+3,c
  1763  01FF16  683D               	setf	setup_AD7147@StageBuffer+2,c
  1764                           
  1765                           ;AD7147.c: 168: StageBuffer[2]=0x0100;
  1766  01FF18  0E01               	movlw	1
  1767  01FF1A  6E40               	movwf	setup_AD7147@StageBuffer+5,c
  1768  01FF1C  0E00               	movlw	0
  1769  01FF1E  6E3F               	movwf	setup_AD7147@StageBuffer+4,c
  1770                           
  1771                           ;AD7147.c: 169: StageBuffer[3]=0x2121;
  1772  01FF20  0E21               	movlw	33
  1773  01FF22  6E42               	movwf	setup_AD7147@StageBuffer+7,c
  1774  01FF24  0E21               	movlw	33
  1775  01FF26  6E41               	movwf	setup_AD7147@StageBuffer+6,c
  1776                           
  1777                           ;AD7147.c: 170: StageBuffer[4]=4000;
  1778  01FF28  0E0F               	movlw	15
  1779  01FF2A  6E44               	movwf	setup_AD7147@StageBuffer+9,c
  1780  01FF2C  0EA0               	movlw	160
  1781  01FF2E  6E43               	movwf	setup_AD7147@StageBuffer+8,c
  1782                           
  1783                           ;AD7147.c: 171: StageBuffer[5]=4000;
  1784  01FF30  0E0F               	movlw	15
  1785  01FF32  6E46               	movwf	setup_AD7147@StageBuffer+11,c
  1786  01FF34  0EA0               	movlw	160
  1787  01FF36  6E45               	movwf	setup_AD7147@StageBuffer+10,c
  1788                           
  1789                           ;AD7147.c: 172: StageBuffer[6]=4250;
  1790  01FF38  0E10               	movlw	16
  1791  01FF3A  6E48               	movwf	setup_AD7147@StageBuffer+13,c
  1792  01FF3C  0E9A               	movlw	154
  1793  01FF3E  6E47               	movwf	setup_AD7147@StageBuffer+12,c
  1794                           
  1795                           ;AD7147.c: 173: StageBuffer[7]=4250;
  1796  01FF40  0E10               	movlw	16
  1797  01FF42  6E4A               	movwf	setup_AD7147@StageBuffer+15,c
  1798  01FF44  0E9A               	movlw	154
  1799  01FF46  6E49               	movwf	setup_AD7147@StageBuffer+14,c
  1800                           
  1801                           ;AD7147.c: 174: write_AD7147(0xD8, 8, StageBuffer);
  1802  01FF48  0E00               	movlw	0
  1803  01FF4A  6E30               	movwf	write_AD7147@RegisterAddress+1,c
  1804  01FF4C  0ED8               	movlw	216
  1805  01FF4E  6E2F               	movwf	write_AD7147@RegisterAddress,c
  1806  01FF50  0E00               	movlw	0
  1807  01FF52  6E32               	movwf	write_AD7147@NumberOfRegisters+1,c
  1808  01FF54  0E08               	movlw	8
  1809  01FF56  6E31               	movwf	write_AD7147@NumberOfRegisters,c
  1810  01FF58  0E3B               	movlw	low setup_AD7147@StageBuffer
  1811  01FF5A  6E33               	movwf	write_AD7147@DataBuffer,c
  1812  01FF5C  0E00               	movlw	high setup_AD7147@StageBuffer
  1813  01FF5E  6E34               	movwf	write_AD7147@DataBuffer+1,c
  1814  01FF60  ECAF  F0FC         	call	_write_AD7147	;wreg free
  1815                           
  1816                           ;AD7147.c: 181: AD7147Registers[0x000] = 0x02B2;
  1817  01FF64  0E02               	movlw	2
  1818  01FF66  6E02               	movwf	_AD7147Registers+1,c
  1819  01FF68  0EB2               	movlw	178
  1820  01FF6A  6E01               	movwf	_AD7147Registers,c
  1821                           
  1822                           ;AD7147.c: 182: write_AD7147(0x000, 1, AD7147Registers[0x000]);
  1823  01FF6C  0E00               	movlw	0
  1824  01FF6E  6E30               	movwf	write_AD7147@RegisterAddress+1,c
  1825  01FF70  0E00               	movlw	0
  1826  01FF72  6E2F               	movwf	write_AD7147@RegisterAddress,c
  1827  01FF74  0E00               	movlw	0
  1828  01FF76  6E32               	movwf	write_AD7147@NumberOfRegisters+1,c
  1829  01FF78  0E01               	movlw	1
  1830  01FF7A  6E31               	movwf	write_AD7147@NumberOfRegisters,c
  1831  01FF7C  C001  F033         	movff	_AD7147Registers,write_AD7147@DataBuffer
  1832  01FF80  C002  F034         	movff	_AD7147Registers+1,write_AD7147@DataBuffer+1
  1833  01FF84  ECAF  F0FC         	call	_write_AD7147	;wreg free
  1834                           
  1835                           ;AD7147.c: 187: AD7147Registers[0x002] = 0x3230;
  1836  01FF88  0E32               	movlw	50
  1837  01FF8A  6E06               	movwf	_AD7147Registers+5,c
  1838  01FF8C  0E30               	movlw	48
  1839  01FF8E  6E05               	movwf	_AD7147Registers+4,c
  1840                           
  1841                           ;AD7147.c: 188: AD7147Registers[0x003] = 0x0419;
  1842  01FF90  0E04               	movlw	4
  1843  01FF92  6E08               	movwf	_AD7147Registers+7,c
  1844  01FF94  0E19               	movlw	25
  1845  01FF96  6E07               	movwf	_AD7147Registers+6,c
  1846                           
  1847                           ;AD7147.c: 189: AD7147Registers[0x004] = 0x0832;
  1848  01FF98  0E08               	movlw	8
  1849  01FF9A  6E0A               	movwf	_AD7147Registers+9,c
  1850  01FF9C  0E32               	movlw	50
  1851  01FF9E  6E09               	movwf	_AD7147Registers+8,c
  1852                           
  1853                           ;AD7147.c: 191: AD7147Registers[0x005] = 0x0000;
  1854  01FFA0  0E00               	movlw	0
  1855  01FFA2  6E0C               	movwf	_AD7147Registers+11,c
  1856  01FFA4  0E00               	movlw	0
  1857  01FFA6  6E0B               	movwf	_AD7147Registers+10,c
  1858                           
  1859                           ;AD7147.c: 192: AD7147Registers[0x006] = 0x0000;
  1860  01FFA8  0E00               	movlw	0
  1861  01FFAA  6E0E               	movwf	_AD7147Registers+13,c
  1862  01FFAC  0E00               	movlw	0
  1863  01FFAE  6E0D               	movwf	_AD7147Registers+12,c
  1864                           
  1865                           ;AD7147.c: 193: AD7147Registers[0x007] = 0x0001;
  1866  01FFB0  0E00               	movlw	0
  1867  01FFB2  6E10               	movwf	_AD7147Registers+15,c
  1868  01FFB4  0E01               	movlw	1
  1869  01FFB6  6E0F               	movwf	_AD7147Registers+14,c
  1870                           
  1871                           ;AD7147.c: 194: write_AD7147(0x002, 6, AD7147Registers);
  1872  01FFB8  0E00               	movlw	0
  1873  01FFBA  6E30               	movwf	write_AD7147@RegisterAddress+1,c
  1874  01FFBC  0E02               	movlw	2
  1875  01FFBE  6E2F               	movwf	write_AD7147@RegisterAddress,c
  1876  01FFC0  0E00               	movlw	0
  1877  01FFC2  6E32               	movwf	write_AD7147@NumberOfRegisters+1,c
  1878  01FFC4  0E06               	movlw	6
  1879  01FFC6  6E31               	movwf	write_AD7147@NumberOfRegisters,c
  1880  01FFC8  0E01               	movlw	low _AD7147Registers
  1881  01FFCA  6E33               	movwf	write_AD7147@DataBuffer,c
  1882  01FFCC  0E00               	movlw	high _AD7147Registers
  1883  01FFCE  6E34               	movwf	write_AD7147@DataBuffer+1,c
  1884  01FFD0  ECAF  F0FC         	call	_write_AD7147	;wreg free
  1885                           
  1886                           ;AD7147.c: 197: AD7147Registers[0x001] = 0x0FFF;
  1887  01FFD4  0E0F               	movlw	15
  1888  01FFD6  6E04               	movwf	_AD7147Registers+3,c
  1889  01FFD8  6803               	setf	_AD7147Registers+2,c
  1890                           
  1891                           ;AD7147.c: 198: write_AD7147(0x001, 1, AD7147Registers);
  1892  01FFDA  0E00               	movlw	0
  1893  01FFDC  6E30               	movwf	write_AD7147@RegisterAddress+1,c
  1894  01FFDE  0E01               	movlw	1
  1895  01FFE0  6E2F               	movwf	write_AD7147@RegisterAddress,c
  1896  01FFE2  0E00               	movlw	0
  1897  01FFE4  6E32               	movwf	write_AD7147@NumberOfRegisters+1,c
  1898  01FFE6  0E01               	movlw	1
  1899  01FFE8  6E31               	movwf	write_AD7147@NumberOfRegisters,c
  1900  01FFEA  0E01               	movlw	low _AD7147Registers
  1901  01FFEC  6E33               	movwf	write_AD7147@DataBuffer,c
  1902  01FFEE  0E00               	movlw	high _AD7147Registers
  1903  01FFF0  6E34               	movwf	write_AD7147@DataBuffer+1,c
  1904  01FFF2  ECAF  F0FC         	call	_write_AD7147	;wreg free
  1905  01FFF6  0012               	return		;funcret
  1906  01FFF8                     __end_of_setup_AD7147:
  1907                           	opt stack 0
  1908                           tblptru	equ	0xFF8
  1909                           tblptrh	equ	0xFF7
  1910                           tblptrl	equ	0xFF6
  1911                           tablat	equ	0xFF5
  1912                           postinc0	equ	0xFEE
  1913                           wreg	equ	0xFE8
  1914                           postdec1	equ	0xFE5
  1915                           fsr1l	equ	0xFE1
  1916                           status	equ	0xFD8
  1917                           
  1918 ;; *************** function _write_AD7147 *****************
  1919 ;; Defined at:
  1920 ;;		line 204 in file "AD7147.c"
  1921 ;; Parameters:    Size  Location     Type
  1922 ;;  RegisterAddr    2    0[COMRAM] const unsigned int 
  1923 ;;  NumberOfRegi    2    2[COMRAM] unsigned int 
  1924 ;;  DataBuffer      2    4[COMRAM] PTR unsigned int 
  1925 ;;		 -> RAM(3935), AD7147Registers(46), setup_AD7147@StageBuffer(16), 
  1926 ;; Auto vars:     Size  Location     Type
  1927 ;;  i               2   10[COMRAM] int 
  1928 ;;  enable_word     2    8[COMRAM] unsigned int 
  1929 ;;  Register_Val    0    8[COMRAM] unsigned int [0]
  1930 ;; Return value:  Size  Location     Type
  1931 ;;                  1    wreg      void 
  1932 ;; Registers used:
  1933 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1934 ;; Tracked objects:
  1935 ;;		On entry : 0/0
  1936 ;;		On exit  : 0/0
  1937 ;;		Unchanged: 0/0
  1938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1939 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1940 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1941 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1942 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1943 ;;Total ram usage:       12 bytes
  1944 ;; Hardware stack levels used:    1
  1945 ;; This function calls:
  1946 ;;		Nothing
  1947 ;; This function is called by:
  1948 ;;		_setup_AD7147
  1949 ;; This function uses a non-reentrant model
  1950 ;;
  1951                           
  1952                           	psect	text10
  1953  01F95E                     __ptext10:
  1954                           	opt stack 0
  1955  01F95E                     _write_AD7147:
  1956                           	opt stack 29
  1957                           
  1958                           ;AD7147.c: 206: unsigned int Register_Values[];
  1959                           ;AD7147.c: 207: unsigned int enable_word = 0xE000;
  1960                           
  1961                           ;incstack = 0
  1962  01F95E  0EE0               	movlw	224
  1963  01F960  6E38               	movwf	write_AD7147@enable_word+1,c
  1964  01F962  0E00               	movlw	0
  1965  01F964  6E37               	movwf	write_AD7147@enable_word,c
  1966                           
  1967                           ;AD7147.c: 210: for (int i=0; i<NumberOfRegisters; i++)
  1968  01F966  0E00               	movlw	0
  1969  01F968  6E3A               	movwf	write_AD7147@i+1,c
  1970  01F96A  0E00               	movlw	0
  1971  01F96C  6E39               	movwf	write_AD7147@i,c
  1972  01F96E  D019               	goto	l1293
  1973  01F970                     l1289:
  1974                           
  1975                           ;AD7147.c: 211: {
  1976                           ;AD7147.c: 213: Register_Values[i] = enable_word + (RegisterAddress+i);
  1977  01F970  502F               	movf	write_AD7147@RegisterAddress,w,c
  1978  01F972  2439               	addwf	write_AD7147@i,w,c
  1979  01F974  6E35               	movwf	??_write_AD7147& (0+255),c
  1980  01F976  5030               	movf	write_AD7147@RegisterAddress+1,w,c
  1981  01F978  203A               	addwfc	write_AD7147@i+1,w,c
  1982  01F97A  6E36               	movwf	(??_write_AD7147+1)& (0+255),c
  1983  01F97C  5037               	movf	write_AD7147@enable_word,w,c
  1984  01F97E  2635               	addwf	??_write_AD7147,f,c
  1985  01F980  5038               	movf	write_AD7147@enable_word+1,w,c
  1986  01F982  2236               	addwfc	??_write_AD7147+1,f,c
  1987  01F984  90D8               	bcf	status,0,c
  1988  01F986  3439               	rlcf	write_AD7147@i,w,c
  1989  01F988  6ED9               	movwf	fsr2l,c
  1990  01F98A  343A               	rlcf	write_AD7147@i+1,w,c
  1991  01F98C  6EDA               	movwf	fsr2h,c
  1992  01F98E  0E37               	movlw	low write_AD7147@Register_Values
  1993  01F990  26D9               	addwf	fsr2l,f,c
  1994  01F992  0E00               	movlw	high write_AD7147@Register_Values
  1995  01F994  22DA               	addwfc	fsr2h,f,c
  1996  01F996  C035  FFDE         	movff	??_write_AD7147,postinc2
  1997  01F99A  C036  FFDD         	movff	??_write_AD7147+1,postdec2
  1998  01F99E  4A39               	infsnz	write_AD7147@i,f,c
  1999  01F9A0  2A3A               	incf	write_AD7147@i+1,f,c
  2000  01F9A2                     l1293:
  2001  01F9A2  5031               	movf	write_AD7147@NumberOfRegisters,w,c
  2002  01F9A4  5C39               	subwf	write_AD7147@i,w,c
  2003  01F9A6  5032               	movf	write_AD7147@NumberOfRegisters+1,w,c
  2004  01F9A8  583A               	subwfb	write_AD7147@i+1,w,c
  2005  01F9AA  B0D8               	btfsc	status,0,c
  2006  01F9AC  0012               	return	
  2007  01F9AE  D7E0               	goto	l1289
  2008  01F9B0                     __end_of_write_AD7147:
  2009                           	opt stack 0
  2010                           tblptru	equ	0xFF8
  2011                           tblptrh	equ	0xFF7
  2012                           tblptrl	equ	0xFF6
  2013                           tablat	equ	0xFF5
  2014                           postinc0	equ	0xFEE
  2015                           wreg	equ	0xFE8
  2016                           postdec1	equ	0xFE5
  2017                           fsr1l	equ	0xFE1
  2018                           postinc2	equ	0xFDE
  2019                           postdec2	equ	0xFDD
  2020                           fsr2h	equ	0xFDA
  2021                           fsr2l	equ	0xFD9
  2022                           status	equ	0xFD8
  2023                           
  2024 ;; *************** function _read_sensor *****************
  2025 ;; Defined at:
  2026 ;;		line 237 in file "AD7147.c"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;  sensor          2   22[COMRAM] int 
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;  sensor_value    2   26[COMRAM] unsigned int 
  2031 ;;  register1       2   24[COMRAM] unsigned int 
  2032 ;; Return value:  Size  Location     Type
  2033 ;;                  2   22[COMRAM] unsigned int 
  2034 ;; Registers used:
  2035 ;;		wreg, status,2, status,0, cstack
  2036 ;; Tracked objects:
  2037 ;;		On entry : 0/0
  2038 ;;		On exit  : 0/0
  2039 ;;		Unchanged: 0/0
  2040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2041 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2042 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2044 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2045 ;;Total ram usage:        6 bytes
  2046 ;; Hardware stack levels used:    1
  2047 ;; Hardware stack levels required when called:    1
  2048 ;; This function calls:
  2049 ;;		_w16_r16_spi
  2050 ;; This function is called by:
  2051 ;;		_main
  2052 ;; This function uses a non-reentrant model
  2053 ;;
  2054                           
  2055                           	psect	text11
  2056  01F88A                     __ptext11:
  2057                           	opt stack 0
  2058  01F88A                     _read_sensor:
  2059                           	opt stack 29
  2060                           
  2061                           ;AD7147.c: 240: unsigned int register1 = 0x00B;
  2062                           
  2063                           ;incstack = 0
  2064  01F88A  0E00               	movlw	0
  2065  01F88C  6E48               	movwf	read_sensor@register1+1,c
  2066  01F88E  0E0B               	movlw	11
  2067  01F890  6E47               	movwf	read_sensor@register1,c
  2068                           
  2069                           ;AD7147.c: 241: unsigned int sensor_value = w16_r16_spi(register1);
  2070  01F892  C047  F02F         	movff	read_sensor@register1,w16_r16_spi@address
  2071  01F896  C048  F030         	movff	read_sensor@register1+1,w16_r16_spi@address+1
  2072  01F89A  EC17  F0FD         	call	_w16_r16_spi	;wreg free
  2073  01F89E  C02F  F049         	movff	?_w16_r16_spi,read_sensor@sensor_value
  2074  01F8A2  C030  F04A         	movff	?_w16_r16_spi+1,read_sensor@sensor_value+1
  2075                           
  2076                           ;AD7147.c: 248: return sensor_value;
  2077  01F8A6  C049  F045         	movff	read_sensor@sensor_value,?_read_sensor
  2078  01F8AA  C04A  F046         	movff	read_sensor@sensor_value+1,?_read_sensor+1
  2079  01F8AE  0012               	return	
  2080  01F8B0                     __end_of_read_sensor:
  2081                           	opt stack 0
  2082                           tblptru	equ	0xFF8
  2083                           tblptrh	equ	0xFF7
  2084                           tblptrl	equ	0xFF6
  2085                           tablat	equ	0xFF5
  2086                           postinc0	equ	0xFEE
  2087                           wreg	equ	0xFE8
  2088                           postdec1	equ	0xFE5
  2089                           fsr1l	equ	0xFE1
  2090                           postinc2	equ	0xFDE
  2091                           postdec2	equ	0xFDD
  2092                           fsr2h	equ	0xFDA
  2093                           fsr2l	equ	0xFD9
  2094                           status	equ	0xFD8
  2095                           
  2096 ;; *************** function _get_ID *****************
  2097 ;; Defined at:
  2098 ;;		line 303 in file "AD7147.c"
  2099 ;; Parameters:    Size  Location     Type
  2100 ;;		None
  2101 ;; Auto vars:     Size  Location     Type
  2102 ;;  result          2   25[COMRAM] unsigned int 
  2103 ;; Return value:  Size  Location     Type
  2104 ;;                  2   22[COMRAM] unsigned int 
  2105 ;; Registers used:
  2106 ;;		wreg, status,2, status,0, cstack
  2107 ;; Tracked objects:
  2108 ;;		On entry : 0/0
  2109 ;;		On exit  : 0/0
  2110 ;;		Unchanged: 0/0
  2111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2112 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2113 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2114 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2115 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2116 ;;Total ram usage:        5 bytes
  2117 ;; Hardware stack levels used:    1
  2118 ;; Hardware stack levels required when called:    1
  2119 ;; This function calls:
  2120 ;;		_w16_r16_spi
  2121 ;; This function is called by:
  2122 ;;		_main
  2123 ;; This function uses a non-reentrant model
  2124 ;;
  2125                           
  2126                           	psect	text12
  2127  01F8B0                     __ptext12:
  2128                           	opt stack 0
  2129  01F8B0                     _get_ID:
  2130                           	opt stack 29
  2131                           
  2132                           ;AD7147.c: 305: unsigned int result = (w16_r16_spi(0xE400 + 0x017) & 0b1111111111110000)
      +                           >> 4;
  2133                           
  2134                           ;incstack = 0
  2135  01F8B0  0EE4               	movlw	228
  2136  01F8B2  6E30               	movwf	w16_r16_spi@address+1,c
  2137  01F8B4  0E17               	movlw	23
  2138  01F8B6  6E2F               	movwf	w16_r16_spi@address,c
  2139  01F8B8  EC17  F0FD         	call	_w16_r16_spi	;wreg free
  2140  01F8BC  0E04               	movlw	4
  2141  01F8BE  6E47               	movwf	??_get_ID& (0+255),c
  2142  01F8C0                     u525:
  2143  01F8C0  90D8               	bcf	status,0,c
  2144  01F8C2  3230               	rrcf	?_w16_r16_spi+1,f,c
  2145  01F8C4  322F               	rrcf	?_w16_r16_spi,f,c
  2146  01F8C6  2E47               	decfsz	??_get_ID& (0+255),f,c
  2147  01F8C8  D7FB               	goto	u525
  2148  01F8CA  0EFF               	movlw	255
  2149  01F8CC  142F               	andwf	?_w16_r16_spi,w,c
  2150  01F8CE  6E48               	movwf	get_ID@result,c
  2151  01F8D0  0E0F               	movlw	15
  2152  01F8D2  1430               	andwf	?_w16_r16_spi+1,w,c
  2153  01F8D4  6E49               	movwf	get_ID@result+1,c
  2154                           
  2155                           ;AD7147.c: 306: return result;
  2156  01F8D6  C048  F045         	movff	get_ID@result,?_get_ID
  2157  01F8DA  C049  F046         	movff	get_ID@result+1,?_get_ID+1
  2158  01F8DE  0012               	return	
  2159  01F8E0                     __end_of_get_ID:
  2160                           	opt stack 0
  2161                           tblptru	equ	0xFF8
  2162                           tblptrh	equ	0xFF7
  2163                           tblptrl	equ	0xFF6
  2164                           tablat	equ	0xFF5
  2165                           postinc0	equ	0xFEE
  2166                           wreg	equ	0xFE8
  2167                           postdec1	equ	0xFE5
  2168                           fsr1l	equ	0xFE1
  2169                           postinc2	equ	0xFDE
  2170                           postdec2	equ	0xFDD
  2171                           fsr2h	equ	0xFDA
  2172                           fsr2l	equ	0xFD9
  2173                           status	equ	0xFD8
  2174                           
  2175 ;; *************** function _w16_r16_spi *****************
  2176 ;; Defined at:
  2177 ;;		line 96 in file "spi.c"
  2178 ;; Parameters:    Size  Location     Type
  2179 ;;  address         2    0[COMRAM] unsigned int 
  2180 ;; Auto vars:     Size  Location     Type
  2181 ;;  p4              2   20[COMRAM] unsigned int 
  2182 ;;  p3              2   18[COMRAM] unsigned int 
  2183 ;;  blank_high      2   16[COMRAM] unsigned int 
  2184 ;;  blank_low       2   14[COMRAM] unsigned int 
  2185 ;;  result          2   12[COMRAM] unsigned int 
  2186 ;;  address_high    2   10[COMRAM] unsigned int 
  2187 ;;  address_low     2    8[COMRAM] unsigned int 
  2188 ;;  p2              2    6[COMRAM] unsigned int 
  2189 ;;  p1              2    4[COMRAM] unsigned int 
  2190 ;; Return value:  Size  Location     Type
  2191 ;;                  2    0[COMRAM] unsigned int 
  2192 ;; Registers used:
  2193 ;;		wreg, status,2, status,0
  2194 ;; Tracked objects:
  2195 ;;		On entry : 0/0
  2196 ;;		On exit  : 0/0
  2197 ;;		Unchanged: 0/0
  2198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2199 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2200 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2201 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2202 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2203 ;;Total ram usage:       22 bytes
  2204 ;; Hardware stack levels used:    1
  2205 ;; This function calls:
  2206 ;;		Nothing
  2207 ;; This function is called by:
  2208 ;;		_read_sensor
  2209 ;;		_get_ID
  2210 ;; This function uses a non-reentrant model
  2211 ;;
  2212                           
  2213                           	psect	text13
  2214  01FA2E                     __ptext13:
  2215                           	opt stack 0
  2216  01FA2E                     _w16_r16_spi:
  2217                           	opt stack 29
  2218                           
  2219                           ;spi.c: 98: unsigned int address_low, address_high, result;
  2220                           ;spi.c: 99: unsigned int blank_low = 0x000;
  2221                           
  2222                           ;incstack = 0
  2223  01FA2E  0E00               	movlw	0
  2224  01FA30  6E3E               	movwf	w16_r16_spi@blank_low+1,c
  2225  01FA32  0E00               	movlw	0
  2226  01FA34  6E3D               	movwf	w16_r16_spi@blank_low,c
  2227                           
  2228                           ;spi.c: 100: unsigned int blank_high = 0x000;
  2229  01FA36  0E00               	movlw	0
  2230  01FA38  6E40               	movwf	w16_r16_spi@blank_high+1,c
  2231  01FA3A  0E00               	movlw	0
  2232  01FA3C  6E3F               	movwf	w16_r16_spi@blank_high,c
  2233                           
  2234                           ;spi.c: 101: unsigned int p1, p2, p3, p4;
  2235                           ;spi.c: 103: address_low = address & 0xFF;
  2236  01FA3E  502F               	movf	w16_r16_spi@address,w,c
  2237  01FA40  6E37               	movwf	w16_r16_spi@address_low,c
  2238  01FA42  6A38               	clrf	w16_r16_spi@address_low+1,c
  2239                           
  2240                           ;spi.c: 104: address_high = (address >> 8) & 0xFF;
  2241  01FA44  C02F  F031         	movff	w16_r16_spi@address,??_w16_r16_spi
  2242  01FA48  C030  F032         	movff	w16_r16_spi@address+1,??_w16_r16_spi+1
  2243  01FA4C  C032  F031         	movff	??_w16_r16_spi+1,??_w16_r16_spi
  2244  01FA50  6A32               	clrf	??_w16_r16_spi+1,c
  2245  01FA52  5031               	movf	??_w16_r16_spi,w,c
  2246  01FA54  6E39               	movwf	w16_r16_spi@address_high,c
  2247  01FA56  6A3A               	clrf	w16_r16_spi@address_high+1,c
  2248                           
  2249                           ;spi.c: 107: PORTCbits.RC2 = 0;
  2250  01FA58  9482               	bcf	3970,2,c	;volatile
  2251                           
  2252                           ;spi.c: 110: SSP1BUF = address_high;
  2253  01FA5A  C039  FFC9         	movff	w16_r16_spi@address_high,4041	;volatile
  2254  01FA5E                     l197:
  2255  01FA5E  A0C7               	btfss	4039,0,c	;volatile
  2256  01FA60  D7FE               	goto	l197
  2257                           
  2258                           ;spi.c: 112: p1 = SSP1BUF;
  2259  01FA62  CFC9 F033          	movff	4041,w16_r16_spi@p1	;volatile
  2260  01FA66  6A34               	clrf	w16_r16_spi@p1+1,c
  2261                           
  2262                           ;spi.c: 114: SSP1BUF = address_low;
  2263  01FA68  C037  FFC9         	movff	w16_r16_spi@address_low,4041	;volatile
  2264  01FA6C                     l200:
  2265  01FA6C  A0C7               	btfss	4039,0,c	;volatile
  2266  01FA6E  D7FE               	goto	l200
  2267                           
  2268                           ;spi.c: 116: p2 = SSP1BUF;
  2269  01FA70  CFC9 F035          	movff	4041,w16_r16_spi@p2	;volatile
  2270  01FA74  6A36               	clrf	w16_r16_spi@p2+1,c
  2271                           
  2272                           ;spi.c: 118: SSP1BUF = blank_high;
  2273  01FA76  C03F  FFC9         	movff	w16_r16_spi@blank_high,4041	;volatile
  2274  01FA7A                     l203:
  2275  01FA7A  A0C7               	btfss	4039,0,c	;volatile
  2276  01FA7C  D7FE               	goto	l203
  2277                           
  2278                           ;spi.c: 120: p3 = SSP1BUF;
  2279  01FA7E  CFC9 F041          	movff	4041,w16_r16_spi@p3	;volatile
  2280  01FA82  6A42               	clrf	w16_r16_spi@p3+1,c
  2281                           
  2282                           ;spi.c: 122: SSP1BUF = blank_low;
  2283  01FA84  C03D  FFC9         	movff	w16_r16_spi@blank_low,4041	;volatile
  2284  01FA88                     l206:
  2285  01FA88  A0C7               	btfss	4039,0,c	;volatile
  2286  01FA8A  D7FE               	goto	l206
  2287                           
  2288                           ;spi.c: 124: p4 = SSP1BUF;
  2289  01FA8C  CFC9 F043          	movff	4041,w16_r16_spi@p4	;volatile
  2290  01FA90  6A44               	clrf	w16_r16_spi@p4+1,c
  2291                           
  2292                           ;spi.c: 126: PORTCbits.RC2 = 1;
  2293  01FA92  8482               	bsf	3970,2,c	;volatile
  2294                           
  2295                           ;spi.c: 128: result = (p3 << 8) + p4;
  2296  01FA94  5041               	movf	w16_r16_spi@p3,w,c
  2297  01FA96  6E32               	movwf	(??_w16_r16_spi+1)& (0+255),c
  2298  01FA98  6A31               	clrf	??_w16_r16_spi& (0+255),c
  2299  01FA9A  5043               	movf	w16_r16_spi@p4,w,c
  2300  01FA9C  2431               	addwf	??_w16_r16_spi,w,c
  2301  01FA9E  6E3B               	movwf	w16_r16_spi@result,c
  2302  01FAA0  5044               	movf	w16_r16_spi@p4+1,w,c
  2303  01FAA2  2032               	addwfc	??_w16_r16_spi+1,w,c
  2304  01FAA4  6E3C               	movwf	w16_r16_spi@result+1,c
  2305                           
  2306                           ;spi.c: 129: return result;
  2307  01FAA6  C03B  F02F         	movff	w16_r16_spi@result,?_w16_r16_spi
  2308  01FAAA  C03C  F030         	movff	w16_r16_spi@result+1,?_w16_r16_spi+1
  2309  01FAAE  0012               	return	
  2310  01FAB0                     __end_of_w16_r16_spi:
  2311                           	opt stack 0
  2312                           tblptru	equ	0xFF8
  2313                           tblptrh	equ	0xFF7
  2314                           tblptrl	equ	0xFF6
  2315                           tablat	equ	0xFF5
  2316                           postinc0	equ	0xFEE
  2317                           wreg	equ	0xFE8
  2318                           postdec1	equ	0xFE5
  2319                           fsr1l	equ	0xFE1
  2320                           postinc2	equ	0xFDE
  2321                           postdec2	equ	0xFDD
  2322                           fsr2h	equ	0xFDA
  2323                           fsr2l	equ	0xFD9
  2324                           status	equ	0xFD8
  2325                           
  2326 ;; *************** function _delay_ms *****************
  2327 ;; Defined at:
  2328 ;;		line 78 in file "micro_setup.c"
  2329 ;; Parameters:    Size  Location     Type
  2330 ;;  n               2    8[COMRAM] int 
  2331 ;; Auto vars:     Size  Location     Type
  2332 ;;  j               2   11[COMRAM] int 
  2333 ;; Return value:  Size  Location     Type
  2334 ;;                  1    wreg      void 
  2335 ;; Registers used:
  2336 ;;		wreg, status,2, status,0, cstack
  2337 ;; Tracked objects:
  2338 ;;		On entry : 0/0
  2339 ;;		On exit  : 0/0
  2340 ;;		Unchanged: 0/0
  2341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2342 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2343 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2344 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2345 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2346 ;;Total ram usage:        5 bytes
  2347 ;; Hardware stack levels used:    1
  2348 ;; Hardware stack levels required when called:    1
  2349 ;; This function calls:
  2350 ;;		___awdiv
  2351 ;; This function is called by:
  2352 ;;		_main
  2353 ;; This function uses a non-reentrant model
  2354 ;;
  2355                           
  2356                           	psect	text14
  2357  01F91E                     __ptext14:
  2358                           	opt stack 0
  2359  01F91E                     _delay_ms:
  2360                           	opt stack 29
  2361                           
  2362                           ;micro_setup.c: 80: int j = n/10;
  2363                           
  2364                           ;incstack = 0
  2365  01F91E  C037  F02F         	movff	delay_ms@n,___awdiv@dividend
  2366  01F922  C038  F030         	movff	delay_ms@n+1,___awdiv@dividend+1
  2367  01F926  0E00               	movlw	0
  2368  01F928  6E32               	movwf	___awdiv@divisor+1,c
  2369  01F92A  0E0A               	movlw	10
  2370  01F92C  6E31               	movwf	___awdiv@divisor,c
  2371  01F92E  EC58  F0FD         	call	___awdiv	;wreg free
  2372  01F932  C02F  F03A         	movff	?___awdiv,delay_ms@j
  2373  01F936  C030  F03B         	movff	?___awdiv+1,delay_ms@j+1
  2374                           
  2375                           ;micro_setup.c: 81: while(j--)
  2376  01F93A  D008               	goto	l1509
  2377  01F93C                     l1507:
  2378                           
  2379                           ;micro_setup.c: 82: {
  2380                           ;micro_setup.c: 83: _delay((unsigned long)((10)*(10000000/4000.0)));
  2381  01F93C  0E21               	movlw	33
  2382  01F93E  6E39               	movwf	??_delay_ms& (0+255),c
  2383  01F940  0E76               	movlw	118
  2384  01F942                     u677:
  2385  01F942  2EE8               	decfsz	wreg,f,c
  2386  01F944  D7FE               	goto	u677
  2387  01F946  2E39               	decfsz	??_delay_ms& (0+255),f,c
  2388  01F948  D7FC               	goto	u677
  2389  01F94A  D000               	nop2	
  2390  01F94C                     l1509:
  2391  01F94C  063A               	decf	delay_ms@j,f,c
  2392  01F94E  A0D8               	btfss	status,0,c
  2393  01F950  063B               	decf	delay_ms@j+1,f,c
  2394  01F952  283A               	incf	delay_ms@j,w,c
  2395  01F954  E1F3               	bnz	l1507
  2396  01F956  283B               	incf	delay_ms@j+1,w,c
  2397  01F958  B4D8               	btfsc	status,2,c
  2398  01F95A  0012               	return	
  2399  01F95C  D7EF               	goto	l1507
  2400  01F95E                     __end_of_delay_ms:
  2401                           	opt stack 0
  2402                           tblptru	equ	0xFF8
  2403                           tblptrh	equ	0xFF7
  2404                           tblptrl	equ	0xFF6
  2405                           tablat	equ	0xFF5
  2406                           postinc0	equ	0xFEE
  2407                           wreg	equ	0xFE8
  2408                           postdec1	equ	0xFE5
  2409                           fsr1l	equ	0xFE1
  2410                           postinc2	equ	0xFDE
  2411                           postdec2	equ	0xFDD
  2412                           fsr2h	equ	0xFDA
  2413                           fsr2l	equ	0xFD9
  2414                           status	equ	0xFD8
  2415                           
  2416 ;; *************** function ___awdiv *****************
  2417 ;; Defined at:
  2418 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  2419 ;; Parameters:    Size  Location     Type
  2420 ;;  dividend        2    0[COMRAM] int 
  2421 ;;  divisor         2    2[COMRAM] int 
  2422 ;; Auto vars:     Size  Location     Type
  2423 ;;  quotient        2    6[COMRAM] int 
  2424 ;;  sign            1    5[COMRAM] unsigned char 
  2425 ;;  counter         1    4[COMRAM] unsigned char 
  2426 ;; Return value:  Size  Location     Type
  2427 ;;                  2    0[COMRAM] int 
  2428 ;; Registers used:
  2429 ;;		wreg, status,2, status,0
  2430 ;; Tracked objects:
  2431 ;;		On entry : 0/0
  2432 ;;		On exit  : 0/0
  2433 ;;		Unchanged: 0/0
  2434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2435 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2436 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2438 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2439 ;;Total ram usage:        8 bytes
  2440 ;; Hardware stack levels used:    1
  2441 ;; This function calls:
  2442 ;;		Nothing
  2443 ;; This function is called by:
  2444 ;;		_delay_ms
  2445 ;; This function uses a non-reentrant model
  2446 ;;
  2447                           
  2448                           	psect	text15
  2449  01FAB0                     __ptext15:
  2450                           	opt stack 0
  2451  01FAB0                     ___awdiv:
  2452                           	opt stack 29
  2453                           
  2454                           ;incstack = 0
  2455  01FAB0  0E00               	movlw	0
  2456  01FAB2  6E34               	movwf	___awdiv@sign,c
  2457  01FAB4  AE32               	btfss	___awdiv@divisor+1,7,c
  2458  01FAB6  D006               	goto	l1315
  2459  01FAB8  6C31               	negf	___awdiv@divisor,c
  2460  01FABA  1E32               	comf	___awdiv@divisor+1,f,c
  2461  01FABC  B0D8               	btfsc	status,0,c
  2462  01FABE  2A32               	incf	___awdiv@divisor+1,f,c
  2463  01FAC0  0E01               	movlw	1
  2464  01FAC2  6E34               	movwf	___awdiv@sign,c
  2465  01FAC4                     l1315:
  2466  01FAC4  AE30               	btfss	___awdiv@dividend+1,7,c
  2467  01FAC6  D006               	goto	l1321
  2468  01FAC8  6C2F               	negf	___awdiv@dividend,c
  2469  01FACA  1E30               	comf	___awdiv@dividend+1,f,c
  2470  01FACC  B0D8               	btfsc	status,0,c
  2471  01FACE  2A30               	incf	___awdiv@dividend+1,f,c
  2472  01FAD0  0E01               	movlw	1
  2473  01FAD2  1A34               	xorwf	___awdiv@sign,f,c
  2474  01FAD4                     l1321:
  2475  01FAD4  0E00               	movlw	0
  2476  01FAD6  6E36               	movwf	___awdiv@quotient+1,c
  2477  01FAD8  0E00               	movlw	0
  2478  01FADA  6E35               	movwf	___awdiv@quotient,c
  2479  01FADC  5031               	movf	___awdiv@divisor,w,c
  2480  01FADE  1032               	iorwf	___awdiv@divisor+1,w,c
  2481  01FAE0  B4D8               	btfsc	status,2,c
  2482  01FAE2  D01C               	goto	l1343
  2483  01FAE4  0E01               	movlw	1
  2484  01FAE6  6E33               	movwf	___awdiv@counter,c
  2485  01FAE8  D004               	goto	l1329
  2486  01FAEA                     l1327:
  2487  01FAEA  90D8               	bcf	status,0,c
  2488  01FAEC  3631               	rlcf	___awdiv@divisor,f,c
  2489  01FAEE  3632               	rlcf	___awdiv@divisor+1,f,c
  2490  01FAF0  2A33               	incf	___awdiv@counter,f,c
  2491  01FAF2                     l1329:
  2492  01FAF2  AE32               	btfss	___awdiv@divisor+1,7,c
  2493  01FAF4  D7FA               	goto	l1327
  2494  01FAF6                     l1331:
  2495  01FAF6  90D8               	bcf	status,0,c
  2496  01FAF8  3635               	rlcf	___awdiv@quotient,f,c
  2497  01FAFA  3636               	rlcf	___awdiv@quotient+1,f,c
  2498  01FAFC  5031               	movf	___awdiv@divisor,w,c
  2499  01FAFE  5C2F               	subwf	___awdiv@dividend,w,c
  2500  01FB00  5032               	movf	___awdiv@divisor+1,w,c
  2501  01FB02  5830               	subwfb	___awdiv@dividend+1,w,c
  2502  01FB04  A0D8               	btfss	status,0,c
  2503  01FB06  D005               	goto	l1339
  2504  01FB08  5031               	movf	___awdiv@divisor,w,c
  2505  01FB0A  5E2F               	subwf	___awdiv@dividend,f,c
  2506  01FB0C  5032               	movf	___awdiv@divisor+1,w,c
  2507  01FB0E  5A30               	subwfb	___awdiv@dividend+1,f,c
  2508  01FB10  8035               	bsf	___awdiv@quotient,0,c
  2509  01FB12                     l1339:
  2510  01FB12  90D8               	bcf	status,0,c
  2511  01FB14  3232               	rrcf	___awdiv@divisor+1,f,c
  2512  01FB16  3231               	rrcf	___awdiv@divisor,f,c
  2513  01FB18  2E33               	decfsz	___awdiv@counter,f,c
  2514  01FB1A  D7ED               	goto	l1331
  2515  01FB1C                     l1343:
  2516  01FB1C  5034               	movf	___awdiv@sign,w,c
  2517  01FB1E  B4D8               	btfsc	status,2,c
  2518  01FB20  D004               	goto	l1347
  2519  01FB22  6C35               	negf	___awdiv@quotient,c
  2520  01FB24  1E36               	comf	___awdiv@quotient+1,f,c
  2521  01FB26  B0D8               	btfsc	status,0,c
  2522  01FB28  2A36               	incf	___awdiv@quotient+1,f,c
  2523  01FB2A                     l1347:
  2524  01FB2A  C035  F02F         	movff	___awdiv@quotient,?___awdiv
  2525  01FB2E  C036  F030         	movff	___awdiv@quotient+1,?___awdiv+1
  2526  01FB32  0012               	return	
  2527  01FB34                     __end_of___awdiv:
  2528                           	opt stack 0
  2529  0000                     tblptru	equ	0xFF8
  2530                           tblptrh	equ	0xFF7
  2531                           tblptrl	equ	0xFF6
  2532                           tablat	equ	0xFF5
  2533                           postinc0	equ	0xFEE
  2534                           wreg	equ	0xFE8
  2535                           postdec1	equ	0xFE5
  2536                           fsr1l	equ	0xFE1
  2537                           postinc2	equ	0xFDE
  2538                           postdec2	equ	0xFDD
  2539                           fsr2h	equ	0xFDA
  2540                           fsr2l	equ	0xFD9
  2541                           status	equ	0xFD8
  2542                           tblptru	equ	0xFF8
  2543                           tblptrh	equ	0xFF7
  2544                           tblptrl	equ	0xFF6
  2545                           tablat	equ	0xFF5
  2546                           postinc0	equ	0xFEE
  2547                           wreg	equ	0xFE8
  2548                           postdec1	equ	0xFE5
  2549                           fsr1l	equ	0xFE1
  2550                           postinc2	equ	0xFDE
  2551                           postdec2	equ	0xFDD
  2552                           fsr2h	equ	0xFDA
  2553                           fsr2l	equ	0xFD9
  2554                           status	equ	0xFD8
  2555                           
  2556                           	psect	rparam
  2557  0000                     tblptru	equ	0xFF8
  2558                           tblptrh	equ	0xFF7
  2559                           tblptrl	equ	0xFF6
  2560                           tablat	equ	0xFF5
  2561                           postinc0	equ	0xFEE
  2562                           wreg	equ	0xFE8
  2563                           postdec1	equ	0xFE5
  2564                           fsr1l	equ	0xFE1
  2565                           postinc2	equ	0xFDE
  2566                           postdec2	equ	0xFDD
  2567                           fsr2h	equ	0xFDA
  2568                           fsr2l	equ	0xFD9
  2569                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        24
    BSS         70
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     34      80
    BANK0           160      0      48
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    write_AD7147@DataBuffer	PTR unsigned int  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), AD7147Registers(COMRAM[46]), setup_AD7147@StageBuffer(COMRAM[16]), 


Critical Paths under _main in COMRAM

    _main->_read_sensor
    _main->_setup_AD7147
    _setup_AD7147->_write_AD7147
    _read_sensor->_w16_r16_spi
    _get_ID->_w16_r16_spi
    _delay_ms->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    7082
                                             28 COMRAM     6     6      0
                           _delay_ms
                             _get_ID
                        _read_sensor
                       _setup_AD7147
                          _setup_mcu
                          _setup_spi
                     _uart_read_char
                    _uart_write_char
            _uart_write_unsigned_int
 ---------------------------------------------------------------------------------
 (1) _uart_write_unsigned_int                              4     2      2     218
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _uart_write_char                                      1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_read_char                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_spi                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_mcu                                            0     0      0       0
                           _init_pin
                          _init_uart
                         _setup_port
 ---------------------------------------------------------------------------------
 (2) _setup_port                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_pin                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_AD7147                                        16    16      0    5331
                                             12 COMRAM    16    16      0
                       _write_AD7147
 ---------------------------------------------------------------------------------
 (2) _write_AD7147                                        12     6      6    3039
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (1) _read_sensor                                          6     4      2     445
                                             22 COMRAM     6     4      2
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (1) _get_ID                                               5     3      2     358
                                             22 COMRAM     5     3      2
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (2) _w16_r16_spi                                         22    20      2     335
                                              0 COMRAM    22    20      2
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             5     3      2     601
                                              8 COMRAM     5     3      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay_ms
     ___awdiv
   _get_ID
     _w16_r16_spi
   _read_sensor
     _w16_r16_spi
   _setup_AD7147
     _write_AD7147
   _setup_mcu
     _init_pin
     _init_uart
     _setup_port
   _setup_spi
   _uart_read_char
   _uart_write_char
   _uart_write_unsigned_int

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      30       5       30.0%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     22      50       1       84.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      80      32        0.0%
DATA                 0      0      80       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Feb 27 15:19:05 2017

                    ___awdiv@sign 0034                      __CFG_CP0$OFF 000000  
                             l200 FA6C                               l203 FA7A  
                             l206 FA88                               l241 F7D8  
                             l253 F85C                               l256 F864  
                             l197 FA5E                               l277 F834  
                             l278 F82A                               u525 F8C0  
                             u677 F942                               wreg 000FE8  
                    __CFG_FOSC$HS 000000       write_AD7147@RegisterAddress 002F  
                            l1321 FAD4                              l1331 FAF6  
                            l1315 FAC4                              l1327 FAEA  
                            l1343 FB1C                              l1329 FAF2  
                            l1347 FB2A                              l1339 FB12  
                            l1507 F93C                              l1509 F94C  
                            l1293 F9A2                              l1289 F970  
                            l1561 F9CC                              l1571 F9F8  
                            l1577 FA20                     __CFG_DEBUG$ON 000000  
                            _RCIF 007CF5                              _TRMT 007D61  
                   __CFG_FCMEN$ON 000000                  ??_uart_read_char 002F  
                            _main F9B0                              fsr2h 000FDA  
                            fsr1l 000FE1       write_AD7147@Register_Values 0037  
                            fsr2l 000FD9  __size_of_uart_write_unsigned_int 001A  
                            start 0000                     ??_w16_r16_spi 0031  
                   __CFG_IESO$OFF 000000                     __CFG_FOSC2$ON 000000  
                    ___param_bank 000010          __size_of_uart_write_char 000C  
                           ?_main 002F                   __end_of___awdiv FB34  
                 ___awdiv@divisor 0031             w16_r16_spi@blank_high 003F  
                 ___awdiv@counter 0033                             _TRISC 000F94  
                           _TRMT2 007B61                             _TRISD 000F95  
                           _TRISE 000F96                             _TRISF 000F97  
                           _TRISG 000F98                             _TXREG 000FAD  
           __size_of_write_AD7147 0052                      ?_read_sensor 0045  
                    main@sensor_1 004D                             tablat 000FF5  
                           status 000FD8            w16_r16_spi@address_low 0037  
                 __initialization F8E0                      __end_of_main FA2E  
             __end_of_w16_r16_spi FAB0                      _write_AD7147 F95E  
                          ??_main 004B                     main@device_ID 004B  
                   __activetblptr 000000                  ___awdiv@dividend 002F  
                   main@indicator 0050                    __CFG_WDTEN$OFF 000000  
                          _RCREG2 000F6E                            _SPBRG2 000F6F  
                          _TXREG2 000F6D                            _TXSTA2 000F6C  
                __end_of_delay_ms F95E                    __CFG_XINST$OFF 000000  
                       ??___awdiv 0033                    __CFG_STVREN$ON 000000  
                          _get_ID F8B0                  __end_of_init_pin F802  
                          clear_0 F906                            clear_1 F912  
                ___awdiv@quotient 0035                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
               ??_uart_write_char 002F           w16_r16_spi@address_high 0039  
         _uart_write_unsigned_int F854                        __accesstop 0060  
         __end_of__initialization F918                     ___rparam_used 000001  
                     _w16_r16_spi FA2E                    __pcstackCOMRAM 002F  
                    __pidataBANK0 F83C                        __pbssBANK0 0060  
            __size_of_read_sensor 0026                __size_of_init_uart 0014  
                         ?_get_ID 0045                __size_of_setup_mcu 000E  
              __size_of_setup_spi 001C                         ?_delay_ms 0037  
                         _SSP1BUF 000FC9                     w16_r16_spi@p1 0033  
                   w16_r16_spi@p2 0035                     w16_r16_spi@p3 0041  
                   w16_r16_spi@p4 0043         ??_uart_write_unsigned_int 0031  
                       ?_init_pin 002F                           __Hparam 0000  
                         __Lparam 0000                           ___awdiv FAB0  
                 __size_of_get_ID 0030                           __pcinit F8E0  
                         __ramtop 1000                           __ptext0 F9B0  
                         __ptext1 F854                           __ptext2 F7D6  
                         __ptext3 F828                           __ptext4 F86E  
                         __ptext5 F7E2                           __ptext6 F802  
                         __ptext7 F814                           __ptext8 F7F0  
                         __ptext9 FB34                 __end_of_init_uart F828  
                      ??_delay_ms 0039                           main@ind 004F  
            end_of_initialization F918                     ?_setup_AD7147 002F  
                      ??_init_pin 002F                 __end_of_setup_mcu F7F0  
               __end_of_setup_spi F88A                           postdec1 000FE5  
                         postdec2 000FDD   __end_of_uart_write_unsigned_int F86E  
                         postinc0 000FEE                           postinc2 000FDE  
         __size_of_uart_read_char 0014                   _uart_write_char F7D6  
                       _PORTCbits 000F82                         _PORTDbits 000F83  
                      _setup_port F802                    ??_setup_AD7147 003B  
                    ?_w16_r16_spi 002F              w16_r16_spi@blank_low 003D  
                  __end_of_get_ID F8E0               start_initialization F8E0  
             uart_write_char@data 002F           __end_of_uart_write_char F7E2  
         setup_AD7147@StageBuffer 003B                          ??_get_ID 0047  
                     __pdataBANK0 0078                       ?_setup_port 002F  
                     __pbssCOMRAM 0001            write_AD7147@DataBuffer 0033  
                   ??_read_sensor 0047                 __size_of_delay_ms 0040  
               __size_of_init_pin 0012                    _uart_read_char F828  
                        ?___awdiv 002F              __end_of_setup_AD7147 FFF8  
                   ?_write_AD7147 002F                          _BAUDCON2 000F7C  
    uart_write_unsigned_int@char1 0031      uart_write_unsigned_int@char2 0032  
                       _init_uart F814                         delay_ms@j 003A  
                       delay_ms@n 0037               __end_of_read_sensor F8B0  
   write_AD7147@NumberOfRegisters 0031                          _PIE1bits 000F9D  
             __size_of_setup_port 0012                  ?_uart_write_char 002F  
          __end_of_uart_read_char F83C                          _PIR3bits 000FA4  
            __size_of_w16_r16_spi 0082                         _setup_mcu F7E2  
                       _setup_spi F86E                    ??_write_AD7147 0035  
        ?_uart_write_unsigned_int 002F                        ?_init_uart 002F  
                       copy_data0 F8F4                   _AD7147Registers 0001  
                      _CDC_RESULT 0060                          __Hrparam 0000  
                 ?_uart_read_char 002F                      get_ID@result 0048  
                        __Lrparam 0000           read_sensor@sensor_value 0049  
                __size_of___awdiv 0084                        ?_setup_mcu 002F  
                      ?_setup_spi 002F                          _delay_ms F91E  
            read_sensor@register1 0047                          __ptext10 F95E  
                        __ptext11 F88A                          __ptext12 F8B0  
                        __ptext13 FA2E                          __ptext14 F91E  
                        __ptext15 FAB0                      _SSP1CON1bits 000FC6  
                     _read_sensor F88A                     __size_of_main 007E  
                        _init_pin F7F0                 read_sensor@sensor 0045  
             _CDC_RESULT_REGISTER 0078             __size_of_setup_AD7147 04C4  
                   write_AD7147@i 0039                      _SSP1STATbits 000FC7  
              w16_r16_spi@address 002F                      ??_setup_port 002F  
         write_AD7147@enable_word 0037                       ??_init_uart 002F  
            __end_of_write_AD7147 F9B0                      _setup_AD7147 FB34  
                      _RCSTA2bits 000F6B                __end_of_setup_port F814  
                     ??_setup_mcu 002F                       ??_setup_spi 002F  
               w16_r16_spi@result 003B     uart_write_unsigned_int@number 002F  
