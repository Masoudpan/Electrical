

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Feb 27 16:07:58 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F87J10
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    29  0000                     
    30                           	psect	idataCOMRAM
    31  01F788                     __pidataCOMRAM:
    32                           	opt stack 0
    33                           
    34                           ;initializer for _CDC_RESULT_REGISTER
    35  01F788  000B               	dw	11
    36  01F78A  000C               	dw	12
    37  01F78C  000D               	dw	13
    38  01F78E  000E               	dw	14
    39  01F790  000F               	dw	15
    40  01F792  0010               	dw	16
    41  01F794  0011               	dw	17
    42  01F796  0012               	dw	18
    43  01F798  0013               	dw	19
    44  01F79A  0014               	dw	20
    45  01F79C  0015               	dw	21
    46  01F79E  0016               	dw	22
    47  0000                     _BAUDCON2	set	3964
    48  0000                     _PIE1bits	set	3997
    49  0000                     _PIR3bits	set	4004
    50  0000                     _PORTCbits	set	3970
    51  0000                     _PORTDbits	set	3971
    52  0000                     _RCREG2	set	3950
    53  0000                     _RCSTA2bits	set	3947
    54  0000                     _SPBRG2	set	3951
    55  0000                     _SSP1BUF	set	4041
    56  0000                     _SSP1CON1bits	set	4038
    57  0000                     _SSP1STATbits	set	4039
    58  0000                     _TRISC	set	3988
    59  0000                     _TRISD	set	3989
    60  0000                     _TRISE	set	3990
    61  0000                     _TRISF	set	3991
    62  0000                     _TRISG	set	3992
    63  0000                     _TXREG	set	4013
    64  0000                     _TXREG2	set	3949
    65  0000                     _TXSTA2	set	3948
    66  0000                     _RCIF	set	31989
    67  0000                     _TRMT	set	32097
    68  0000                     _TRMT2	set	31585
    69                           
    70                           ; #config settings
    71  0000                     
    72                           	psect	cinit
    73  01F82C                     __pcinit:
    74                           	opt stack 0
    75  01F82C                     start_initialization:
    76                           	opt stack 0
    77  01F82C                     __initialization:
    78                           	opt stack 0
    79                           
    80                           ; Initialize objects allocated to COMRAM (24 bytes)
    81                           ; load TBLPTR registers with __pidataCOMRAM
    82  01F82C  0E88               	movlw	low __pidataCOMRAM
    83  01F82E  6EF6               	movwf	tblptrl,c
    84  01F830  0EF7               	movlw	high __pidataCOMRAM
    85  01F832  6EF7               	movwf	tblptrh,c
    86  01F834  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
    87  01F836  6EF8               	movwf	tblptru,c
    88  01F838  EE00  F03A         	lfsr	0,__pdataCOMRAM
    89  01F83C  EE10 F018          	lfsr	1,24
    90  01F840                     copy_data0:
    91  01F840  0009               	tblrd		*+
    92  01F842  CFF5 FFEE          	movff	tablat,postinc0
    93  01F846  50E5               	movf	postdec1,w,c
    94  01F848  50E1               	movf	fsr1l,w,c
    95  01F84A  E1FA               	bnz	copy_data0
    96                           
    97                           ; Clear objects allocated to BANK0 (70 bytes)
    98  01F84C  EE00  F060         	lfsr	0,__pbssBANK0
    99  01F850  0E46               	movlw	70
   100  01F852                     clear_0:
   101  01F852  6AEE               	clrf	postinc0,c
   102  01F854  06E8               	decf	wreg,f,c
   103  01F856  E1FD               	bnz	clear_0
   104  01F858                     end_of_initialization:
   105                           	opt stack 0
   106  01F858                     __end_of__initialization:
   107                           	opt stack 0
   108  01F858  0100               	movlb	0
   109  01F85A  EF09  F0FD         	goto	_main	;jump to C main() function
   110                           tblptru	equ	0xFF8
   111                           tblptrh	equ	0xFF7
   112                           tblptrl	equ	0xFF6
   113                           tablat	equ	0xFF5
   114                           postinc0	equ	0xFEE
   115                           wreg	equ	0xFE8
   116                           postdec1	equ	0xFE5
   117                           fsr1l	equ	0xFE1
   118                           
   119                           	psect	dataCOMRAM
   120  00003A                     __pdataCOMRAM:
   121                           	opt stack 0
   122  00003A                     _CDC_RESULT_REGISTER:
   123                           	opt stack 0
   124  00003A                     	ds	24
   125                           tblptru	equ	0xFF8
   126                           tblptrh	equ	0xFF7
   127                           tblptrl	equ	0xFF6
   128                           tablat	equ	0xFF5
   129                           postinc0	equ	0xFEE
   130                           wreg	equ	0xFE8
   131                           postdec1	equ	0xFE5
   132                           fsr1l	equ	0xFE1
   133                           
   134                           	psect	bssBANK0
   135  000060                     __pbssBANK0:
   136                           	opt stack 0
   137  000060                     _CDC_RESULT:
   138                           	opt stack 0
   139  000060                     	ds	24
   140  000078                     _AD7147Registers:
   141                           	opt stack 0
   142  000078                     	ds	46
   143                           tblptru	equ	0xFF8
   144                           tblptrh	equ	0xFF7
   145                           tblptrl	equ	0xFF6
   146                           tablat	equ	0xFF5
   147                           postinc0	equ	0xFEE
   148                           wreg	equ	0xFE8
   149                           postdec1	equ	0xFE5
   150                           fsr1l	equ	0xFE1
   151                           
   152                           	psect	cstackCOMRAM
   153  000001                     __pcstackCOMRAM:
   154                           	opt stack 0
   155  000001                     ?_w16_r16_spi:
   156                           	opt stack 0
   157  000001                     ?___awdiv:
   158                           	opt stack 0
   159  000001                     uart_write_char@data:
   160                           	opt stack 0
   161  000001                     w32_spi@address:
   162                           	opt stack 0
   163  000001                     w16_r16_spi@address:
   164                           	opt stack 0
   165  000001                     uart_write_unsigned_int@number:
   166                           	opt stack 0
   167  000001                     ___awdiv@dividend:
   168                           	opt stack 0
   169                           
   170                           ; 2 bytes @ 0x0
   171  000001                     	ds	2
   172  000003                     ??_w16_r16_spi:
   173  000003                     uart_write_unsigned_int@char1:
   174                           	opt stack 0
   175  000003                     w32_spi@data:
   176                           	opt stack 0
   177  000003                     ___awdiv@divisor:
   178                           	opt stack 0
   179                           
   180                           ; 2 bytes @ 0x2
   181  000003                     	ds	1
   182  000004                     uart_write_unsigned_int@char2:
   183                           	opt stack 0
   184                           
   185                           ; 1 bytes @ 0x3
   186  000004                     	ds	1
   187  000005                     ??_w32_spi:
   188  000005                     ___awdiv@counter:
   189                           	opt stack 0
   190  000005                     w16_r16_spi@p1:
   191                           	opt stack 0
   192                           
   193                           ; 2 bytes @ 0x4
   194  000005                     	ds	1
   195  000006                     ___awdiv@sign:
   196                           	opt stack 0
   197                           
   198                           ; 1 bytes @ 0x5
   199  000006                     	ds	1
   200  000007                     w32_spi@p1:
   201                           	opt stack 0
   202  000007                     w16_r16_spi@p2:
   203                           	opt stack 0
   204  000007                     ___awdiv@quotient:
   205                           	opt stack 0
   206                           
   207                           ; 2 bytes @ 0x6
   208  000007                     	ds	2
   209  000009                     delay_ms@n:
   210                           	opt stack 0
   211  000009                     w32_spi@p2:
   212                           	opt stack 0
   213  000009                     w16_r16_spi@address_low:
   214                           	opt stack 0
   215                           
   216                           ; 2 bytes @ 0x8
   217  000009                     	ds	2
   218  00000B                     ??_delay_ms:
   219  00000B                     w32_spi@p3:
   220                           	opt stack 0
   221  00000B                     w16_r16_spi@address_high:
   222                           	opt stack 0
   223                           
   224                           ; 2 bytes @ 0xA
   225  00000B                     	ds	1
   226  00000C                     delay_ms@j:
   227                           	opt stack 0
   228                           
   229                           ; 2 bytes @ 0xB
   230  00000C                     	ds	1
   231  00000D                     w32_spi@p4:
   232                           	opt stack 0
   233  00000D                     w16_r16_spi@result:
   234                           	opt stack 0
   235                           
   236                           ; 2 bytes @ 0xC
   237  00000D                     	ds	2
   238  00000F                     w32_spi@address_low:
   239                           	opt stack 0
   240  00000F                     w16_r16_spi@blank_low:
   241                           	opt stack 0
   242                           
   243                           ; 2 bytes @ 0xE
   244  00000F                     	ds	2
   245  000011                     w32_spi@address_high:
   246                           	opt stack 0
   247  000011                     w16_r16_spi@blank_high:
   248                           	opt stack 0
   249                           
   250                           ; 2 bytes @ 0x10
   251  000011                     	ds	2
   252  000013                     w32_spi@data_low:
   253                           	opt stack 0
   254  000013                     w16_r16_spi@p3:
   255                           	opt stack 0
   256                           
   257                           ; 2 bytes @ 0x12
   258  000013                     	ds	2
   259  000015                     w32_spi@data_high:
   260                           	opt stack 0
   261  000015                     w16_r16_spi@p4:
   262                           	opt stack 0
   263                           
   264                           ; 2 bytes @ 0x14
   265  000015                     	ds	2
   266  000017                     ?_read_sensor:
   267                           	opt stack 0
   268  000017                     ?_get_ID:
   269                           	opt stack 0
   270  000017                     write_AD7147@RegisterAddress:
   271                           	opt stack 0
   272  000017                     read_sensor@sensor:
   273                           	opt stack 0
   274                           
   275                           ; 2 bytes @ 0x16
   276  000017                     	ds	2
   277  000019                     ??_get_ID:
   278  000019                     write_AD7147@NumberOfRegisters:
   279                           	opt stack 0
   280  000019                     read_sensor@register1:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0x18
   284  000019                     	ds	1
   285  00001A                     get_ID@result:
   286                           	opt stack 0
   287                           
   288                           ; 2 bytes @ 0x19
   289  00001A                     	ds	1
   290  00001B                     write_AD7147@DataBuffer:
   291                           	opt stack 0
   292  00001B                     read_sensor@sensor_value:
   293                           	opt stack 0
   294                           
   295                           ; 2 bytes @ 0x1A
   296  00001B                     	ds	2
   297  00001D                     ??_write_AD7147:
   298                           
   299                           ; 1 bytes @ 0x1C
   300  00001D                     	ds	2
   301  00001F                     write_AD7147@Register_Values:
   302                           	opt stack 0
   303  00001F                     write_AD7147@enable_word:
   304                           	opt stack 0
   305                           
   306                           ; 2 bytes @ 0x1E
   307  00001F                     	ds	2
   308  000021                     write_AD7147@i:
   309                           	opt stack 0
   310                           
   311                           ; 2 bytes @ 0x20
   312  000021                     	ds	2
   313  000023                     setup_AD7147@StageBuffer:
   314                           	opt stack 0
   315                           
   316                           ; 16 bytes @ 0x22
   317  000023                     	ds	16
   318  000033                     main@bb:
   319                           	opt stack 0
   320                           
   321                           ; 2 bytes @ 0x32
   322  000033                     	ds	2
   323  000035                     main@device_ID:
   324                           	opt stack 0
   325                           
   326                           ; 2 bytes @ 0x34
   327  000035                     	ds	2
   328  000037                     main@sensor_1:
   329                           	opt stack 0
   330                           
   331                           ; 2 bytes @ 0x36
   332  000037                     	ds	2
   333  000039                     main@indicator:
   334                           	opt stack 0
   335                           
   336                           ; 1 bytes @ 0x38
   337  000039                     	ds	1
   338                           tblptru	equ	0xFF8
   339                           tblptrh	equ	0xFF7
   340                           tblptrl	equ	0xFF6
   341                           tablat	equ	0xFF5
   342                           postinc0	equ	0xFEE
   343                           wreg	equ	0xFE8
   344                           postdec1	equ	0xFE5
   345                           fsr1l	equ	0xFE1
   346                           
   347 ;;
   348 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   349 ;;
   350 ;; *************** function _main *****************
   351 ;; Defined at:
   352 ;;		line 6 in file "main.c"
   353 ;; Parameters:    Size  Location     Type
   354 ;;		None
   355 ;; Auto vars:     Size  Location     Type
   356 ;;  sensor_1        2   54[COMRAM] unsigned int 
   357 ;;  device_ID       2   52[COMRAM] unsigned int 
   358 ;;  bb              2   50[COMRAM] unsigned int 
   359 ;;  indicator       1   56[COMRAM] unsigned char 
   360 ;; Return value:  Size  Location     Type
   361 ;;                  1    wreg      void 
   362 ;; Registers used:
   363 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   364 ;; Tracked objects:
   365 ;;		On entry : 0/0
   366 ;;		On exit  : 0/0
   367 ;;		Unchanged: 0/0
   368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   370 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   372 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   373 ;;Total ram usage:        7 bytes
   374 ;; Hardware stack levels required when called:    3
   375 ;; This function calls:
   376 ;;		_delay_ms
   377 ;;		_get_ID
   378 ;;		_read_sensor
   379 ;;		_setup_AD7147
   380 ;;		_setup_mcu
   381 ;;		_setup_spi
   382 ;;		_uart_read_char
   383 ;;		_uart_write_char
   384 ;;		_uart_write_unsigned_int
   385 ;; This function is called by:
   386 ;;		Startup code after reset
   387 ;; This function uses a non-reentrant model
   388 ;;
   389                           
   390                           	psect	text0
   391  01FA12                     __ptext0:
   392                           	opt stack 0
   393  01FA12                     _main:
   394                           	opt stack 28
   395                           
   396                           ;main.c: 8: delay_ms(500);
   397                           
   398                           ;incstack = 0
   399  01FA12  0E01               	movlw	1
   400  01FA14  6E0A               	movwf	delay_ms@n+1,c
   401  01FA16  0EF4               	movlw	244
   402  01FA18  6E09               	movwf	delay_ms@n,c
   403  01FA1A  EC2F  F0FC         	call	_delay_ms	;wreg free
   404                           
   405                           ;main.c: 9: setup_mcu();
   406  01FA1E  EC97  F0FB         	call	_setup_mcu	;wreg free
   407                           
   408                           ;main.c: 10: setup_spi();
   409  01FA22  ECDD  F0FB         	call	_setup_spi	;wreg free
   410                           
   411                           ;main.c: 11: setup_AD7147();
   412  01FA26  EC92  F0FD         	call	_setup_AD7147	;wreg free
   413                           
   414                           ;main.c: 13: char indicator;
   415                           ;main.c: 14: unsigned int bb = 1020;
   416  01FA2A  0E03               	movlw	3
   417  01FA2C  6E34               	movwf	main@bb+1,c
   418  01FA2E  0EFC               	movlw	252
   419  01FA30  6E33               	movwf	main@bb,c
   420  01FA32                     l1565:
   421                           
   422                           ;main.c: 16: {
   423                           ;main.c: 17: indicator = uart_read_char();
   424  01FA32  ECBA  F0FB         	call	_uart_read_char	;wreg free
   425  01FA36  6E39               	movwf	main@indicator,c
   426                           
   427                           ;main.c: 18: if (indicator == 'i')
   428  01FA38  0E69               	movlw	105
   429  01FA3A  1839               	xorwf	main@indicator,w,c
   430  01FA3C  A4D8               	btfss	status,2,c
   431  01FA3E  D00F               	goto	l1575
   432                           
   433                           ;main.c: 19: {
   434                           ;main.c: 20: uart_write_char('i');
   435  01FA40  0E69               	movlw	105
   436  01FA42  EC91  F0FB         	call	_uart_write_char
   437                           
   438                           ;main.c: 21: unsigned int device_ID = get_ID();
   439  01FA46  ECFE  F0FB         	call	_get_ID	;wreg free
   440  01FA4A  C017  F035         	movff	?_get_ID,main@device_ID
   441  01FA4E  C018  F036         	movff	?_get_ID+1,main@device_ID+1
   442                           
   443                           ;main.c: 22: uart_write_unsigned_int(device_ID);
   444  01FA52  C035  F001         	movff	main@device_ID,uart_write_unsigned_int@number
   445  01FA56  C036  F002         	movff	main@device_ID+1,uart_write_unsigned_int@number+1
   446  01FA5A  ECD0  F0FB         	call	_uart_write_unsigned_int	;wreg free
   447  01FA5E                     l1575:
   448                           
   449                           ;main.c: 23: }
   450                           ;main.c: 24: if (indicator == 's')
   451  01FA5E  0E73               	movlw	115
   452  01FA60  1839               	xorwf	main@indicator,w,c
   453  01FA62  A4D8               	btfss	status,2,c
   454  01FA64  D013               	goto	l1583
   455                           
   456                           ;main.c: 25: {
   457                           ;main.c: 26: uart_write_char('s');
   458  01FA66  0E73               	movlw	115
   459  01FA68  EC91  F0FB         	call	_uart_write_char
   460                           
   461                           ;main.c: 27: unsigned int sensor_1 = read_sensor(1);
   462  01FA6C  0E00               	movlw	0
   463  01FA6E  6E18               	movwf	read_sensor@sensor+1,c
   464  01FA70  0E01               	movlw	1
   465  01FA72  6E17               	movwf	read_sensor@sensor,c
   466  01FA74  ECEB  F0FB         	call	_read_sensor	;wreg free
   467  01FA78  C017  F037         	movff	?_read_sensor,main@sensor_1
   468  01FA7C  C018  F038         	movff	?_read_sensor+1,main@sensor_1+1
   469                           
   470                           ;main.c: 29: uart_write_unsigned_int(sensor_1);
   471  01FA80  C037  F001         	movff	main@sensor_1,uart_write_unsigned_int@number
   472  01FA84  C038  F002         	movff	main@sensor_1+1,uart_write_unsigned_int@number+1
   473  01FA88  ECD0  F0FB         	call	_uart_write_unsigned_int	;wreg free
   474  01FA8C                     l1583:
   475                           
   476                           ;main.c: 30: }
   477                           ;main.c: 31: delay_ms(500);
   478  01FA8C  0E01               	movlw	1
   479  01FA8E  6E0A               	movwf	delay_ms@n+1,c
   480  01FA90  0EF4               	movlw	244
   481  01FA92  6E09               	movwf	delay_ms@n,c
   482  01FA94  EC2F  F0FC         	call	_delay_ms	;wreg free
   483  01FA98  D7CC               	goto	l1565
   484  01FA9A                     __end_of_main:
   485                           	opt stack 0
   486                           tblptru	equ	0xFF8
   487                           tblptrh	equ	0xFF7
   488                           tblptrl	equ	0xFF6
   489                           tablat	equ	0xFF5
   490                           postinc0	equ	0xFEE
   491                           wreg	equ	0xFE8
   492                           postdec1	equ	0xFE5
   493                           fsr1l	equ	0xFE1
   494                           status	equ	0xFD8
   495                           
   496 ;; *************** function _uart_write_unsigned_int *****************
   497 ;; Defined at:
   498 ;;		line 39 in file "uart.c"
   499 ;; Parameters:    Size  Location     Type
   500 ;;  number          2    0[COMRAM] unsigned int 
   501 ;; Auto vars:     Size  Location     Type
   502 ;;  char2           1    3[COMRAM] unsigned char 
   503 ;;  char1           1    2[COMRAM] unsigned char 
   504 ;; Return value:  Size  Location     Type
   505 ;;                  1    wreg      void 
   506 ;; Registers used:
   507 ;;		wreg, status,2
   508 ;; Tracked objects:
   509 ;;		On entry : 0/0
   510 ;;		On exit  : 0/0
   511 ;;		Unchanged: 0/0
   512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   513 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   514 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   516 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   517 ;;Total ram usage:        4 bytes
   518 ;; Hardware stack levels used:    1
   519 ;; This function calls:
   520 ;;		Nothing
   521 ;; This function is called by:
   522 ;;		_main
   523 ;; This function uses a non-reentrant model
   524 ;;
   525                           
   526                           	psect	text1
   527  01F7A0                     __ptext1:
   528                           	opt stack 0
   529  01F7A0                     _uart_write_unsigned_int:
   530                           	opt stack 30
   531                           
   532                           ;uart.c: 41: char char1 = number & 0xFF;
   533                           
   534                           ;incstack = 0
   535  01F7A0  C001  F003         	movff	uart_write_unsigned_int@number,uart_write_unsigned_int@char1
   536                           
   537                           ;uart.c: 42: char char2 = number >> 8;
   538  01F7A4  5002               	movf	uart_write_unsigned_int@number+1,w,c
   539  01F7A6  6E04               	movwf	uart_write_unsigned_int@char2,c
   540  01F7A8                     l255:
   541  01F7A8  A26C               	btfss	3948,1,c	;volatile
   542  01F7AA  D7FE               	goto	l255
   543                           
   544                           ;uart.c: 45: TXREG2 = char1;
   545  01F7AC  C003  FF6D         	movff	uart_write_unsigned_int@char1,3949	;volatile
   546  01F7B0                     l258:
   547  01F7B0  A26C               	btfss	3948,1,c	;volatile
   548  01F7B2  D7FE               	goto	l258
   549                           
   550                           ;uart.c: 47: TXREG2 = char2;
   551  01F7B4  C004  FF6D         	movff	uart_write_unsigned_int@char2,3949	;volatile
   552  01F7B8  0012               	return		;funcret
   553  01F7BA                     __end_of_uart_write_unsigned_int:
   554                           	opt stack 0
   555                           tblptru	equ	0xFF8
   556                           tblptrh	equ	0xFF7
   557                           tblptrl	equ	0xFF6
   558                           tablat	equ	0xFF5
   559                           postinc0	equ	0xFEE
   560                           wreg	equ	0xFE8
   561                           postdec1	equ	0xFE5
   562                           fsr1l	equ	0xFE1
   563                           status	equ	0xFD8
   564                           
   565 ;; *************** function _uart_write_char *****************
   566 ;; Defined at:
   567 ;;		line 24 in file "uart.c"
   568 ;; Parameters:    Size  Location     Type
   569 ;;  data            1    wreg     unsigned char 
   570 ;; Auto vars:     Size  Location     Type
   571 ;;  data            1    0[COMRAM] unsigned char 
   572 ;; Return value:  Size  Location     Type
   573 ;;                  1    wreg      void 
   574 ;; Registers used:
   575 ;;		wreg
   576 ;; Tracked objects:
   577 ;;		On entry : 0/0
   578 ;;		On exit  : 0/0
   579 ;;		Unchanged: 0/0
   580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   582 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   584 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   585 ;;Total ram usage:        1 bytes
   586 ;; Hardware stack levels used:    1
   587 ;; This function calls:
   588 ;;		Nothing
   589 ;; This function is called by:
   590 ;;		_main
   591 ;;		_uart_write_string
   592 ;; This function uses a non-reentrant model
   593 ;;
   594                           
   595                           	psect	text2
   596  01F722                     __ptext2:
   597                           	opt stack 0
   598  01F722                     _uart_write_char:
   599                           	opt stack 30
   600                           
   601                           ;incstack = 0
   602                           ;uart_write_char@data stored from wreg
   603  01F722  6E01               	movwf	uart_write_char@data,c
   604  01F724                     l243:
   605  01F724  A26C               	btfss	3948,1,c	;volatile
   606  01F726  D7FE               	goto	l243
   607                           
   608                           ;uart.c: 28: TXREG2 = data;
   609  01F728  C001  FF6D         	movff	uart_write_char@data,3949	;volatile
   610  01F72C  0012               	return		;funcret
   611  01F72E                     __end_of_uart_write_char:
   612                           	opt stack 0
   613                           tblptru	equ	0xFF8
   614                           tblptrh	equ	0xFF7
   615                           tblptrl	equ	0xFF6
   616                           tablat	equ	0xFF5
   617                           postinc0	equ	0xFEE
   618                           wreg	equ	0xFE8
   619                           postdec1	equ	0xFE5
   620                           fsr1l	equ	0xFE1
   621                           status	equ	0xFD8
   622                           
   623 ;; *************** function _uart_read_char *****************
   624 ;; Defined at:
   625 ;;		line 75 in file "uart.c"
   626 ;; Parameters:    Size  Location     Type
   627 ;;		None
   628 ;; Auto vars:     Size  Location     Type
   629 ;;		None
   630 ;; Return value:  Size  Location     Type
   631 ;;                  1    wreg      unsigned char 
   632 ;; Registers used:
   633 ;;		wreg, status,2
   634 ;; Tracked objects:
   635 ;;		On entry : 0/0
   636 ;;		On exit  : 0/0
   637 ;;		Unchanged: 0/0
   638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   643 ;;Total ram usage:        0 bytes
   644 ;; Hardware stack levels used:    1
   645 ;; This function calls:
   646 ;;		Nothing
   647 ;; This function is called by:
   648 ;;		_main
   649 ;;		_uart_read_text
   650 ;; This function uses a non-reentrant model
   651 ;;
   652                           
   653                           	psect	text3
   654  01F774                     __ptext3:
   655                           	opt stack 0
   656  01F774                     _uart_read_char:
   657                           	opt stack 30
   658                           
   659                           ;uart.c: 77: while(PIR3bits.RC2IF == 0)
   660                           
   661                           ;incstack = 0
   662  01F774  D005               	goto	l279
   663  01F776                     l280:
   664                           
   665                           ;uart.c: 78: {
   666                           ;uart.c: 79: if(RCSTA2bits.OERR == 1)
   667  01F776  A26B               	btfss	3947,1,c	;volatile
   668  01F778  D003               	goto	l279
   669                           
   670                           ;uart.c: 80: {
   671                           ;uart.c: 81: RCSTA2bits.OERR = 0;
   672  01F77A  926B               	bcf	3947,1,c	;volatile
   673                           
   674                           ;uart.c: 82: RCSTA2bits.CREN = 0;
   675  01F77C  986B               	bcf	3947,4,c	;volatile
   676                           
   677                           ;uart.c: 83: RCSTA2bits.CREN = 1;
   678  01F77E  886B               	bsf	3947,4,c	;volatile
   679  01F780                     l279:
   680  01F780  AAA4               	btfss	4004,5,c	;volatile
   681  01F782  D7F9               	goto	l280
   682                           
   683                           ;uart.c: 84: }
   684                           ;uart.c: 85: }
   685                           ;uart.c: 86: return RCREG2;
   686  01F784  506E               	movf	3950,w,c	;volatile
   687  01F786  0012               	return	
   688  01F788                     __end_of_uart_read_char:
   689                           	opt stack 0
   690                           tblptru	equ	0xFF8
   691                           tblptrh	equ	0xFF7
   692                           tblptrl	equ	0xFF6
   693                           tablat	equ	0xFF5
   694                           postinc0	equ	0xFEE
   695                           wreg	equ	0xFE8
   696                           postdec1	equ	0xFE5
   697                           fsr1l	equ	0xFE1
   698                           status	equ	0xFD8
   699                           
   700 ;; *************** function _setup_spi *****************
   701 ;; Defined at:
   702 ;;		line 4 in file "spi.c"
   703 ;; Parameters:    Size  Location     Type
   704 ;;		None
   705 ;; Auto vars:     Size  Location     Type
   706 ;;		None
   707 ;; Return value:  Size  Location     Type
   708 ;;                  1    wreg      void 
   709 ;; Registers used:
   710 ;;		status,2, status,0
   711 ;; Tracked objects:
   712 ;;		On entry : 0/0
   713 ;;		On exit  : 0/0
   714 ;;		Unchanged: 0/0
   715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   720 ;;Total ram usage:        0 bytes
   721 ;; Hardware stack levels used:    1
   722 ;; This function calls:
   723 ;;		Nothing
   724 ;; This function is called by:
   725 ;;		_main
   726 ;; This function uses a non-reentrant model
   727 ;;
   728                           
   729                           	psect	text4
   730  01F7BA                     __ptext4:
   731                           	opt stack 0
   732  01F7BA                     _setup_spi:
   733                           	opt stack 30
   734                           
   735                           ;spi.c: 6: SSP1STATbits.SMP = 0;
   736                           
   737                           ;incstack = 0
   738  01F7BA  9EC7               	bcf	4039,7,c	;volatile
   739                           
   740                           ;spi.c: 7: SSP1STATbits.CKE = 0;
   741  01F7BC  9CC7               	bcf	4039,6,c	;volatile
   742                           
   743                           ;spi.c: 9: SSP1CON1bits.WCOL = 0;
   744  01F7BE  9EC6               	bcf	4038,7,c	;volatile
   745                           
   746                           ;spi.c: 10: SSP1CON1bits.CKP = 1;
   747  01F7C0  88C6               	bsf	4038,4,c	;volatile
   748                           
   749                           ;spi.c: 12: SSP1CON1bits.SSPM3 = 0;
   750  01F7C2  96C6               	bcf	4038,3,c	;volatile
   751                           
   752                           ;spi.c: 13: SSP1CON1bits.SSPM2 = 0;
   753  01F7C4  94C6               	bcf	4038,2,c	;volatile
   754                           
   755                           ;spi.c: 14: SSP1CON1bits.SSPM1 = 1;
   756  01F7C6  82C6               	bsf	4038,1,c	;volatile
   757                           
   758                           ;spi.c: 15: SSP1CON1bits.SSPM0 = 0;
   759  01F7C8  90C6               	bcf	4038,0,c	;volatile
   760                           
   761                           ;spi.c: 17: PIE1bits.SSP1IE = 0;
   762  01F7CA  969D               	bcf	3997,3,c	;volatile
   763                           
   764                           ;spi.c: 18: SSP1CON1bits.SSPEN = 1;
   765  01F7CC  8AC6               	bsf	4038,5,c	;volatile
   766                           
   767                           ;spi.c: 20: TRISC &= 0xDF;
   768  01F7CE  9A94               	bcf	3988,5,c	;volatile
   769                           
   770                           ;spi.c: 21: TRISC &= 0xF7;
   771  01F7D0  9694               	bcf	3988,3,c	;volatile
   772                           
   773                           ;spi.c: 23: TRISF &= 0x7F;
   774  01F7D2  9E97               	bcf	3991,7,c	;volatile
   775  01F7D4  0012               	return		;funcret
   776  01F7D6                     __end_of_setup_spi:
   777                           	opt stack 0
   778                           tblptru	equ	0xFF8
   779                           tblptrh	equ	0xFF7
   780                           tblptrl	equ	0xFF6
   781                           tablat	equ	0xFF5
   782                           postinc0	equ	0xFEE
   783                           wreg	equ	0xFE8
   784                           postdec1	equ	0xFE5
   785                           fsr1l	equ	0xFE1
   786                           status	equ	0xFD8
   787                           
   788 ;; *************** function _setup_mcu *****************
   789 ;; Defined at:
   790 ;;		line 4 in file "micro_setup.c"
   791 ;; Parameters:    Size  Location     Type
   792 ;;		None
   793 ;; Auto vars:     Size  Location     Type
   794 ;;		None
   795 ;; Return value:  Size  Location     Type
   796 ;;                  1    wreg      void 
   797 ;; Registers used:
   798 ;;		wreg, status,2, cstack
   799 ;; Tracked objects:
   800 ;;		On entry : 0/0
   801 ;;		On exit  : 0/0
   802 ;;		Unchanged: 0/0
   803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   808 ;;Total ram usage:        0 bytes
   809 ;; Hardware stack levels used:    1
   810 ;; Hardware stack levels required when called:    1
   811 ;; This function calls:
   812 ;;		_init_pin
   813 ;;		_init_uart
   814 ;;		_setup_port
   815 ;; This function is called by:
   816 ;;		_main
   817 ;; This function uses a non-reentrant model
   818 ;;
   819                           
   820                           	psect	text5
   821  01F72E                     __ptext5:
   822                           	opt stack 0
   823  01F72E                     _setup_mcu:
   824                           	opt stack 29
   825                           
   826                           ;micro_setup.c: 6: setup_port();
   827                           
   828                           ;incstack = 0
   829  01F72E  ECA7  F0FB         	call	_setup_port	;wreg free
   830                           
   831                           ;micro_setup.c: 7: init_pin();
   832  01F732  EC9E  F0FB         	call	_init_pin	;wreg free
   833                           
   834                           ;micro_setup.c: 8: init_uart();
   835  01F736  ECB0  F0FB         	call	_init_uart	;wreg free
   836  01F73A  0012               	return		;funcret
   837  01F73C                     __end_of_setup_mcu:
   838                           	opt stack 0
   839                           tblptru	equ	0xFF8
   840                           tblptrh	equ	0xFF7
   841                           tblptrl	equ	0xFF6
   842                           tablat	equ	0xFF5
   843                           postinc0	equ	0xFEE
   844                           wreg	equ	0xFE8
   845                           postdec1	equ	0xFE5
   846                           fsr1l	equ	0xFE1
   847                           status	equ	0xFD8
   848                           
   849 ;; *************** function _setup_port *****************
   850 ;; Defined at:
   851 ;;		line 11 in file "micro_setup.c"
   852 ;; Parameters:    Size  Location     Type
   853 ;;		None
   854 ;; Auto vars:     Size  Location     Type
   855 ;;		None
   856 ;; Return value:  Size  Location     Type
   857 ;;                  1    wreg      void 
   858 ;; Registers used:
   859 ;;		wreg, status,2
   860 ;; Tracked objects:
   861 ;;		On entry : 0/0
   862 ;;		On exit  : 0/0
   863 ;;		Unchanged: 0/0
   864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   869 ;;Total ram usage:        0 bytes
   870 ;; Hardware stack levels used:    1
   871 ;; This function calls:
   872 ;;		Nothing
   873 ;; This function is called by:
   874 ;;		_setup_mcu
   875 ;; This function uses a non-reentrant model
   876 ;;
   877                           
   878                           	psect	text6
   879  01F74E                     __ptext6:
   880                           	opt stack 0
   881  01F74E                     _setup_port:
   882                           	opt stack 29
   883                           
   884                           ;micro_setup.c: 13: TRISD = 0b00000000;
   885                           
   886                           ;incstack = 0
   887  01F74E  0E00               	movlw	0
   888  01F750  6E95               	movwf	3989,c	;volatile
   889                           
   890                           ;micro_setup.c: 14: TRISC = 0b00010000;
   891  01F752  0E10               	movlw	16
   892  01F754  6E94               	movwf	3988,c	;volatile
   893                           
   894                           ;micro_setup.c: 15: TRISE = 0b00000000;
   895  01F756  0E00               	movlw	0
   896  01F758  6E96               	movwf	3990,c	;volatile
   897                           
   898                           ;micro_setup.c: 16: TRISG = 0b00000100;
   899  01F75A  0E04               	movlw	4
   900  01F75C  6E98               	movwf	3992,c	;volatile
   901  01F75E  0012               	return		;funcret
   902  01F760                     __end_of_setup_port:
   903                           	opt stack 0
   904                           tblptru	equ	0xFF8
   905                           tblptrh	equ	0xFF7
   906                           tblptrl	equ	0xFF6
   907                           tablat	equ	0xFF5
   908                           postinc0	equ	0xFEE
   909                           wreg	equ	0xFE8
   910                           postdec1	equ	0xFE5
   911                           fsr1l	equ	0xFE1
   912                           status	equ	0xFD8
   913                           
   914 ;; *************** function _init_uart *****************
   915 ;; Defined at:
   916 ;;		line 19 in file "micro_setup.c"
   917 ;; Parameters:    Size  Location     Type
   918 ;;		None
   919 ;; Auto vars:     Size  Location     Type
   920 ;;		None
   921 ;; Return value:  Size  Location     Type
   922 ;;                  1    wreg      void 
   923 ;; Registers used:
   924 ;;		wreg, status,2
   925 ;; Tracked objects:
   926 ;;		On entry : 0/0
   927 ;;		On exit  : 0/0
   928 ;;		Unchanged: 0/0
   929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   934 ;;Total ram usage:        0 bytes
   935 ;; Hardware stack levels used:    1
   936 ;; This function calls:
   937 ;;		Nothing
   938 ;; This function is called by:
   939 ;;		_setup_mcu
   940 ;; This function uses a non-reentrant model
   941 ;;
   942                           
   943                           	psect	text7
   944  01F760                     __ptext7:
   945                           	opt stack 0
   946  01F760                     _init_uart:
   947                           	opt stack 29
   948                           
   949                           ;micro_setup.c: 21: TXSTA2 = 0b00100000;
   950                           
   951                           ;incstack = 0
   952  01F760  0E20               	movlw	32
   953  01F762  6E6C               	movwf	3948,c	;volatile
   954                           
   955                           ;micro_setup.c: 33: SPBRG2 = 15;
   956  01F764  0E0F               	movlw	15
   957  01F766  6E6F               	movwf	3951,c	;volatile
   958                           
   959                           ;micro_setup.c: 35: BAUDCON2 = 0b00000000;
   960  01F768  0E00               	movlw	0
   961  01F76A  6E7C               	movwf	3964,c	;volatile
   962                           
   963                           ;micro_setup.c: 55: RCSTA2bits.SPEN=1;
   964  01F76C  8E6B               	bsf	3947,7,c	;volatile
   965                           
   966                           ;micro_setup.c: 56: RCSTA2bits.RX9=0;
   967  01F76E  9C6B               	bcf	3947,6,c	;volatile
   968                           
   969                           ;micro_setup.c: 57: RCSTA2bits.CREN=1;
   970  01F770  886B               	bsf	3947,4,c	;volatile
   971  01F772  0012               	return		;funcret
   972  01F774                     __end_of_init_uart:
   973                           	opt stack 0
   974                           tblptru	equ	0xFF8
   975                           tblptrh	equ	0xFF7
   976                           tblptrl	equ	0xFF6
   977                           tablat	equ	0xFF5
   978                           postinc0	equ	0xFEE
   979                           wreg	equ	0xFE8
   980                           postdec1	equ	0xFE5
   981                           fsr1l	equ	0xFE1
   982                           status	equ	0xFD8
   983                           
   984 ;; *************** function _init_pin *****************
   985 ;; Defined at:
   986 ;;		line 66 in file "micro_setup.c"
   987 ;; Parameters:    Size  Location     Type
   988 ;;		None
   989 ;; Auto vars:     Size  Location     Type
   990 ;;		None
   991 ;; Return value:  Size  Location     Type
   992 ;;                  1    wreg      void 
   993 ;; Registers used:
   994 ;;		None
   995 ;; Tracked objects:
   996 ;;		On entry : 0/0
   997 ;;		On exit  : 0/0
   998 ;;		Unchanged: 0/0
   999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1004 ;;Total ram usage:        0 bytes
  1005 ;; Hardware stack levels used:    1
  1006 ;; This function calls:
  1007 ;;		Nothing
  1008 ;; This function is called by:
  1009 ;;		_setup_mcu
  1010 ;; This function uses a non-reentrant model
  1011 ;;
  1012                           
  1013                           	psect	text8
  1014  01F73C                     __ptext8:
  1015                           	opt stack 0
  1016  01F73C                     _init_pin:
  1017                           	opt stack 29
  1018                           
  1019                           ;micro_setup.c: 68: PORTDbits.RD7 = 1;
  1020                           
  1021                           ;incstack = 0
  1022  01F73C  8E83               	bsf	3971,7,c	;volatile
  1023                           
  1024                           ;micro_setup.c: 69: PORTDbits.RD6 = 0;
  1025  01F73E  9C83               	bcf	3971,6,c	;volatile
  1026                           
  1027                           ;micro_setup.c: 70: PORTDbits.RD5 = 0;
  1028  01F740  9A83               	bcf	3971,5,c	;volatile
  1029                           
  1030                           ;micro_setup.c: 71: PORTDbits.RD4 = 0;
  1031  01F742  9883               	bcf	3971,4,c	;volatile
  1032                           
  1033                           ;micro_setup.c: 72: PORTDbits.RD3 = 0;
  1034  01F744  9683               	bcf	3971,3,c	;volatile
  1035                           
  1036                           ;micro_setup.c: 73: PORTDbits.RD2 = 0;
  1037  01F746  9483               	bcf	3971,2,c	;volatile
  1038                           
  1039                           ;micro_setup.c: 74: PORTDbits.RD1 = 0;
  1040  01F748  9283               	bcf	3971,1,c	;volatile
  1041                           
  1042                           ;micro_setup.c: 75: PORTDbits.RD0 = 0;
  1043  01F74A  9083               	bcf	3971,0,c	;volatile
  1044  01F74C  0012               	return		;funcret
  1045  01F74E                     __end_of_init_pin:
  1046                           	opt stack 0
  1047                           tblptru	equ	0xFF8
  1048                           tblptrh	equ	0xFF7
  1049                           tblptrl	equ	0xFF6
  1050                           tablat	equ	0xFF5
  1051                           postinc0	equ	0xFEE
  1052                           wreg	equ	0xFE8
  1053                           postdec1	equ	0xFE5
  1054                           fsr1l	equ	0xFE1
  1055                           status	equ	0xFD8
  1056                           
  1057 ;; *************** function _setup_AD7147 *****************
  1058 ;; Defined at:
  1059 ;;		line 5 in file "AD7147.c"
  1060 ;; Parameters:    Size  Location     Type
  1061 ;;		None
  1062 ;; Auto vars:     Size  Location     Type
  1063 ;;  StageBuffer    16   34[COMRAM] unsigned int [8]
  1064 ;; Return value:  Size  Location     Type
  1065 ;;                  1    wreg      void 
  1066 ;; Registers used:
  1067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1068 ;; Tracked objects:
  1069 ;;		On entry : 0/0
  1070 ;;		On exit  : 0/0
  1071 ;;		Unchanged: 0/0
  1072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1074 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1076 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1077 ;;Total ram usage:       16 bytes
  1078 ;; Hardware stack levels used:    1
  1079 ;; Hardware stack levels required when called:    2
  1080 ;; This function calls:
  1081 ;;		_write_AD7147
  1082 ;; This function is called by:
  1083 ;;		_main
  1084 ;; This function uses a non-reentrant model
  1085 ;;
  1086                           
  1087                           	psect	text9
  1088  01FB24                     __ptext9:
  1089                           	opt stack 0
  1090  01FB24                     _setup_AD7147:
  1091                           	opt stack 28
  1092                           
  1093                           ;AD7147.c: 7: unsigned int StageBuffer[8];
  1094                           ;AD7147.c: 23: StageBuffer[0] = 0x3FFE;
  1095                           
  1096                           ;incstack = 0
  1097  01FB24  0E3F               	movlw	63
  1098  01FB26  6E24               	movwf	setup_AD7147@StageBuffer+1,c
  1099  01FB28  0EFE               	movlw	254
  1100  01FB2A  6E23               	movwf	setup_AD7147@StageBuffer,c
  1101                           
  1102                           ;AD7147.c: 24: StageBuffer[1] = 0x1FFF;
  1103  01FB2C  0E1F               	movlw	31
  1104  01FB2E  6E26               	movwf	setup_AD7147@StageBuffer+3,c
  1105  01FB30  6825               	setf	setup_AD7147@StageBuffer+2,c
  1106                           
  1107                           ;AD7147.c: 25: StageBuffer[2] = 0x0100;
  1108  01FB32  0E01               	movlw	1
  1109  01FB34  6E28               	movwf	setup_AD7147@StageBuffer+5,c
  1110  01FB36  0E00               	movlw	0
  1111  01FB38  6E27               	movwf	setup_AD7147@StageBuffer+4,c
  1112                           
  1113                           ;AD7147.c: 26: StageBuffer[3] = 0x2121;
  1114  01FB3A  0E21               	movlw	33
  1115  01FB3C  6E2A               	movwf	setup_AD7147@StageBuffer+7,c
  1116  01FB3E  0E21               	movlw	33
  1117  01FB40  6E29               	movwf	setup_AD7147@StageBuffer+6,c
  1118                           
  1119                           ;AD7147.c: 27: StageBuffer[4] = 4000;
  1120  01FB42  0E0F               	movlw	15
  1121  01FB44  6E2C               	movwf	setup_AD7147@StageBuffer+9,c
  1122  01FB46  0EA0               	movlw	160
  1123  01FB48  6E2B               	movwf	setup_AD7147@StageBuffer+8,c
  1124                           
  1125                           ;AD7147.c: 28: StageBuffer[5] = 4000;
  1126  01FB4A  0E0F               	movlw	15
  1127  01FB4C  6E2E               	movwf	setup_AD7147@StageBuffer+11,c
  1128  01FB4E  0EA0               	movlw	160
  1129  01FB50  6E2D               	movwf	setup_AD7147@StageBuffer+10,c
  1130                           
  1131                           ;AD7147.c: 29: StageBuffer[6] = 4250;
  1132  01FB52  0E10               	movlw	16
  1133  01FB54  6E30               	movwf	setup_AD7147@StageBuffer+13,c
  1134  01FB56  0E9A               	movlw	154
  1135  01FB58  6E2F               	movwf	setup_AD7147@StageBuffer+12,c
  1136                           
  1137                           ;AD7147.c: 30: StageBuffer[7] = 4250;
  1138  01FB5A  0E10               	movlw	16
  1139  01FB5C  6E32               	movwf	setup_AD7147@StageBuffer+15,c
  1140  01FB5E  0E9A               	movlw	154
  1141  01FB60  6E31               	movwf	setup_AD7147@StageBuffer+14,c
  1142                           
  1143                           ;AD7147.c: 31: write_AD7147(0x80, 8, StageBuffer);
  1144  01FB62  0E00               	movlw	0
  1145  01FB64  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1146  01FB66  0E80               	movlw	128
  1147  01FB68  6E17               	movwf	write_AD7147@RegisterAddress,c
  1148  01FB6A  0E00               	movlw	0
  1149  01FB6C  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1150  01FB6E  0E08               	movlw	8
  1151  01FB70  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1152  01FB72  0E23               	movlw	low setup_AD7147@StageBuffer
  1153  01FB74  6E1B               	movwf	write_AD7147@DataBuffer,c
  1154  01FB76  0E00               	movlw	high setup_AD7147@StageBuffer
  1155  01FB78  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1156  01FB7A  EC4D  F0FD         	call	_write_AD7147	;wreg free
  1157                           
  1158                           ;AD7147.c: 36: StageBuffer[0]=0x3FFB;
  1159  01FB7E  0E3F               	movlw	63
  1160  01FB80  6E24               	movwf	setup_AD7147@StageBuffer+1,c
  1161  01FB82  0EFB               	movlw	251
  1162  01FB84  6E23               	movwf	setup_AD7147@StageBuffer,c
  1163                           
  1164                           ;AD7147.c: 37: StageBuffer[1]=0x1FFF;
  1165  01FB86  0E1F               	movlw	31
  1166  01FB88  6E26               	movwf	setup_AD7147@StageBuffer+3,c
  1167  01FB8A  6825               	setf	setup_AD7147@StageBuffer+2,c
  1168                           
  1169                           ;AD7147.c: 38: StageBuffer[2]=0x0100;
  1170  01FB8C  0E01               	movlw	1
  1171  01FB8E  6E28               	movwf	setup_AD7147@StageBuffer+5,c
  1172  01FB90  0E00               	movlw	0
  1173  01FB92  6E27               	movwf	setup_AD7147@StageBuffer+4,c
  1174                           
  1175                           ;AD7147.c: 39: StageBuffer[3]=0x2121;
  1176  01FB94  0E21               	movlw	33
  1177  01FB96  6E2A               	movwf	setup_AD7147@StageBuffer+7,c
  1178  01FB98  0E21               	movlw	33
  1179  01FB9A  6E29               	movwf	setup_AD7147@StageBuffer+6,c
  1180                           
  1181                           ;AD7147.c: 40: StageBuffer[4]=4000;
  1182  01FB9C  0E0F               	movlw	15
  1183  01FB9E  6E2C               	movwf	setup_AD7147@StageBuffer+9,c
  1184  01FBA0  0EA0               	movlw	160
  1185  01FBA2  6E2B               	movwf	setup_AD7147@StageBuffer+8,c
  1186                           
  1187                           ;AD7147.c: 41: StageBuffer[5]=4000;
  1188  01FBA4  0E0F               	movlw	15
  1189  01FBA6  6E2E               	movwf	setup_AD7147@StageBuffer+11,c
  1190  01FBA8  0EA0               	movlw	160
  1191  01FBAA  6E2D               	movwf	setup_AD7147@StageBuffer+10,c
  1192                           
  1193                           ;AD7147.c: 42: StageBuffer[6]=4250;
  1194  01FBAC  0E10               	movlw	16
  1195  01FBAE  6E30               	movwf	setup_AD7147@StageBuffer+13,c
  1196  01FBB0  0E9A               	movlw	154
  1197  01FBB2  6E2F               	movwf	setup_AD7147@StageBuffer+12,c
  1198                           
  1199                           ;AD7147.c: 43: StageBuffer[7]=4250;
  1200  01FBB4  0E10               	movlw	16
  1201  01FBB6  6E32               	movwf	setup_AD7147@StageBuffer+15,c
  1202  01FBB8  0E9A               	movlw	154
  1203  01FBBA  6E31               	movwf	setup_AD7147@StageBuffer+14,c
  1204                           
  1205                           ;AD7147.c: 44: write_AD7147(0x88, 8, StageBuffer);
  1206  01FBBC  0E00               	movlw	0
  1207  01FBBE  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1208  01FBC0  0E88               	movlw	136
  1209  01FBC2  6E17               	movwf	write_AD7147@RegisterAddress,c
  1210  01FBC4  0E00               	movlw	0
  1211  01FBC6  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1212  01FBC8  0E08               	movlw	8
  1213  01FBCA  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1214  01FBCC  0E23               	movlw	low setup_AD7147@StageBuffer
  1215  01FBCE  6E1B               	movwf	write_AD7147@DataBuffer,c
  1216  01FBD0  0E00               	movlw	high setup_AD7147@StageBuffer
  1217  01FBD2  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1218  01FBD4  EC4D  F0FD         	call	_write_AD7147	;wreg free
  1219                           
  1220                           ;AD7147.c: 49: StageBuffer[0]=0x3FEF;
  1221  01FBD8  0E3F               	movlw	63
  1222  01FBDA  6E24               	movwf	setup_AD7147@StageBuffer+1,c
  1223  01FBDC  0EEF               	movlw	239
  1224  01FBDE  6E23               	movwf	setup_AD7147@StageBuffer,c
  1225                           
  1226                           ;AD7147.c: 50: StageBuffer[1]=0x1FFF;
  1227  01FBE0  0E1F               	movlw	31
  1228  01FBE2  6E26               	movwf	setup_AD7147@StageBuffer+3,c
  1229  01FBE4  6825               	setf	setup_AD7147@StageBuffer+2,c
  1230                           
  1231                           ;AD7147.c: 51: StageBuffer[2]=0x0100;
  1232  01FBE6  0E01               	movlw	1
  1233  01FBE8  6E28               	movwf	setup_AD7147@StageBuffer+5,c
  1234  01FBEA  0E00               	movlw	0
  1235  01FBEC  6E27               	movwf	setup_AD7147@StageBuffer+4,c
  1236                           
  1237                           ;AD7147.c: 52: StageBuffer[3]=0x2121;
  1238  01FBEE  0E21               	movlw	33
  1239  01FBF0  6E2A               	movwf	setup_AD7147@StageBuffer+7,c
  1240  01FBF2  0E21               	movlw	33
  1241  01FBF4  6E29               	movwf	setup_AD7147@StageBuffer+6,c
  1242                           
  1243                           ;AD7147.c: 53: StageBuffer[4]=4000;
  1244  01FBF6  0E0F               	movlw	15
  1245  01FBF8  6E2C               	movwf	setup_AD7147@StageBuffer+9,c
  1246  01FBFA  0EA0               	movlw	160
  1247  01FBFC  6E2B               	movwf	setup_AD7147@StageBuffer+8,c
  1248                           
  1249                           ;AD7147.c: 54: StageBuffer[5]=4000;
  1250  01FBFE  0E0F               	movlw	15
  1251  01FC00  6E2E               	movwf	setup_AD7147@StageBuffer+11,c
  1252  01FC02  0EA0               	movlw	160
  1253  01FC04  6E2D               	movwf	setup_AD7147@StageBuffer+10,c
  1254                           
  1255                           ;AD7147.c: 55: StageBuffer[6]=4250;
  1256  01FC06  0E10               	movlw	16
  1257  01FC08  6E30               	movwf	setup_AD7147@StageBuffer+13,c
  1258  01FC0A  0E9A               	movlw	154
  1259  01FC0C  6E2F               	movwf	setup_AD7147@StageBuffer+12,c
  1260                           
  1261                           ;AD7147.c: 56: StageBuffer[7]=4250;
  1262  01FC0E  0E10               	movlw	16
  1263  01FC10  6E32               	movwf	setup_AD7147@StageBuffer+15,c
  1264  01FC12  0E9A               	movlw	154
  1265  01FC14  6E31               	movwf	setup_AD7147@StageBuffer+14,c
  1266                           
  1267                           ;AD7147.c: 57: write_AD7147(0x90, 8, StageBuffer);
  1268  01FC16  0E00               	movlw	0
  1269  01FC18  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1270  01FC1A  0E90               	movlw	144
  1271  01FC1C  6E17               	movwf	write_AD7147@RegisterAddress,c
  1272  01FC1E  0E00               	movlw	0
  1273  01FC20  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1274  01FC22  0E08               	movlw	8
  1275  01FC24  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1276  01FC26  0E23               	movlw	low setup_AD7147@StageBuffer
  1277  01FC28  6E1B               	movwf	write_AD7147@DataBuffer,c
  1278  01FC2A  0E00               	movlw	high setup_AD7147@StageBuffer
  1279  01FC2C  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1280  01FC2E  EC4D  F0FD         	call	_write_AD7147	;wreg free
  1281                           
  1282                           ;AD7147.c: 62: StageBuffer[0]=0x3FBF;
  1283  01FC32  0E3F               	movlw	63
  1284  01FC34  6E24               	movwf	setup_AD7147@StageBuffer+1,c
  1285  01FC36  0EBF               	movlw	191
  1286  01FC38  6E23               	movwf	setup_AD7147@StageBuffer,c
  1287                           
  1288                           ;AD7147.c: 63: StageBuffer[1]=0x1FFF;
  1289  01FC3A  0E1F               	movlw	31
  1290  01FC3C  6E26               	movwf	setup_AD7147@StageBuffer+3,c
  1291  01FC3E  6825               	setf	setup_AD7147@StageBuffer+2,c
  1292                           
  1293                           ;AD7147.c: 64: StageBuffer[2]=0x0100;
  1294  01FC40  0E01               	movlw	1
  1295  01FC42  6E28               	movwf	setup_AD7147@StageBuffer+5,c
  1296  01FC44  0E00               	movlw	0
  1297  01FC46  6E27               	movwf	setup_AD7147@StageBuffer+4,c
  1298                           
  1299                           ;AD7147.c: 65: StageBuffer[3]=0x2121;
  1300  01FC48  0E21               	movlw	33
  1301  01FC4A  6E2A               	movwf	setup_AD7147@StageBuffer+7,c
  1302  01FC4C  0E21               	movlw	33
  1303  01FC4E  6E29               	movwf	setup_AD7147@StageBuffer+6,c
  1304                           
  1305                           ;AD7147.c: 66: StageBuffer[4]=4000;
  1306  01FC50  0E0F               	movlw	15
  1307  01FC52  6E2C               	movwf	setup_AD7147@StageBuffer+9,c
  1308  01FC54  0EA0               	movlw	160
  1309  01FC56  6E2B               	movwf	setup_AD7147@StageBuffer+8,c
  1310                           
  1311                           ;AD7147.c: 67: StageBuffer[5]=4000;
  1312  01FC58  0E0F               	movlw	15
  1313  01FC5A  6E2E               	movwf	setup_AD7147@StageBuffer+11,c
  1314  01FC5C  0EA0               	movlw	160
  1315  01FC5E  6E2D               	movwf	setup_AD7147@StageBuffer+10,c
  1316                           
  1317                           ;AD7147.c: 68: StageBuffer[6]=4250;
  1318  01FC60  0E10               	movlw	16
  1319  01FC62  6E30               	movwf	setup_AD7147@StageBuffer+13,c
  1320  01FC64  0E9A               	movlw	154
  1321  01FC66  6E2F               	movwf	setup_AD7147@StageBuffer+12,c
  1322                           
  1323                           ;AD7147.c: 69: StageBuffer[7]=4250;
  1324  01FC68  0E10               	movlw	16
  1325  01FC6A  6E32               	movwf	setup_AD7147@StageBuffer+15,c
  1326  01FC6C  0E9A               	movlw	154
  1327  01FC6E  6E31               	movwf	setup_AD7147@StageBuffer+14,c
  1328                           
  1329                           ;AD7147.c: 70: write_AD7147(0x98, 8, StageBuffer);
  1330  01FC70  0E00               	movlw	0
  1331  01FC72  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1332  01FC74  0E98               	movlw	152
  1333  01FC76  6E17               	movwf	write_AD7147@RegisterAddress,c
  1334  01FC78  0E00               	movlw	0
  1335  01FC7A  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1336  01FC7C  0E08               	movlw	8
  1337  01FC7E  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1338  01FC80  0E23               	movlw	low setup_AD7147@StageBuffer
  1339  01FC82  6E1B               	movwf	write_AD7147@DataBuffer,c
  1340  01FC84  0E00               	movlw	high setup_AD7147@StageBuffer
  1341  01FC86  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1342  01FC88  EC4D  F0FD         	call	_write_AD7147	;wreg free
  1343                           
  1344                           ;AD7147.c: 75: StageBuffer[0]=0x3EFF;
  1345  01FC8C  0E3E               	movlw	62
  1346  01FC8E  6E24               	movwf	setup_AD7147@StageBuffer+1,c
  1347  01FC90  6823               	setf	setup_AD7147@StageBuffer,c
  1348                           
  1349                           ;AD7147.c: 76: StageBuffer[1]=0x1FFF;
  1350  01FC92  0E1F               	movlw	31
  1351  01FC94  6E26               	movwf	setup_AD7147@StageBuffer+3,c
  1352  01FC96  6825               	setf	setup_AD7147@StageBuffer+2,c
  1353                           
  1354                           ;AD7147.c: 77: StageBuffer[2]=0x0100;
  1355  01FC98  0E01               	movlw	1
  1356  01FC9A  6E28               	movwf	setup_AD7147@StageBuffer+5,c
  1357  01FC9C  0E00               	movlw	0
  1358  01FC9E  6E27               	movwf	setup_AD7147@StageBuffer+4,c
  1359                           
  1360                           ;AD7147.c: 78: StageBuffer[3]=0x2121;
  1361  01FCA0  0E21               	movlw	33
  1362  01FCA2  6E2A               	movwf	setup_AD7147@StageBuffer+7,c
  1363  01FCA4  0E21               	movlw	33
  1364  01FCA6  6E29               	movwf	setup_AD7147@StageBuffer+6,c
  1365                           
  1366                           ;AD7147.c: 79: StageBuffer[4]=4000;
  1367  01FCA8  0E0F               	movlw	15
  1368  01FCAA  6E2C               	movwf	setup_AD7147@StageBuffer+9,c
  1369  01FCAC  0EA0               	movlw	160
  1370  01FCAE  6E2B               	movwf	setup_AD7147@StageBuffer+8,c
  1371                           
  1372                           ;AD7147.c: 80: StageBuffer[5]=4000;
  1373  01FCB0  0E0F               	movlw	15
  1374  01FCB2  6E2E               	movwf	setup_AD7147@StageBuffer+11,c
  1375  01FCB4  0EA0               	movlw	160
  1376  01FCB6  6E2D               	movwf	setup_AD7147@StageBuffer+10,c
  1377                           
  1378                           ;AD7147.c: 81: StageBuffer[6]=4250;
  1379  01FCB8  0E10               	movlw	16
  1380  01FCBA  6E30               	movwf	setup_AD7147@StageBuffer+13,c
  1381  01FCBC  0E9A               	movlw	154
  1382  01FCBE  6E2F               	movwf	setup_AD7147@StageBuffer+12,c
  1383                           
  1384                           ;AD7147.c: 82: StageBuffer[7]=4250;
  1385  01FCC0  0E10               	movlw	16
  1386  01FCC2  6E32               	movwf	setup_AD7147@StageBuffer+15,c
  1387  01FCC4  0E9A               	movlw	154
  1388  01FCC6  6E31               	movwf	setup_AD7147@StageBuffer+14,c
  1389                           
  1390                           ;AD7147.c: 83: write_AD7147(0xA0, 8, StageBuffer);
  1391  01FCC8  0E00               	movlw	0
  1392  01FCCA  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1393  01FCCC  0EA0               	movlw	160
  1394  01FCCE  6E17               	movwf	write_AD7147@RegisterAddress,c
  1395  01FCD0  0E00               	movlw	0
  1396  01FCD2  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1397  01FCD4  0E08               	movlw	8
  1398  01FCD6  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1399  01FCD8  0E23               	movlw	low setup_AD7147@StageBuffer
  1400  01FCDA  6E1B               	movwf	write_AD7147@DataBuffer,c
  1401  01FCDC  0E00               	movlw	high setup_AD7147@StageBuffer
  1402  01FCDE  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1403  01FCE0  EC4D  F0FD         	call	_write_AD7147	;wreg free
  1404                           
  1405                           ;AD7147.c: 88: StageBuffer[0]=0x3BFF;
  1406  01FCE4  0E3B               	movlw	59
  1407  01FCE6  6E24               	movwf	setup_AD7147@StageBuffer+1,c
  1408  01FCE8  6823               	setf	setup_AD7147@StageBuffer,c
  1409                           
  1410                           ;AD7147.c: 89: StageBuffer[1]=0x1FFF;
  1411  01FCEA  0E1F               	movlw	31
  1412  01FCEC  6E26               	movwf	setup_AD7147@StageBuffer+3,c
  1413  01FCEE  6825               	setf	setup_AD7147@StageBuffer+2,c
  1414                           
  1415                           ;AD7147.c: 90: StageBuffer[2]=0x0100;
  1416  01FCF0  0E01               	movlw	1
  1417  01FCF2  6E28               	movwf	setup_AD7147@StageBuffer+5,c
  1418  01FCF4  0E00               	movlw	0
  1419  01FCF6  6E27               	movwf	setup_AD7147@StageBuffer+4,c
  1420                           
  1421                           ;AD7147.c: 91: StageBuffer[3]=0x2121;
  1422  01FCF8  0E21               	movlw	33
  1423  01FCFA  6E2A               	movwf	setup_AD7147@StageBuffer+7,c
  1424  01FCFC  0E21               	movlw	33
  1425  01FCFE  6E29               	movwf	setup_AD7147@StageBuffer+6,c
  1426                           
  1427                           ;AD7147.c: 92: StageBuffer[4]=4000;
  1428  01FD00  0E0F               	movlw	15
  1429  01FD02  6E2C               	movwf	setup_AD7147@StageBuffer+9,c
  1430  01FD04  0EA0               	movlw	160
  1431  01FD06  6E2B               	movwf	setup_AD7147@StageBuffer+8,c
  1432                           
  1433                           ;AD7147.c: 93: StageBuffer[5]=4000;
  1434  01FD08  0E0F               	movlw	15
  1435  01FD0A  6E2E               	movwf	setup_AD7147@StageBuffer+11,c
  1436  01FD0C  0EA0               	movlw	160
  1437  01FD0E  6E2D               	movwf	setup_AD7147@StageBuffer+10,c
  1438                           
  1439                           ;AD7147.c: 94: StageBuffer[6]=4250;
  1440  01FD10  0E10               	movlw	16
  1441  01FD12  6E30               	movwf	setup_AD7147@StageBuffer+13,c
  1442  01FD14  0E9A               	movlw	154
  1443  01FD16  6E2F               	movwf	setup_AD7147@StageBuffer+12,c
  1444                           
  1445                           ;AD7147.c: 95: StageBuffer[7]=4250;
  1446  01FD18  0E10               	movlw	16
  1447  01FD1A  6E32               	movwf	setup_AD7147@StageBuffer+15,c
  1448  01FD1C  0E9A               	movlw	154
  1449  01FD1E  6E31               	movwf	setup_AD7147@StageBuffer+14,c
  1450                           
  1451                           ;AD7147.c: 96: write_AD7147(0xA8, 8, StageBuffer);
  1452  01FD20  0E00               	movlw	0
  1453  01FD22  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1454  01FD24  0EA8               	movlw	168
  1455  01FD26  6E17               	movwf	write_AD7147@RegisterAddress,c
  1456  01FD28  0E00               	movlw	0
  1457  01FD2A  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1458  01FD2C  0E08               	movlw	8
  1459  01FD2E  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1460  01FD30  0E23               	movlw	low setup_AD7147@StageBuffer
  1461  01FD32  6E1B               	movwf	write_AD7147@DataBuffer,c
  1462  01FD34  0E00               	movlw	high setup_AD7147@StageBuffer
  1463  01FD36  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1464  01FD38  EC4D  F0FD         	call	_write_AD7147	;wreg free
  1465                           
  1466                           ;AD7147.c: 101: StageBuffer[0]=0x2FFF;
  1467  01FD3C  0E2F               	movlw	47
  1468  01FD3E  6E24               	movwf	setup_AD7147@StageBuffer+1,c
  1469  01FD40  6823               	setf	setup_AD7147@StageBuffer,c
  1470                           
  1471                           ;AD7147.c: 102: StageBuffer[1]=0x1FFF;
  1472  01FD42  0E1F               	movlw	31
  1473  01FD44  6E26               	movwf	setup_AD7147@StageBuffer+3,c
  1474  01FD46  6825               	setf	setup_AD7147@StageBuffer+2,c
  1475                           
  1476                           ;AD7147.c: 103: StageBuffer[2]=0x0100;
  1477  01FD48  0E01               	movlw	1
  1478  01FD4A  6E28               	movwf	setup_AD7147@StageBuffer+5,c
  1479  01FD4C  0E00               	movlw	0
  1480  01FD4E  6E27               	movwf	setup_AD7147@StageBuffer+4,c
  1481                           
  1482                           ;AD7147.c: 104: StageBuffer[3]=0x2121;
  1483  01FD50  0E21               	movlw	33
  1484  01FD52  6E2A               	movwf	setup_AD7147@StageBuffer+7,c
  1485  01FD54  0E21               	movlw	33
  1486  01FD56  6E29               	movwf	setup_AD7147@StageBuffer+6,c
  1487                           
  1488                           ;AD7147.c: 105: StageBuffer[4]=4000;
  1489  01FD58  0E0F               	movlw	15
  1490  01FD5A  6E2C               	movwf	setup_AD7147@StageBuffer+9,c
  1491  01FD5C  0EA0               	movlw	160
  1492  01FD5E  6E2B               	movwf	setup_AD7147@StageBuffer+8,c
  1493                           
  1494                           ;AD7147.c: 106: StageBuffer[5]=4000;
  1495  01FD60  0E0F               	movlw	15
  1496  01FD62  6E2E               	movwf	setup_AD7147@StageBuffer+11,c
  1497  01FD64  0EA0               	movlw	160
  1498  01FD66  6E2D               	movwf	setup_AD7147@StageBuffer+10,c
  1499                           
  1500                           ;AD7147.c: 107: StageBuffer[6]=4250;
  1501  01FD68  0E10               	movlw	16
  1502  01FD6A  6E30               	movwf	setup_AD7147@StageBuffer+13,c
  1503  01FD6C  0E9A               	movlw	154
  1504  01FD6E  6E2F               	movwf	setup_AD7147@StageBuffer+12,c
  1505                           
  1506                           ;AD7147.c: 108: StageBuffer[7]=4250;
  1507  01FD70  0E10               	movlw	16
  1508  01FD72  6E32               	movwf	setup_AD7147@StageBuffer+15,c
  1509  01FD74  0E9A               	movlw	154
  1510  01FD76  6E31               	movwf	setup_AD7147@StageBuffer+14,c
  1511                           
  1512                           ;AD7147.c: 109: write_AD7147(0xB0, 8, StageBuffer);
  1513  01FD78  0E00               	movlw	0
  1514  01FD7A  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1515  01FD7C  0EB0               	movlw	176
  1516  01FD7E  6E17               	movwf	write_AD7147@RegisterAddress,c
  1517  01FD80  0E00               	movlw	0
  1518  01FD82  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1519  01FD84  0E08               	movlw	8
  1520  01FD86  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1521  01FD88  0E23               	movlw	low setup_AD7147@StageBuffer
  1522  01FD8A  6E1B               	movwf	write_AD7147@DataBuffer,c
  1523  01FD8C  0E00               	movlw	high setup_AD7147@StageBuffer
  1524  01FD8E  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1525  01FD90  EC4D  F0FD         	call	_write_AD7147	;wreg free
  1526                           
  1527                           ;AD7147.c: 114: StageBuffer[0]=0x3FFF;
  1528  01FD94  0E3F               	movlw	63
  1529  01FD96  6E24               	movwf	setup_AD7147@StageBuffer+1,c
  1530  01FD98  6823               	setf	setup_AD7147@StageBuffer,c
  1531                           
  1532                           ;AD7147.c: 115: StageBuffer[1]=0x1FFE;
  1533  01FD9A  0E1F               	movlw	31
  1534  01FD9C  6E26               	movwf	setup_AD7147@StageBuffer+3,c
  1535  01FD9E  0EFE               	movlw	254
  1536  01FDA0  6E25               	movwf	setup_AD7147@StageBuffer+2,c
  1537                           
  1538                           ;AD7147.c: 116: StageBuffer[2]=0x0100;
  1539  01FDA2  0E01               	movlw	1
  1540  01FDA4  6E28               	movwf	setup_AD7147@StageBuffer+5,c
  1541  01FDA6  0E00               	movlw	0
  1542  01FDA8  6E27               	movwf	setup_AD7147@StageBuffer+4,c
  1543                           
  1544                           ;AD7147.c: 117: StageBuffer[3]=0x2121;
  1545  01FDAA  0E21               	movlw	33
  1546  01FDAC  6E2A               	movwf	setup_AD7147@StageBuffer+7,c
  1547  01FDAE  0E21               	movlw	33
  1548  01FDB0  6E29               	movwf	setup_AD7147@StageBuffer+6,c
  1549                           
  1550                           ;AD7147.c: 118: StageBuffer[4]=4000;
  1551  01FDB2  0E0F               	movlw	15
  1552  01FDB4  6E2C               	movwf	setup_AD7147@StageBuffer+9,c
  1553  01FDB6  0EA0               	movlw	160
  1554  01FDB8  6E2B               	movwf	setup_AD7147@StageBuffer+8,c
  1555                           
  1556                           ;AD7147.c: 119: StageBuffer[5]=4000;
  1557  01FDBA  0E0F               	movlw	15
  1558  01FDBC  6E2E               	movwf	setup_AD7147@StageBuffer+11,c
  1559  01FDBE  0EA0               	movlw	160
  1560  01FDC0  6E2D               	movwf	setup_AD7147@StageBuffer+10,c
  1561                           
  1562                           ;AD7147.c: 120: StageBuffer[6]=4250;
  1563  01FDC2  0E10               	movlw	16
  1564  01FDC4  6E30               	movwf	setup_AD7147@StageBuffer+13,c
  1565  01FDC6  0E9A               	movlw	154
  1566  01FDC8  6E2F               	movwf	setup_AD7147@StageBuffer+12,c
  1567                           
  1568                           ;AD7147.c: 121: StageBuffer[7]=4250;
  1569  01FDCA  0E10               	movlw	16
  1570  01FDCC  6E32               	movwf	setup_AD7147@StageBuffer+15,c
  1571  01FDCE  0E9A               	movlw	154
  1572  01FDD0  6E31               	movwf	setup_AD7147@StageBuffer+14,c
  1573                           
  1574                           ;AD7147.c: 122: write_AD7147(0xB8, 8, StageBuffer);
  1575  01FDD2  0E00               	movlw	0
  1576  01FDD4  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1577  01FDD6  0EB8               	movlw	184
  1578  01FDD8  6E17               	movwf	write_AD7147@RegisterAddress,c
  1579  01FDDA  0E00               	movlw	0
  1580  01FDDC  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1581  01FDDE  0E08               	movlw	8
  1582  01FDE0  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1583  01FDE2  0E23               	movlw	low setup_AD7147@StageBuffer
  1584  01FDE4  6E1B               	movwf	write_AD7147@DataBuffer,c
  1585  01FDE6  0E00               	movlw	high setup_AD7147@StageBuffer
  1586  01FDE8  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1587  01FDEA  EC4D  F0FD         	call	_write_AD7147	;wreg free
  1588                           
  1589                           ;AD7147.c: 127: StageBuffer[0]=0x3FFF;
  1590  01FDEE  0E3F               	movlw	63
  1591  01FDF0  6E24               	movwf	setup_AD7147@StageBuffer+1,c
  1592  01FDF2  6823               	setf	setup_AD7147@StageBuffer,c
  1593                           
  1594                           ;AD7147.c: 128: StageBuffer[1]=0x1FFB;
  1595  01FDF4  0E1F               	movlw	31
  1596  01FDF6  6E26               	movwf	setup_AD7147@StageBuffer+3,c
  1597  01FDF8  0EFB               	movlw	251
  1598  01FDFA  6E25               	movwf	setup_AD7147@StageBuffer+2,c
  1599                           
  1600                           ;AD7147.c: 129: StageBuffer[2]=0x0100;
  1601  01FDFC  0E01               	movlw	1
  1602  01FDFE  6E28               	movwf	setup_AD7147@StageBuffer+5,c
  1603  01FE00  0E00               	movlw	0
  1604  01FE02  6E27               	movwf	setup_AD7147@StageBuffer+4,c
  1605                           
  1606                           ;AD7147.c: 130: StageBuffer[3]=0x2121;
  1607  01FE04  0E21               	movlw	33
  1608  01FE06  6E2A               	movwf	setup_AD7147@StageBuffer+7,c
  1609  01FE08  0E21               	movlw	33
  1610  01FE0A  6E29               	movwf	setup_AD7147@StageBuffer+6,c
  1611                           
  1612                           ;AD7147.c: 131: StageBuffer[4]=4000;
  1613  01FE0C  0E0F               	movlw	15
  1614  01FE0E  6E2C               	movwf	setup_AD7147@StageBuffer+9,c
  1615  01FE10  0EA0               	movlw	160
  1616  01FE12  6E2B               	movwf	setup_AD7147@StageBuffer+8,c
  1617                           
  1618                           ;AD7147.c: 132: StageBuffer[5]=4000;
  1619  01FE14  0E0F               	movlw	15
  1620  01FE16  6E2E               	movwf	setup_AD7147@StageBuffer+11,c
  1621  01FE18  0EA0               	movlw	160
  1622  01FE1A  6E2D               	movwf	setup_AD7147@StageBuffer+10,c
  1623                           
  1624                           ;AD7147.c: 133: StageBuffer[6]=4250;
  1625  01FE1C  0E10               	movlw	16
  1626  01FE1E  6E30               	movwf	setup_AD7147@StageBuffer+13,c
  1627  01FE20  0E9A               	movlw	154
  1628  01FE22  6E2F               	movwf	setup_AD7147@StageBuffer+12,c
  1629                           
  1630                           ;AD7147.c: 134: StageBuffer[7]=4250;
  1631  01FE24  0E10               	movlw	16
  1632  01FE26  6E32               	movwf	setup_AD7147@StageBuffer+15,c
  1633  01FE28  0E9A               	movlw	154
  1634  01FE2A  6E31               	movwf	setup_AD7147@StageBuffer+14,c
  1635                           
  1636                           ;AD7147.c: 135: write_AD7147(0xC0, 8, StageBuffer);
  1637  01FE2C  0E00               	movlw	0
  1638  01FE2E  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1639  01FE30  0EC0               	movlw	192
  1640  01FE32  6E17               	movwf	write_AD7147@RegisterAddress,c
  1641  01FE34  0E00               	movlw	0
  1642  01FE36  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1643  01FE38  0E08               	movlw	8
  1644  01FE3A  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1645  01FE3C  0E23               	movlw	low setup_AD7147@StageBuffer
  1646  01FE3E  6E1B               	movwf	write_AD7147@DataBuffer,c
  1647  01FE40  0E00               	movlw	high setup_AD7147@StageBuffer
  1648  01FE42  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1649  01FE44  EC4D  F0FD         	call	_write_AD7147	;wreg free
  1650                           
  1651                           ;AD7147.c: 140: StageBuffer[0]=0x3FFF;
  1652  01FE48  0E3F               	movlw	63
  1653  01FE4A  6E24               	movwf	setup_AD7147@StageBuffer+1,c
  1654  01FE4C  6823               	setf	setup_AD7147@StageBuffer,c
  1655                           
  1656                           ;AD7147.c: 141: StageBuffer[1]=0x1FEF;
  1657  01FE4E  0E1F               	movlw	31
  1658  01FE50  6E26               	movwf	setup_AD7147@StageBuffer+3,c
  1659  01FE52  0EEF               	movlw	239
  1660  01FE54  6E25               	movwf	setup_AD7147@StageBuffer+2,c
  1661                           
  1662                           ;AD7147.c: 142: StageBuffer[2]=0x0100;
  1663  01FE56  0E01               	movlw	1
  1664  01FE58  6E28               	movwf	setup_AD7147@StageBuffer+5,c
  1665  01FE5A  0E00               	movlw	0
  1666  01FE5C  6E27               	movwf	setup_AD7147@StageBuffer+4,c
  1667                           
  1668                           ;AD7147.c: 143: StageBuffer[3]=0x2121;
  1669  01FE5E  0E21               	movlw	33
  1670  01FE60  6E2A               	movwf	setup_AD7147@StageBuffer+7,c
  1671  01FE62  0E21               	movlw	33
  1672  01FE64  6E29               	movwf	setup_AD7147@StageBuffer+6,c
  1673                           
  1674                           ;AD7147.c: 144: StageBuffer[4]=4000;
  1675  01FE66  0E0F               	movlw	15
  1676  01FE68  6E2C               	movwf	setup_AD7147@StageBuffer+9,c
  1677  01FE6A  0EA0               	movlw	160
  1678  01FE6C  6E2B               	movwf	setup_AD7147@StageBuffer+8,c
  1679                           
  1680                           ;AD7147.c: 145: StageBuffer[5]=4000;
  1681  01FE6E  0E0F               	movlw	15
  1682  01FE70  6E2E               	movwf	setup_AD7147@StageBuffer+11,c
  1683  01FE72  0EA0               	movlw	160
  1684  01FE74  6E2D               	movwf	setup_AD7147@StageBuffer+10,c
  1685                           
  1686                           ;AD7147.c: 146: StageBuffer[6]=4250;
  1687  01FE76  0E10               	movlw	16
  1688  01FE78  6E30               	movwf	setup_AD7147@StageBuffer+13,c
  1689  01FE7A  0E9A               	movlw	154
  1690  01FE7C  6E2F               	movwf	setup_AD7147@StageBuffer+12,c
  1691                           
  1692                           ;AD7147.c: 147: StageBuffer[7]=4250;
  1693  01FE7E  0E10               	movlw	16
  1694  01FE80  6E32               	movwf	setup_AD7147@StageBuffer+15,c
  1695  01FE82  0E9A               	movlw	154
  1696  01FE84  6E31               	movwf	setup_AD7147@StageBuffer+14,c
  1697                           
  1698                           ;AD7147.c: 148: write_AD7147(0xC8, 8, StageBuffer);
  1699  01FE86  0E00               	movlw	0
  1700  01FE88  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1701  01FE8A  0EC8               	movlw	200
  1702  01FE8C  6E17               	movwf	write_AD7147@RegisterAddress,c
  1703  01FE8E  0E00               	movlw	0
  1704  01FE90  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1705  01FE92  0E08               	movlw	8
  1706  01FE94  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1707  01FE96  0E23               	movlw	low setup_AD7147@StageBuffer
  1708  01FE98  6E1B               	movwf	write_AD7147@DataBuffer,c
  1709  01FE9A  0E00               	movlw	high setup_AD7147@StageBuffer
  1710  01FE9C  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1711  01FE9E  EC4D  F0FD         	call	_write_AD7147	;wreg free
  1712                           
  1713                           ;AD7147.c: 153: StageBuffer[0]=0x3FFF;
  1714  01FEA2  0E3F               	movlw	63
  1715  01FEA4  6E24               	movwf	setup_AD7147@StageBuffer+1,c
  1716  01FEA6  6823               	setf	setup_AD7147@StageBuffer,c
  1717                           
  1718                           ;AD7147.c: 154: StageBuffer[1]=0x1FBF;
  1719  01FEA8  0E1F               	movlw	31
  1720  01FEAA  6E26               	movwf	setup_AD7147@StageBuffer+3,c
  1721  01FEAC  0EBF               	movlw	191
  1722  01FEAE  6E25               	movwf	setup_AD7147@StageBuffer+2,c
  1723                           
  1724                           ;AD7147.c: 155: StageBuffer[2]=0x0100;
  1725  01FEB0  0E01               	movlw	1
  1726  01FEB2  6E28               	movwf	setup_AD7147@StageBuffer+5,c
  1727  01FEB4  0E00               	movlw	0
  1728  01FEB6  6E27               	movwf	setup_AD7147@StageBuffer+4,c
  1729                           
  1730                           ;AD7147.c: 156: StageBuffer[3]=0x2121;
  1731  01FEB8  0E21               	movlw	33
  1732  01FEBA  6E2A               	movwf	setup_AD7147@StageBuffer+7,c
  1733  01FEBC  0E21               	movlw	33
  1734  01FEBE  6E29               	movwf	setup_AD7147@StageBuffer+6,c
  1735                           
  1736                           ;AD7147.c: 157: StageBuffer[4]=4000;
  1737  01FEC0  0E0F               	movlw	15
  1738  01FEC2  6E2C               	movwf	setup_AD7147@StageBuffer+9,c
  1739  01FEC4  0EA0               	movlw	160
  1740  01FEC6  6E2B               	movwf	setup_AD7147@StageBuffer+8,c
  1741                           
  1742                           ;AD7147.c: 158: StageBuffer[5]=4000;
  1743  01FEC8  0E0F               	movlw	15
  1744  01FECA  6E2E               	movwf	setup_AD7147@StageBuffer+11,c
  1745  01FECC  0EA0               	movlw	160
  1746  01FECE  6E2D               	movwf	setup_AD7147@StageBuffer+10,c
  1747                           
  1748                           ;AD7147.c: 159: StageBuffer[6]=4250;
  1749  01FED0  0E10               	movlw	16
  1750  01FED2  6E30               	movwf	setup_AD7147@StageBuffer+13,c
  1751  01FED4  0E9A               	movlw	154
  1752  01FED6  6E2F               	movwf	setup_AD7147@StageBuffer+12,c
  1753                           
  1754                           ;AD7147.c: 160: StageBuffer[7]=4250;
  1755  01FED8  0E10               	movlw	16
  1756  01FEDA  6E32               	movwf	setup_AD7147@StageBuffer+15,c
  1757  01FEDC  0E9A               	movlw	154
  1758  01FEDE  6E31               	movwf	setup_AD7147@StageBuffer+14,c
  1759                           
  1760                           ;AD7147.c: 161: write_AD7147(0xD0, 8, StageBuffer);
  1761  01FEE0  0E00               	movlw	0
  1762  01FEE2  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1763  01FEE4  0ED0               	movlw	208
  1764  01FEE6  6E17               	movwf	write_AD7147@RegisterAddress,c
  1765  01FEE8  0E00               	movlw	0
  1766  01FEEA  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1767  01FEEC  0E08               	movlw	8
  1768  01FEEE  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1769  01FEF0  0E23               	movlw	low setup_AD7147@StageBuffer
  1770  01FEF2  6E1B               	movwf	write_AD7147@DataBuffer,c
  1771  01FEF4  0E00               	movlw	high setup_AD7147@StageBuffer
  1772  01FEF6  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1773  01FEF8  EC4D  F0FD         	call	_write_AD7147	;wreg free
  1774                           
  1775                           ;AD7147.c: 166: StageBuffer[0]=0x3FFF;
  1776  01FEFC  0E3F               	movlw	63
  1777  01FEFE  6E24               	movwf	setup_AD7147@StageBuffer+1,c
  1778  01FF00  6823               	setf	setup_AD7147@StageBuffer,c
  1779                           
  1780                           ;AD7147.c: 167: StageBuffer[1]=0x1EFF;
  1781  01FF02  0E1E               	movlw	30
  1782  01FF04  6E26               	movwf	setup_AD7147@StageBuffer+3,c
  1783  01FF06  6825               	setf	setup_AD7147@StageBuffer+2,c
  1784                           
  1785                           ;AD7147.c: 168: StageBuffer[2]=0x0100;
  1786  01FF08  0E01               	movlw	1
  1787  01FF0A  6E28               	movwf	setup_AD7147@StageBuffer+5,c
  1788  01FF0C  0E00               	movlw	0
  1789  01FF0E  6E27               	movwf	setup_AD7147@StageBuffer+4,c
  1790                           
  1791                           ;AD7147.c: 169: StageBuffer[3]=0x2121;
  1792  01FF10  0E21               	movlw	33
  1793  01FF12  6E2A               	movwf	setup_AD7147@StageBuffer+7,c
  1794  01FF14  0E21               	movlw	33
  1795  01FF16  6E29               	movwf	setup_AD7147@StageBuffer+6,c
  1796                           
  1797                           ;AD7147.c: 170: StageBuffer[4]=4000;
  1798  01FF18  0E0F               	movlw	15
  1799  01FF1A  6E2C               	movwf	setup_AD7147@StageBuffer+9,c
  1800  01FF1C  0EA0               	movlw	160
  1801  01FF1E  6E2B               	movwf	setup_AD7147@StageBuffer+8,c
  1802                           
  1803                           ;AD7147.c: 171: StageBuffer[5]=4000;
  1804  01FF20  0E0F               	movlw	15
  1805  01FF22  6E2E               	movwf	setup_AD7147@StageBuffer+11,c
  1806  01FF24  0EA0               	movlw	160
  1807  01FF26  6E2D               	movwf	setup_AD7147@StageBuffer+10,c
  1808                           
  1809                           ;AD7147.c: 172: StageBuffer[6]=4250;
  1810  01FF28  0E10               	movlw	16
  1811  01FF2A  6E30               	movwf	setup_AD7147@StageBuffer+13,c
  1812  01FF2C  0E9A               	movlw	154
  1813  01FF2E  6E2F               	movwf	setup_AD7147@StageBuffer+12,c
  1814                           
  1815                           ;AD7147.c: 173: StageBuffer[7]=4250;
  1816  01FF30  0E10               	movlw	16
  1817  01FF32  6E32               	movwf	setup_AD7147@StageBuffer+15,c
  1818  01FF34  0E9A               	movlw	154
  1819  01FF36  6E31               	movwf	setup_AD7147@StageBuffer+14,c
  1820                           
  1821                           ;AD7147.c: 174: write_AD7147(0xD8, 8, StageBuffer);
  1822  01FF38  0E00               	movlw	0
  1823  01FF3A  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1824  01FF3C  0ED8               	movlw	216
  1825  01FF3E  6E17               	movwf	write_AD7147@RegisterAddress,c
  1826  01FF40  0E00               	movlw	0
  1827  01FF42  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1828  01FF44  0E08               	movlw	8
  1829  01FF46  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1830  01FF48  0E23               	movlw	low setup_AD7147@StageBuffer
  1831  01FF4A  6E1B               	movwf	write_AD7147@DataBuffer,c
  1832  01FF4C  0E00               	movlw	high setup_AD7147@StageBuffer
  1833  01FF4E  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1834  01FF50  EC4D  F0FD         	call	_write_AD7147	;wreg free
  1835                           
  1836                           ;AD7147.c: 181: AD7147Registers[0x000] = 0x02B2;
  1837  01FF54  0E02               	movlw	2
  1838  01FF56  0100               	movlb	0	; () banked
  1839  01FF58  6F79               	movwf	(_AD7147Registers+1)& (0+255),b
  1840  01FF5A  0EB2               	movlw	178
  1841  01FF5C  6F78               	movwf	_AD7147Registers& (0+255),b
  1842                           
  1843                           ; BSR set to: 0
  1844                           ;AD7147.c: 182: write_AD7147(0x000, 1, AD7147Registers[0x000]);
  1845  01FF5E  0E00               	movlw	0
  1846  01FF60  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1847  01FF62  0E00               	movlw	0
  1848  01FF64  6E17               	movwf	write_AD7147@RegisterAddress,c
  1849  01FF66  0E00               	movlw	0
  1850  01FF68  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1851  01FF6A  0E01               	movlw	1
  1852  01FF6C  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1853  01FF6E  C078  F01B         	movff	_AD7147Registers,write_AD7147@DataBuffer
  1854  01FF72  C079  F01C         	movff	_AD7147Registers+1,write_AD7147@DataBuffer+1
  1855  01FF76  EC4D  F0FD         	call	_write_AD7147	;wreg free
  1856                           
  1857                           ;AD7147.c: 187: AD7147Registers[0x002] = 0x3230;
  1858  01FF7A  0E32               	movlw	50
  1859  01FF7C  0100               	movlb	0	; () banked
  1860  01FF7E  6F7D               	movwf	(_AD7147Registers+5)& (0+255),b
  1861  01FF80  0E30               	movlw	48
  1862  01FF82  6F7C               	movwf	(_AD7147Registers+4)& (0+255),b
  1863                           
  1864                           ; BSR set to: 0
  1865                           ;AD7147.c: 188: AD7147Registers[0x003] = 0x0419;
  1866  01FF84  0E04               	movlw	4
  1867  01FF86  0100               	movlb	0	; () banked
  1868  01FF88  6F7F               	movwf	(_AD7147Registers+7)& (0+255),b
  1869  01FF8A  0E19               	movlw	25
  1870  01FF8C  6F7E               	movwf	(_AD7147Registers+6)& (0+255),b
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;AD7147.c: 189: AD7147Registers[0x004] = 0x0832;
  1874  01FF8E  0E08               	movlw	8
  1875  01FF90  0100               	movlb	0	; () banked
  1876  01FF92  6F81               	movwf	(_AD7147Registers+9)& (0+255),b
  1877  01FF94  0E32               	movlw	50
  1878  01FF96  6F80               	movwf	(_AD7147Registers+8)& (0+255),b
  1879                           
  1880                           ; BSR set to: 0
  1881                           ;AD7147.c: 191: AD7147Registers[0x005] = 0x0000;
  1882  01FF98  0E00               	movlw	0
  1883  01FF9A  0100               	movlb	0	; () banked
  1884  01FF9C  6F83               	movwf	(_AD7147Registers+11)& (0+255),b
  1885  01FF9E  0E00               	movlw	0
  1886  01FFA0  6F82               	movwf	(_AD7147Registers+10)& (0+255),b
  1887                           
  1888                           ; BSR set to: 0
  1889                           ;AD7147.c: 192: AD7147Registers[0x006] = 0x0000;
  1890  01FFA2  0E00               	movlw	0
  1891  01FFA4  0100               	movlb	0	; () banked
  1892  01FFA6  6F85               	movwf	(_AD7147Registers+13)& (0+255),b
  1893  01FFA8  0E00               	movlw	0
  1894  01FFAA  6F84               	movwf	(_AD7147Registers+12)& (0+255),b
  1895                           
  1896                           ; BSR set to: 0
  1897                           ;AD7147.c: 193: AD7147Registers[0x007] = 0x0001;
  1898  01FFAC  0E00               	movlw	0
  1899  01FFAE  0100               	movlb	0	; () banked
  1900  01FFB0  6F87               	movwf	(_AD7147Registers+15)& (0+255),b
  1901  01FFB2  0E01               	movlw	1
  1902  01FFB4  6F86               	movwf	(_AD7147Registers+14)& (0+255),b
  1903                           
  1904                           ; BSR set to: 0
  1905                           ;AD7147.c: 194: write_AD7147(0x002, 6, AD7147Registers);
  1906  01FFB6  0E00               	movlw	0
  1907  01FFB8  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1908  01FFBA  0E02               	movlw	2
  1909  01FFBC  6E17               	movwf	write_AD7147@RegisterAddress,c
  1910  01FFBE  0E00               	movlw	0
  1911  01FFC0  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1912  01FFC2  0E06               	movlw	6
  1913  01FFC4  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1914  01FFC6  0E78               	movlw	low _AD7147Registers
  1915  01FFC8  6E1B               	movwf	write_AD7147@DataBuffer,c
  1916  01FFCA  0E00               	movlw	high _AD7147Registers
  1917  01FFCC  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1918  01FFCE  EC4D  F0FD         	call	_write_AD7147	;wreg free
  1919                           
  1920                           ;AD7147.c: 197: AD7147Registers[0x001] = 0x0FFF;
  1921  01FFD2  0E0F               	movlw	15
  1922  01FFD4  0100               	movlb	0	; () banked
  1923  01FFD6  6F7B               	movwf	(_AD7147Registers+3)& (0+255),b
  1924  01FFD8  697A               	setf	(_AD7147Registers+2)& (0+255),b
  1925                           
  1926                           ; BSR set to: 0
  1927                           ;AD7147.c: 198: write_AD7147(0x001, 1, AD7147Registers);
  1928  01FFDA  0E00               	movlw	0
  1929  01FFDC  6E18               	movwf	write_AD7147@RegisterAddress+1,c
  1930  01FFDE  0E01               	movlw	1
  1931  01FFE0  6E17               	movwf	write_AD7147@RegisterAddress,c
  1932  01FFE2  0E00               	movlw	0
  1933  01FFE4  6E1A               	movwf	write_AD7147@NumberOfRegisters+1,c
  1934  01FFE6  0E01               	movlw	1
  1935  01FFE8  6E19               	movwf	write_AD7147@NumberOfRegisters,c
  1936  01FFEA  0E78               	movlw	low _AD7147Registers
  1937  01FFEC  6E1B               	movwf	write_AD7147@DataBuffer,c
  1938  01FFEE  0E00               	movlw	high _AD7147Registers
  1939  01FFF0  6E1C               	movwf	write_AD7147@DataBuffer+1,c
  1940  01FFF2  EC4D  F0FD         	call	_write_AD7147	;wreg free
  1941  01FFF6  0012               	return		;funcret
  1942  01FFF8                     __end_of_setup_AD7147:
  1943                           	opt stack 0
  1944                           tblptru	equ	0xFF8
  1945                           tblptrh	equ	0xFF7
  1946                           tblptrl	equ	0xFF6
  1947                           tablat	equ	0xFF5
  1948                           postinc0	equ	0xFEE
  1949                           wreg	equ	0xFE8
  1950                           postdec1	equ	0xFE5
  1951                           fsr1l	equ	0xFE1
  1952                           status	equ	0xFD8
  1953                           
  1954 ;; *************** function _write_AD7147 *****************
  1955 ;; Defined at:
  1956 ;;		line 204 in file "AD7147.c"
  1957 ;; Parameters:    Size  Location     Type
  1958 ;;  RegisterAddr    2   22[COMRAM] const unsigned int 
  1959 ;;  NumberOfRegi    2   24[COMRAM] unsigned int 
  1960 ;;  DataBuffer      2   26[COMRAM] PTR unsigned int 
  1961 ;;		 -> RAM(3935), AD7147Registers(46), setup_AD7147@StageBuffer(16), 
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;  i               2   32[COMRAM] int 
  1964 ;;  enable_word     2   30[COMRAM] unsigned int 
  1965 ;;  Register_Val    0   30[COMRAM] unsigned int [0]
  1966 ;; Return value:  Size  Location     Type
  1967 ;;                  1    wreg      void 
  1968 ;; Registers used:
  1969 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1970 ;; Tracked objects:
  1971 ;;		On entry : 0/0
  1972 ;;		On exit  : 0/0
  1973 ;;		Unchanged: 0/0
  1974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1975 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1976 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1977 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1978 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1979 ;;Total ram usage:       12 bytes
  1980 ;; Hardware stack levels used:    1
  1981 ;; Hardware stack levels required when called:    1
  1982 ;; This function calls:
  1983 ;;		_w32_spi
  1984 ;; This function is called by:
  1985 ;;		_setup_AD7147
  1986 ;; This function uses a non-reentrant model
  1987 ;;
  1988                           
  1989                           	psect	text10
  1990  01FA9A                     __ptext10:
  1991                           	opt stack 0
  1992  01FA9A                     _write_AD7147:
  1993                           	opt stack 28
  1994                           
  1995                           ;AD7147.c: 206: unsigned int Register_Values[];
  1996                           ;AD7147.c: 207: unsigned int enable_word = 0xE000;
  1997                           
  1998                           ;incstack = 0
  1999  01FA9A  0EE0               	movlw	224
  2000  01FA9C  6E20               	movwf	write_AD7147@enable_word+1,c
  2001  01FA9E  0E00               	movlw	0
  2002  01FAA0  6E1F               	movwf	write_AD7147@enable_word,c
  2003                           
  2004                           ;AD7147.c: 210: for (int i=0; i<NumberOfRegisters; i++)
  2005  01FAA2  0E00               	movlw	0
  2006  01FAA4  6E22               	movwf	write_AD7147@i+1,c
  2007  01FAA6  0E00               	movlw	0
  2008  01FAA8  6E21               	movwf	write_AD7147@i,c
  2009  01FAAA  D035               	goto	l1305
  2010  01FAAC                     l1299:
  2011                           
  2012                           ;AD7147.c: 211: {
  2013                           ;AD7147.c: 213: Register_Values[i] = enable_word + (RegisterAddress+i);
  2014  01FAAC  5017               	movf	write_AD7147@RegisterAddress,w,c
  2015  01FAAE  2421               	addwf	write_AD7147@i,w,c
  2016  01FAB0  6E1D               	movwf	??_write_AD7147& (0+255),c
  2017  01FAB2  5018               	movf	write_AD7147@RegisterAddress+1,w,c
  2018  01FAB4  2022               	addwfc	write_AD7147@i+1,w,c
  2019  01FAB6  6E1E               	movwf	(??_write_AD7147+1)& (0+255),c
  2020  01FAB8  501F               	movf	write_AD7147@enable_word,w,c
  2021  01FABA  261D               	addwf	??_write_AD7147,f,c
  2022  01FABC  5020               	movf	write_AD7147@enable_word+1,w,c
  2023  01FABE  221E               	addwfc	??_write_AD7147+1,f,c
  2024  01FAC0  90D8               	bcf	status,0,c
  2025  01FAC2  3421               	rlcf	write_AD7147@i,w,c
  2026  01FAC4  6ED9               	movwf	fsr2l,c
  2027  01FAC6  3422               	rlcf	write_AD7147@i+1,w,c
  2028  01FAC8  6EDA               	movwf	fsr2h,c
  2029  01FACA  0E1F               	movlw	low write_AD7147@Register_Values
  2030  01FACC  26D9               	addwf	fsr2l,f,c
  2031  01FACE  0E00               	movlw	high write_AD7147@Register_Values
  2032  01FAD0  22DA               	addwfc	fsr2h,f,c
  2033  01FAD2  C01D  FFDE         	movff	??_write_AD7147,postinc2
  2034  01FAD6  C01E  FFDD         	movff	??_write_AD7147+1,postdec2
  2035                           
  2036                           ;AD7147.c: 214: w32_spi(Register_Values[i],DataBuffer[i]);
  2037  01FADA  90D8               	bcf	status,0,c
  2038  01FADC  3421               	rlcf	write_AD7147@i,w,c
  2039  01FADE  6ED9               	movwf	fsr2l,c
  2040  01FAE0  3422               	rlcf	write_AD7147@i+1,w,c
  2041  01FAE2  6EDA               	movwf	fsr2h,c
  2042  01FAE4  0E1F               	movlw	low write_AD7147@Register_Values
  2043  01FAE6  26D9               	addwf	fsr2l,f,c
  2044  01FAE8  0E00               	movlw	high write_AD7147@Register_Values
  2045  01FAEA  22DA               	addwfc	fsr2h,f,c
  2046  01FAEC  CFDE F001          	movff	postinc2,w32_spi@address
  2047  01FAF0  CFDD F002          	movff	postdec2,w32_spi@address+1
  2048  01FAF4  90D8               	bcf	status,0,c
  2049  01FAF6  3421               	rlcf	write_AD7147@i,w,c
  2050  01FAF8  6ED9               	movwf	fsr2l,c
  2051  01FAFA  3422               	rlcf	write_AD7147@i+1,w,c
  2052  01FAFC  6EDA               	movwf	fsr2h,c
  2053  01FAFE  501B               	movf	write_AD7147@DataBuffer,w,c
  2054  01FB00  26D9               	addwf	fsr2l,f,c
  2055  01FB02  501C               	movf	write_AD7147@DataBuffer+1,w,c
  2056  01FB04  22DA               	addwfc	fsr2h,f,c
  2057  01FB06  CFDE F003          	movff	postinc2,w32_spi@data
  2058  01FB0A  CFDD F004          	movff	postdec2,w32_spi@data+1
  2059  01FB0E  EC4F  F0FC         	call	_w32_spi	;wreg free
  2060  01FB12  4A21               	infsnz	write_AD7147@i,f,c
  2061  01FB14  2A22               	incf	write_AD7147@i+1,f,c
  2062  01FB16                     l1305:
  2063  01FB16  5019               	movf	write_AD7147@NumberOfRegisters,w,c
  2064  01FB18  5C21               	subwf	write_AD7147@i,w,c
  2065  01FB1A  501A               	movf	write_AD7147@NumberOfRegisters+1,w,c
  2066  01FB1C  5822               	subwfb	write_AD7147@i+1,w,c
  2067  01FB1E  B0D8               	btfsc	status,0,c
  2068  01FB20  0012               	return	
  2069  01FB22  D7C4               	goto	l1299
  2070  01FB24                     __end_of_write_AD7147:
  2071                           	opt stack 0
  2072                           tblptru	equ	0xFF8
  2073                           tblptrh	equ	0xFF7
  2074                           tblptrl	equ	0xFF6
  2075                           tablat	equ	0xFF5
  2076                           postinc0	equ	0xFEE
  2077                           wreg	equ	0xFE8
  2078                           postdec1	equ	0xFE5
  2079                           fsr1l	equ	0xFE1
  2080                           postinc2	equ	0xFDE
  2081                           postdec2	equ	0xFDD
  2082                           fsr2h	equ	0xFDA
  2083                           fsr2l	equ	0xFD9
  2084                           status	equ	0xFD8
  2085                           
  2086 ;; *************** function _w32_spi *****************
  2087 ;; Defined at:
  2088 ;;		line 26 in file "spi.c"
  2089 ;; Parameters:    Size  Location     Type
  2090 ;;  address         2    0[COMRAM] unsigned int 
  2091 ;;  data            2    2[COMRAM] unsigned int 
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;  data_high       2   20[COMRAM] unsigned int 
  2094 ;;  data_low        2   18[COMRAM] unsigned int 
  2095 ;;  address_high    2   16[COMRAM] unsigned int 
  2096 ;;  address_low     2   14[COMRAM] unsigned int 
  2097 ;;  p4              2   12[COMRAM] unsigned int 
  2098 ;;  p3              2   10[COMRAM] unsigned int 
  2099 ;;  p2              2    8[COMRAM] unsigned int 
  2100 ;;  p1              2    6[COMRAM] unsigned int 
  2101 ;; Return value:  Size  Location     Type
  2102 ;;                  1    wreg      void 
  2103 ;; Registers used:
  2104 ;;		wreg, status,2
  2105 ;; Tracked objects:
  2106 ;;		On entry : 0/0
  2107 ;;		On exit  : 0/0
  2108 ;;		Unchanged: 0/0
  2109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2110 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2111 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2112 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2113 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2114 ;;Total ram usage:       22 bytes
  2115 ;; Hardware stack levels used:    1
  2116 ;; This function calls:
  2117 ;;		Nothing
  2118 ;; This function is called by:
  2119 ;;		_write_AD7147
  2120 ;; This function uses a non-reentrant model
  2121 ;;
  2122                           
  2123                           	psect	text11
  2124  01F89E                     __ptext11:
  2125                           	opt stack 0
  2126  01F89E                     _w32_spi:
  2127                           	opt stack 28
  2128                           
  2129                           ;spi.c: 28: unsigned int address_low, address_high, data_low, data_high;
  2130                           ;spi.c: 30: address_low = address & 0xFF;
  2131                           
  2132                           ;incstack = 0
  2133  01F89E  5001               	movf	w32_spi@address,w,c
  2134  01F8A0  6E0F               	movwf	w32_spi@address_low,c
  2135  01F8A2  6A10               	clrf	w32_spi@address_low+1,c
  2136                           
  2137                           ;spi.c: 31: address_high = (address >> 8) & 0xFF;
  2138  01F8A4  C001  F005         	movff	w32_spi@address,??_w32_spi
  2139  01F8A8  C002  F006         	movff	w32_spi@address+1,??_w32_spi+1
  2140  01F8AC  C006  F005         	movff	??_w32_spi+1,??_w32_spi
  2141  01F8B0  6A06               	clrf	??_w32_spi+1,c
  2142  01F8B2  5005               	movf	??_w32_spi,w,c
  2143  01F8B4  6E11               	movwf	w32_spi@address_high,c
  2144  01F8B6  6A12               	clrf	w32_spi@address_high+1,c
  2145                           
  2146                           ;spi.c: 33: data_low = data & 0xFF;
  2147  01F8B8  5003               	movf	w32_spi@data,w,c
  2148  01F8BA  6E13               	movwf	w32_spi@data_low,c
  2149  01F8BC  6A14               	clrf	w32_spi@data_low+1,c
  2150                           
  2151                           ;spi.c: 34: data_high = (data >> 8) & 0xFF;;
  2152  01F8BE  C003  F005         	movff	w32_spi@data,??_w32_spi
  2153  01F8C2  C004  F006         	movff	w32_spi@data+1,??_w32_spi+1
  2154  01F8C6  C006  F005         	movff	??_w32_spi+1,??_w32_spi
  2155  01F8CA  6A06               	clrf	??_w32_spi+1,c
  2156  01F8CC  5005               	movf	??_w32_spi,w,c
  2157  01F8CE  6E15               	movwf	w32_spi@data_high,c
  2158  01F8D0  6A16               	clrf	w32_spi@data_high+1,c
  2159                           
  2160                           ;spi.c: 36: SSP1BUF = address_high;
  2161  01F8D2  C011  FFC9         	movff	w32_spi@address_high,4041	;volatile
  2162  01F8D6                     l166:
  2163  01F8D6  A0C7               	btfss	4039,0,c	;volatile
  2164  01F8D8  D7FE               	goto	l166
  2165                           
  2166                           ;spi.c: 38: unsigned int p1 = SSP1BUF;
  2167  01F8DA  CFC9 F007          	movff	4041,w32_spi@p1	;volatile
  2168  01F8DE  6A08               	clrf	w32_spi@p1+1,c
  2169                           
  2170                           ;spi.c: 40: SSP1BUF = address_low;
  2171  01F8E0  C00F  FFC9         	movff	w32_spi@address_low,4041	;volatile
  2172  01F8E4                     l169:
  2173  01F8E4  A0C7               	btfss	4039,0,c	;volatile
  2174  01F8E6  D7FE               	goto	l169
  2175                           
  2176                           ;spi.c: 42: unsigned int p2 = SSP1BUF;
  2177  01F8E8  CFC9 F009          	movff	4041,w32_spi@p2	;volatile
  2178  01F8EC  6A0A               	clrf	w32_spi@p2+1,c
  2179                           
  2180                           ;spi.c: 44: SSP1BUF = data_high;
  2181  01F8EE  C015  FFC9         	movff	w32_spi@data_high,4041	;volatile
  2182  01F8F2                     l172:
  2183  01F8F2  A0C7               	btfss	4039,0,c	;volatile
  2184  01F8F4  D7FE               	goto	l172
  2185                           
  2186                           ;spi.c: 46: unsigned int p3 = SSP1BUF;
  2187  01F8F6  CFC9 F00B          	movff	4041,w32_spi@p3	;volatile
  2188  01F8FA  6A0C               	clrf	w32_spi@p3+1,c
  2189                           
  2190                           ;spi.c: 48: SSP1BUF = data_low;
  2191  01F8FC  C013  FFC9         	movff	w32_spi@data_low,4041	;volatile
  2192  01F900                     l175:
  2193  01F900  A0C7               	btfss	4039,0,c	;volatile
  2194  01F902  D7FE               	goto	l175
  2195                           
  2196                           ;spi.c: 50: unsigned int p4 = SSP1BUF;
  2197  01F904  CFC9 F00D          	movff	4041,w32_spi@p4	;volatile
  2198  01F908  6A0E               	clrf	w32_spi@p4+1,c
  2199  01F90A  0012               	return		;funcret
  2200  01F90C                     __end_of_w32_spi:
  2201                           	opt stack 0
  2202                           tblptru	equ	0xFF8
  2203                           tblptrh	equ	0xFF7
  2204                           tblptrl	equ	0xFF6
  2205                           tablat	equ	0xFF5
  2206                           postinc0	equ	0xFEE
  2207                           wreg	equ	0xFE8
  2208                           postdec1	equ	0xFE5
  2209                           fsr1l	equ	0xFE1
  2210                           postinc2	equ	0xFDE
  2211                           postdec2	equ	0xFDD
  2212                           fsr2h	equ	0xFDA
  2213                           fsr2l	equ	0xFD9
  2214                           status	equ	0xFD8
  2215                           
  2216 ;; *************** function _read_sensor *****************
  2217 ;; Defined at:
  2218 ;;		line 238 in file "AD7147.c"
  2219 ;; Parameters:    Size  Location     Type
  2220 ;;  sensor          2   22[COMRAM] int 
  2221 ;; Auto vars:     Size  Location     Type
  2222 ;;  sensor_value    2   26[COMRAM] unsigned int 
  2223 ;;  register1       2   24[COMRAM] unsigned int 
  2224 ;; Return value:  Size  Location     Type
  2225 ;;                  2   22[COMRAM] unsigned int 
  2226 ;; Registers used:
  2227 ;;		wreg, status,2, status,0, cstack
  2228 ;; Tracked objects:
  2229 ;;		On entry : 0/0
  2230 ;;		On exit  : 0/0
  2231 ;;		Unchanged: 0/0
  2232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2233 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2234 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2236 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2237 ;;Total ram usage:        6 bytes
  2238 ;; Hardware stack levels used:    1
  2239 ;; Hardware stack levels required when called:    1
  2240 ;; This function calls:
  2241 ;;		_w16_r16_spi
  2242 ;; This function is called by:
  2243 ;;		_main
  2244 ;; This function uses a non-reentrant model
  2245 ;;
  2246                           
  2247                           	psect	text12
  2248  01F7D6                     __ptext12:
  2249                           	opt stack 0
  2250  01F7D6                     _read_sensor:
  2251                           	opt stack 29
  2252                           
  2253                           ;AD7147.c: 241: unsigned int register1 = 0x00B;
  2254                           
  2255                           ;incstack = 0
  2256  01F7D6  0E00               	movlw	0
  2257  01F7D8  6E1A               	movwf	read_sensor@register1+1,c
  2258  01F7DA  0E0B               	movlw	11
  2259  01F7DC  6E19               	movwf	read_sensor@register1,c
  2260                           
  2261                           ;AD7147.c: 242: unsigned int sensor_value = w16_r16_spi(register1);
  2262  01F7DE  C019  F001         	movff	read_sensor@register1,w16_r16_spi@address
  2263  01F7E2  C01A  F002         	movff	read_sensor@register1+1,w16_r16_spi@address+1
  2264  01F7E6  EC86  F0FC         	call	_w16_r16_spi	;wreg free
  2265  01F7EA  C001  F01B         	movff	?_w16_r16_spi,read_sensor@sensor_value
  2266  01F7EE  C002  F01C         	movff	?_w16_r16_spi+1,read_sensor@sensor_value+1
  2267                           
  2268                           ;AD7147.c: 249: return sensor_value;
  2269  01F7F2  C01B  F017         	movff	read_sensor@sensor_value,?_read_sensor
  2270  01F7F6  C01C  F018         	movff	read_sensor@sensor_value+1,?_read_sensor+1
  2271  01F7FA  0012               	return	
  2272  01F7FC                     __end_of_read_sensor:
  2273                           	opt stack 0
  2274                           tblptru	equ	0xFF8
  2275                           tblptrh	equ	0xFF7
  2276                           tblptrl	equ	0xFF6
  2277                           tablat	equ	0xFF5
  2278                           postinc0	equ	0xFEE
  2279                           wreg	equ	0xFE8
  2280                           postdec1	equ	0xFE5
  2281                           fsr1l	equ	0xFE1
  2282                           postinc2	equ	0xFDE
  2283                           postdec2	equ	0xFDD
  2284                           fsr2h	equ	0xFDA
  2285                           fsr2l	equ	0xFD9
  2286                           status	equ	0xFD8
  2287                           
  2288 ;; *************** function _get_ID *****************
  2289 ;; Defined at:
  2290 ;;		line 304 in file "AD7147.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;		None
  2293 ;; Auto vars:     Size  Location     Type
  2294 ;;  result          2   25[COMRAM] unsigned int 
  2295 ;; Return value:  Size  Location     Type
  2296 ;;                  2   22[COMRAM] unsigned int 
  2297 ;; Registers used:
  2298 ;;		wreg, status,2, status,0, cstack
  2299 ;; Tracked objects:
  2300 ;;		On entry : 0/0
  2301 ;;		On exit  : 0/0
  2302 ;;		Unchanged: 0/0
  2303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2304 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2305 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2306 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2307 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2308 ;;Total ram usage:        5 bytes
  2309 ;; Hardware stack levels used:    1
  2310 ;; Hardware stack levels required when called:    1
  2311 ;; This function calls:
  2312 ;;		_w16_r16_spi
  2313 ;; This function is called by:
  2314 ;;		_main
  2315 ;; This function uses a non-reentrant model
  2316 ;;
  2317                           
  2318                           	psect	text13
  2319  01F7FC                     __ptext13:
  2320                           	opt stack 0
  2321  01F7FC                     _get_ID:
  2322                           	opt stack 29
  2323                           
  2324                           ;AD7147.c: 306: unsigned int result = (w16_r16_spi(0xE400 + 0x017) & 0b1111111111110000)
      +                           >> 4;
  2325                           
  2326                           ;incstack = 0
  2327  01F7FC  0EE4               	movlw	228
  2328  01F7FE  6E02               	movwf	w16_r16_spi@address+1,c
  2329  01F800  0E17               	movlw	23
  2330  01F802  6E01               	movwf	w16_r16_spi@address,c
  2331  01F804  EC86  F0FC         	call	_w16_r16_spi	;wreg free
  2332  01F808  0E04               	movlw	4
  2333  01F80A  6E19               	movwf	??_get_ID& (0+255),c
  2334  01F80C                     u565:
  2335  01F80C  90D8               	bcf	status,0,c
  2336  01F80E  3202               	rrcf	?_w16_r16_spi+1,f,c
  2337  01F810  3201               	rrcf	?_w16_r16_spi,f,c
  2338  01F812  2E19               	decfsz	??_get_ID& (0+255),f,c
  2339  01F814  D7FB               	goto	u565
  2340  01F816  0EFF               	movlw	255
  2341  01F818  1401               	andwf	?_w16_r16_spi,w,c
  2342  01F81A  6E1A               	movwf	get_ID@result,c
  2343  01F81C  0E0F               	movlw	15
  2344  01F81E  1402               	andwf	?_w16_r16_spi+1,w,c
  2345  01F820  6E1B               	movwf	get_ID@result+1,c
  2346                           
  2347                           ;AD7147.c: 307: return result;
  2348  01F822  C01A  F017         	movff	get_ID@result,?_get_ID
  2349  01F826  C01B  F018         	movff	get_ID@result+1,?_get_ID+1
  2350  01F82A  0012               	return	
  2351  01F82C                     __end_of_get_ID:
  2352                           	opt stack 0
  2353                           tblptru	equ	0xFF8
  2354                           tblptrh	equ	0xFF7
  2355                           tblptrl	equ	0xFF6
  2356                           tablat	equ	0xFF5
  2357                           postinc0	equ	0xFEE
  2358                           wreg	equ	0xFE8
  2359                           postdec1	equ	0xFE5
  2360                           fsr1l	equ	0xFE1
  2361                           postinc2	equ	0xFDE
  2362                           postdec2	equ	0xFDD
  2363                           fsr2h	equ	0xFDA
  2364                           fsr2l	equ	0xFD9
  2365                           status	equ	0xFD8
  2366                           
  2367 ;; *************** function _w16_r16_spi *****************
  2368 ;; Defined at:
  2369 ;;		line 96 in file "spi.c"
  2370 ;; Parameters:    Size  Location     Type
  2371 ;;  address         2    0[COMRAM] unsigned int 
  2372 ;; Auto vars:     Size  Location     Type
  2373 ;;  p4              2   20[COMRAM] unsigned int 
  2374 ;;  p3              2   18[COMRAM] unsigned int 
  2375 ;;  blank_high      2   16[COMRAM] unsigned int 
  2376 ;;  blank_low       2   14[COMRAM] unsigned int 
  2377 ;;  result          2   12[COMRAM] unsigned int 
  2378 ;;  address_high    2   10[COMRAM] unsigned int 
  2379 ;;  address_low     2    8[COMRAM] unsigned int 
  2380 ;;  p2              2    6[COMRAM] unsigned int 
  2381 ;;  p1              2    4[COMRAM] unsigned int 
  2382 ;; Return value:  Size  Location     Type
  2383 ;;                  2    0[COMRAM] unsigned int 
  2384 ;; Registers used:
  2385 ;;		wreg, status,2, status,0
  2386 ;; Tracked objects:
  2387 ;;		On entry : 0/0
  2388 ;;		On exit  : 0/0
  2389 ;;		Unchanged: 0/0
  2390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2391 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2392 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2393 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2394 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2395 ;;Total ram usage:       22 bytes
  2396 ;; Hardware stack levels used:    1
  2397 ;; This function calls:
  2398 ;;		Nothing
  2399 ;; This function is called by:
  2400 ;;		_read_sensor
  2401 ;;		_get_ID
  2402 ;; This function uses a non-reentrant model
  2403 ;;
  2404                           
  2405                           	psect	text14
  2406  01F90C                     __ptext14:
  2407                           	opt stack 0
  2408  01F90C                     _w16_r16_spi:
  2409                           	opt stack 29
  2410                           
  2411                           ;spi.c: 98: unsigned int address_low, address_high, result;
  2412                           ;spi.c: 99: unsigned int blank_low = 0x000;
  2413                           
  2414                           ;incstack = 0
  2415  01F90C  0E00               	movlw	0
  2416  01F90E  6E10               	movwf	w16_r16_spi@blank_low+1,c
  2417  01F910  0E00               	movlw	0
  2418  01F912  6E0F               	movwf	w16_r16_spi@blank_low,c
  2419                           
  2420                           ;spi.c: 100: unsigned int blank_high = 0x000;
  2421  01F914  0E00               	movlw	0
  2422  01F916  6E12               	movwf	w16_r16_spi@blank_high+1,c
  2423  01F918  0E00               	movlw	0
  2424  01F91A  6E11               	movwf	w16_r16_spi@blank_high,c
  2425                           
  2426                           ;spi.c: 101: unsigned int p1, p2, p3, p4;
  2427                           ;spi.c: 103: address_low = address & 0xFF;
  2428  01F91C  5001               	movf	w16_r16_spi@address,w,c
  2429  01F91E  6E09               	movwf	w16_r16_spi@address_low,c
  2430  01F920  6A0A               	clrf	w16_r16_spi@address_low+1,c
  2431                           
  2432                           ;spi.c: 104: address_high = (address >> 8) & 0xFF;
  2433  01F922  C001  F003         	movff	w16_r16_spi@address,??_w16_r16_spi
  2434  01F926  C002  F004         	movff	w16_r16_spi@address+1,??_w16_r16_spi+1
  2435  01F92A  C004  F003         	movff	??_w16_r16_spi+1,??_w16_r16_spi
  2436  01F92E  6A04               	clrf	??_w16_r16_spi+1,c
  2437  01F930  5003               	movf	??_w16_r16_spi,w,c
  2438  01F932  6E0B               	movwf	w16_r16_spi@address_high,c
  2439  01F934  6A0C               	clrf	w16_r16_spi@address_high+1,c
  2440                           
  2441                           ;spi.c: 107: PORTCbits.RC2 = 0;
  2442  01F936  9482               	bcf	3970,2,c	;volatile
  2443                           
  2444                           ;spi.c: 110: SSP1BUF = address_high;
  2445  01F938  C00B  FFC9         	movff	w16_r16_spi@address_high,4041	;volatile
  2446  01F93C                     l199:
  2447  01F93C  A0C7               	btfss	4039,0,c	;volatile
  2448  01F93E  D7FE               	goto	l199
  2449                           
  2450                           ;spi.c: 112: p1 = SSP1BUF;
  2451  01F940  CFC9 F005          	movff	4041,w16_r16_spi@p1	;volatile
  2452  01F944  6A06               	clrf	w16_r16_spi@p1+1,c
  2453                           
  2454                           ;spi.c: 114: SSP1BUF = address_low;
  2455  01F946  C009  FFC9         	movff	w16_r16_spi@address_low,4041	;volatile
  2456  01F94A                     l202:
  2457  01F94A  A0C7               	btfss	4039,0,c	;volatile
  2458  01F94C  D7FE               	goto	l202
  2459                           
  2460                           ;spi.c: 116: p2 = SSP1BUF;
  2461  01F94E  CFC9 F007          	movff	4041,w16_r16_spi@p2	;volatile
  2462  01F952  6A08               	clrf	w16_r16_spi@p2+1,c
  2463                           
  2464                           ;spi.c: 118: SSP1BUF = blank_high;
  2465  01F954  C011  FFC9         	movff	w16_r16_spi@blank_high,4041	;volatile
  2466  01F958                     l205:
  2467  01F958  A0C7               	btfss	4039,0,c	;volatile
  2468  01F95A  D7FE               	goto	l205
  2469                           
  2470                           ;spi.c: 120: p3 = SSP1BUF;
  2471  01F95C  CFC9 F013          	movff	4041,w16_r16_spi@p3	;volatile
  2472  01F960  6A14               	clrf	w16_r16_spi@p3+1,c
  2473                           
  2474                           ;spi.c: 122: SSP1BUF = blank_low;
  2475  01F962  C00F  FFC9         	movff	w16_r16_spi@blank_low,4041	;volatile
  2476  01F966                     l208:
  2477  01F966  A0C7               	btfss	4039,0,c	;volatile
  2478  01F968  D7FE               	goto	l208
  2479                           
  2480                           ;spi.c: 124: p4 = SSP1BUF;
  2481  01F96A  CFC9 F015          	movff	4041,w16_r16_spi@p4	;volatile
  2482  01F96E  6A16               	clrf	w16_r16_spi@p4+1,c
  2483                           
  2484                           ;spi.c: 126: PORTCbits.RC2 = 1;
  2485  01F970  8482               	bsf	3970,2,c	;volatile
  2486                           
  2487                           ;spi.c: 128: result = (p3 << 8) + p4;
  2488  01F972  5013               	movf	w16_r16_spi@p3,w,c
  2489  01F974  6E04               	movwf	(??_w16_r16_spi+1)& (0+255),c
  2490  01F976  6A03               	clrf	??_w16_r16_spi& (0+255),c
  2491  01F978  5015               	movf	w16_r16_spi@p4,w,c
  2492  01F97A  2403               	addwf	??_w16_r16_spi,w,c
  2493  01F97C  6E0D               	movwf	w16_r16_spi@result,c
  2494  01F97E  5016               	movf	w16_r16_spi@p4+1,w,c
  2495  01F980  2004               	addwfc	??_w16_r16_spi+1,w,c
  2496  01F982  6E0E               	movwf	w16_r16_spi@result+1,c
  2497                           
  2498                           ;spi.c: 129: return result;
  2499  01F984  C00D  F001         	movff	w16_r16_spi@result,?_w16_r16_spi
  2500  01F988  C00E  F002         	movff	w16_r16_spi@result+1,?_w16_r16_spi+1
  2501  01F98C  0012               	return	
  2502  01F98E                     __end_of_w16_r16_spi:
  2503                           	opt stack 0
  2504                           tblptru	equ	0xFF8
  2505                           tblptrh	equ	0xFF7
  2506                           tblptrl	equ	0xFF6
  2507                           tablat	equ	0xFF5
  2508                           postinc0	equ	0xFEE
  2509                           wreg	equ	0xFE8
  2510                           postdec1	equ	0xFE5
  2511                           fsr1l	equ	0xFE1
  2512                           postinc2	equ	0xFDE
  2513                           postdec2	equ	0xFDD
  2514                           fsr2h	equ	0xFDA
  2515                           fsr2l	equ	0xFD9
  2516                           status	equ	0xFD8
  2517                           
  2518 ;; *************** function _delay_ms *****************
  2519 ;; Defined at:
  2520 ;;		line 78 in file "micro_setup.c"
  2521 ;; Parameters:    Size  Location     Type
  2522 ;;  n               2    8[COMRAM] int 
  2523 ;; Auto vars:     Size  Location     Type
  2524 ;;  j               2   11[COMRAM] int 
  2525 ;; Return value:  Size  Location     Type
  2526 ;;                  1    wreg      void 
  2527 ;; Registers used:
  2528 ;;		wreg, status,2, status,0, cstack
  2529 ;; Tracked objects:
  2530 ;;		On entry : 0/0
  2531 ;;		On exit  : 0/0
  2532 ;;		Unchanged: 0/0
  2533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2534 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2535 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2536 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2537 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2538 ;;Total ram usage:        5 bytes
  2539 ;; Hardware stack levels used:    1
  2540 ;; Hardware stack levels required when called:    1
  2541 ;; This function calls:
  2542 ;;		___awdiv
  2543 ;; This function is called by:
  2544 ;;		_main
  2545 ;; This function uses a non-reentrant model
  2546 ;;
  2547                           
  2548                           	psect	text15
  2549  01F85E                     __ptext15:
  2550                           	opt stack 0
  2551  01F85E                     _delay_ms:
  2552                           	opt stack 29
  2553                           
  2554                           ;micro_setup.c: 80: int j = n/10;
  2555                           
  2556                           ;incstack = 0
  2557  01F85E  C009  F001         	movff	delay_ms@n,___awdiv@dividend
  2558  01F862  C00A  F002         	movff	delay_ms@n+1,___awdiv@dividend+1
  2559  01F866  0E00               	movlw	0
  2560  01F868  6E04               	movwf	___awdiv@divisor+1,c
  2561  01F86A  0E0A               	movlw	10
  2562  01F86C  6E03               	movwf	___awdiv@divisor,c
  2563  01F86E  ECC7  F0FC         	call	___awdiv	;wreg free
  2564  01F872  C001  F00C         	movff	?___awdiv,delay_ms@j
  2565  01F876  C002  F00D         	movff	?___awdiv+1,delay_ms@j+1
  2566                           
  2567                           ;micro_setup.c: 81: while(j--)
  2568  01F87A  D008               	goto	l1521
  2569  01F87C                     l1519:
  2570                           
  2571                           ;micro_setup.c: 82: {
  2572                           ;micro_setup.c: 83: _delay((unsigned long)((10)*(10000000/4000.0)));
  2573  01F87C  0E21               	movlw	33
  2574  01F87E  6E0B               	movwf	??_delay_ms& (0+255),c
  2575  01F880  0E76               	movlw	118
  2576  01F882                     u707:
  2577  01F882  2EE8               	decfsz	wreg,f,c
  2578  01F884  D7FE               	goto	u707
  2579  01F886  2E0B               	decfsz	??_delay_ms& (0+255),f,c
  2580  01F888  D7FC               	goto	u707
  2581  01F88A  D000               	nop2	
  2582  01F88C                     l1521:
  2583  01F88C  060C               	decf	delay_ms@j,f,c
  2584  01F88E  A0D8               	btfss	status,0,c
  2585  01F890  060D               	decf	delay_ms@j+1,f,c
  2586  01F892  280C               	incf	delay_ms@j,w,c
  2587  01F894  E1F3               	bnz	l1519
  2588  01F896  280D               	incf	delay_ms@j+1,w,c
  2589  01F898  B4D8               	btfsc	status,2,c
  2590  01F89A  0012               	return	
  2591  01F89C  D7EF               	goto	l1519
  2592  01F89E                     __end_of_delay_ms:
  2593                           	opt stack 0
  2594                           tblptru	equ	0xFF8
  2595                           tblptrh	equ	0xFF7
  2596                           tblptrl	equ	0xFF6
  2597                           tablat	equ	0xFF5
  2598                           postinc0	equ	0xFEE
  2599                           wreg	equ	0xFE8
  2600                           postdec1	equ	0xFE5
  2601                           fsr1l	equ	0xFE1
  2602                           postinc2	equ	0xFDE
  2603                           postdec2	equ	0xFDD
  2604                           fsr2h	equ	0xFDA
  2605                           fsr2l	equ	0xFD9
  2606                           status	equ	0xFD8
  2607                           
  2608 ;; *************** function ___awdiv *****************
  2609 ;; Defined at:
  2610 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  2611 ;; Parameters:    Size  Location     Type
  2612 ;;  dividend        2    0[COMRAM] int 
  2613 ;;  divisor         2    2[COMRAM] int 
  2614 ;; Auto vars:     Size  Location     Type
  2615 ;;  quotient        2    6[COMRAM] int 
  2616 ;;  sign            1    5[COMRAM] unsigned char 
  2617 ;;  counter         1    4[COMRAM] unsigned char 
  2618 ;; Return value:  Size  Location     Type
  2619 ;;                  2    0[COMRAM] int 
  2620 ;; Registers used:
  2621 ;;		wreg, status,2, status,0
  2622 ;; Tracked objects:
  2623 ;;		On entry : 0/0
  2624 ;;		On exit  : 0/0
  2625 ;;		Unchanged: 0/0
  2626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2627 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2628 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2630 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2631 ;;Total ram usage:        8 bytes
  2632 ;; Hardware stack levels used:    1
  2633 ;; This function calls:
  2634 ;;		Nothing
  2635 ;; This function is called by:
  2636 ;;		_delay_ms
  2637 ;; This function uses a non-reentrant model
  2638 ;;
  2639                           
  2640                           	psect	text16
  2641  01F98E                     __ptext16:
  2642                           	opt stack 0
  2643  01F98E                     ___awdiv:
  2644                           	opt stack 29
  2645                           
  2646                           ;incstack = 0
  2647  01F98E  0E00               	movlw	0
  2648  01F990  6E06               	movwf	___awdiv@sign,c
  2649  01F992  AE04               	btfss	___awdiv@divisor+1,7,c
  2650  01F994  D006               	goto	l1327
  2651  01F996  6C03               	negf	___awdiv@divisor,c
  2652  01F998  1E04               	comf	___awdiv@divisor+1,f,c
  2653  01F99A  B0D8               	btfsc	status,0,c
  2654  01F99C  2A04               	incf	___awdiv@divisor+1,f,c
  2655  01F99E  0E01               	movlw	1
  2656  01F9A0  6E06               	movwf	___awdiv@sign,c
  2657  01F9A2                     l1327:
  2658  01F9A2  AE02               	btfss	___awdiv@dividend+1,7,c
  2659  01F9A4  D006               	goto	l1333
  2660  01F9A6  6C01               	negf	___awdiv@dividend,c
  2661  01F9A8  1E02               	comf	___awdiv@dividend+1,f,c
  2662  01F9AA  B0D8               	btfsc	status,0,c
  2663  01F9AC  2A02               	incf	___awdiv@dividend+1,f,c
  2664  01F9AE  0E01               	movlw	1
  2665  01F9B0  1A06               	xorwf	___awdiv@sign,f,c
  2666  01F9B2                     l1333:
  2667  01F9B2  0E00               	movlw	0
  2668  01F9B4  6E08               	movwf	___awdiv@quotient+1,c
  2669  01F9B6  0E00               	movlw	0
  2670  01F9B8  6E07               	movwf	___awdiv@quotient,c
  2671  01F9BA  5003               	movf	___awdiv@divisor,w,c
  2672  01F9BC  1004               	iorwf	___awdiv@divisor+1,w,c
  2673  01F9BE  B4D8               	btfsc	status,2,c
  2674  01F9C0  D01C               	goto	l1355
  2675  01F9C2  0E01               	movlw	1
  2676  01F9C4  6E05               	movwf	___awdiv@counter,c
  2677  01F9C6  D004               	goto	l1341
  2678  01F9C8                     l1339:
  2679  01F9C8  90D8               	bcf	status,0,c
  2680  01F9CA  3603               	rlcf	___awdiv@divisor,f,c
  2681  01F9CC  3604               	rlcf	___awdiv@divisor+1,f,c
  2682  01F9CE  2A05               	incf	___awdiv@counter,f,c
  2683  01F9D0                     l1341:
  2684  01F9D0  AE04               	btfss	___awdiv@divisor+1,7,c
  2685  01F9D2  D7FA               	goto	l1339
  2686  01F9D4                     l1343:
  2687  01F9D4  90D8               	bcf	status,0,c
  2688  01F9D6  3607               	rlcf	___awdiv@quotient,f,c
  2689  01F9D8  3608               	rlcf	___awdiv@quotient+1,f,c
  2690  01F9DA  5003               	movf	___awdiv@divisor,w,c
  2691  01F9DC  5C01               	subwf	___awdiv@dividend,w,c
  2692  01F9DE  5004               	movf	___awdiv@divisor+1,w,c
  2693  01F9E0  5802               	subwfb	___awdiv@dividend+1,w,c
  2694  01F9E2  A0D8               	btfss	status,0,c
  2695  01F9E4  D005               	goto	l1351
  2696  01F9E6  5003               	movf	___awdiv@divisor,w,c
  2697  01F9E8  5E01               	subwf	___awdiv@dividend,f,c
  2698  01F9EA  5004               	movf	___awdiv@divisor+1,w,c
  2699  01F9EC  5A02               	subwfb	___awdiv@dividend+1,f,c
  2700  01F9EE  8007               	bsf	___awdiv@quotient,0,c
  2701  01F9F0                     l1351:
  2702  01F9F0  90D8               	bcf	status,0,c
  2703  01F9F2  3204               	rrcf	___awdiv@divisor+1,f,c
  2704  01F9F4  3203               	rrcf	___awdiv@divisor,f,c
  2705  01F9F6  2E05               	decfsz	___awdiv@counter,f,c
  2706  01F9F8  D7ED               	goto	l1343
  2707  01F9FA                     l1355:
  2708  01F9FA  5006               	movf	___awdiv@sign,w,c
  2709  01F9FC  B4D8               	btfsc	status,2,c
  2710  01F9FE  D004               	goto	l1359
  2711  01FA00  6C07               	negf	___awdiv@quotient,c
  2712  01FA02  1E08               	comf	___awdiv@quotient+1,f,c
  2713  01FA04  B0D8               	btfsc	status,0,c
  2714  01FA06  2A08               	incf	___awdiv@quotient+1,f,c
  2715  01FA08                     l1359:
  2716  01FA08  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2717  01FA0C  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2718  01FA10  0012               	return	
  2719  01FA12                     __end_of___awdiv:
  2720                           	opt stack 0
  2721  0000                     tblptru	equ	0xFF8
  2722                           tblptrh	equ	0xFF7
  2723                           tblptrl	equ	0xFF6
  2724                           tablat	equ	0xFF5
  2725                           postinc0	equ	0xFEE
  2726                           wreg	equ	0xFE8
  2727                           postdec1	equ	0xFE5
  2728                           fsr1l	equ	0xFE1
  2729                           postinc2	equ	0xFDE
  2730                           postdec2	equ	0xFDD
  2731                           fsr2h	equ	0xFDA
  2732                           fsr2l	equ	0xFD9
  2733                           status	equ	0xFD8
  2734                           tblptru	equ	0xFF8
  2735                           tblptrh	equ	0xFF7
  2736                           tblptrl	equ	0xFF6
  2737                           tablat	equ	0xFF5
  2738                           postinc0	equ	0xFEE
  2739                           wreg	equ	0xFE8
  2740                           postdec1	equ	0xFE5
  2741                           fsr1l	equ	0xFE1
  2742                           postinc2	equ	0xFDE
  2743                           postdec2	equ	0xFDD
  2744                           fsr2h	equ	0xFDA
  2745                           fsr2l	equ	0xFD9
  2746                           status	equ	0xFD8
  2747                           
  2748                           	psect	rparam
  2749  0000                     tblptru	equ	0xFF8
  2750                           tblptrh	equ	0xFF7
  2751                           tblptrl	equ	0xFF6
  2752                           tablat	equ	0xFF5
  2753                           postinc0	equ	0xFEE
  2754                           wreg	equ	0xFE8
  2755                           postdec1	equ	0xFE5
  2756                           fsr1l	equ	0xFE1
  2757                           postinc2	equ	0xFDE
  2758                           postdec2	equ	0xFDD
  2759                           fsr2h	equ	0xFDA
  2760                           fsr2l	equ	0xFD9
  2761                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        24
    BSS         70
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     57      81
    BANK0           160      0      70
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    write_AD7147@DataBuffer	PTR unsigned int  size(2) Largest target is 3935
		 -> RAM(DATA[3935]), AD7147Registers(BANK0[46]), setup_AD7147@StageBuffer(COMRAM[16]), 


Critical Paths under _main in COMRAM

    _main->_setup_AD7147
    _setup_AD7147->_write_AD7147
    _write_AD7147->_w32_spi
    _read_sensor->_w16_r16_spi
    _get_ID->_w16_r16_spi
    _delay_ms->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    7462
                                             50 COMRAM     7     7      0
                           _delay_ms
                             _get_ID
                        _read_sensor
                       _setup_AD7147
                          _setup_mcu
                          _setup_spi
                     _uart_read_char
                    _uart_write_char
            _uart_write_unsigned_int
 ---------------------------------------------------------------------------------
 (1) _uart_write_unsigned_int                              4     2      2     218
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _uart_write_char                                      1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_read_char                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_spi                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_mcu                                            0     0      0       0
                           _init_pin
                          _init_uart
                         _setup_port
 ---------------------------------------------------------------------------------
 (2) _setup_port                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_pin                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_AD7147                                        16    16      0    5733
                                             34 COMRAM    16    16      0
                       _write_AD7147
 ---------------------------------------------------------------------------------
 (2) _write_AD7147                                        12     6      6    3440
                                             22 COMRAM    12     6      6
                            _w32_spi
 ---------------------------------------------------------------------------------
 (3) _w32_spi                                             22    18      4     312
                                              0 COMRAM    22    18      4
 ---------------------------------------------------------------------------------
 (1) _read_sensor                                          6     4      2     445
                                             22 COMRAM     6     4      2
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (1) _get_ID                                               5     3      2     358
                                             22 COMRAM     5     3      2
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (2) _w16_r16_spi                                         22    20      2     335
                                              0 COMRAM    22    20      2
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             5     3      2     601
                                              8 COMRAM     5     3      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay_ms
     ___awdiv
   _get_ID
     _w16_r16_spi
   _read_sensor
     _w16_r16_spi
   _setup_AD7147
     _write_AD7147
       _w32_spi
   _setup_mcu
     _init_pin
     _init_uart
     _setup_port
   _setup_spi
   _uart_read_char
   _uart_write_char
   _uart_write_unsigned_int

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F5F      0       0      37        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      46       5       43.8%
BITBANK15           60      0       0      35        0.0%
BANK15              60      0       0      36        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     39      51       1       85.3%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      97      20        0.0%
DATA                 0      0      97       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Feb 27 16:07:58 2017

                    ___awdiv@sign 0006                      __CFG_CP0$OFF 000000  
                             l202 F94A                               l205 F958  
                             l208 F966                               l243 F724  
                             l172 F8F2                               l166 F8D6  
                             l175 F900                               l255 F7A8  
                             l280 F776                               l169 F8E4  
                             l258 F7B0                               l199 F93C  
                             l279 F780                               u707 F882  
                             u565 F80C                               wreg 000FE8  
                    __CFG_FOSC$HS 000000       write_AD7147@RegisterAddress 0017  
                            l1305 FB16                              l1341 F9D0  
                            l1333 F9B2                              l1351 F9F0  
                            l1343 F9D4                              l1327 F9A2  
                            l1521 F88C                              l1339 F9C8  
                            l1355 F9FA                              l1359 FA08  
                            l1519 F87C                              l1299 FAAC  
                            l1565 FA32                              l1583 FA8C  
                            l1575 FA5E                     __CFG_DEBUG$ON 000000  
                            _RCIF 007CF5                              _TRMT 007D61  
                   __CFG_FCMEN$ON 000000                  ??_uart_read_char 0001  
                            _main FA12                              fsr2h 000FDA  
                            fsr1l 000FE1       write_AD7147@Register_Values 001F  
                            fsr2l 000FD9  __size_of_uart_write_unsigned_int 001A  
                            start 0002                     ??_w16_r16_spi 0003  
                   __CFG_IESO$OFF 000000                     __CFG_FOSC2$ON 000000  
                    ___param_bank 000010                   __end_of_w32_spi F90C  
        __size_of_uart_write_char 000C                             ?_main 0001  
                 __end_of___awdiv FA12                   ___awdiv@divisor 0003  
           w16_r16_spi@blank_high 0011                   ___awdiv@counter 0005  
                           _TRISC 000F94                             _TRMT2 007B61  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TRISF 000F97                             _TRISG 000F98  
                           _TXREG 000FAD             __size_of_write_AD7147 008A  
                    ?_read_sensor 0017                      main@sensor_1 0037  
                           tablat 000FF5                             status 000FD8  
          w16_r16_spi@address_low 0009                   __initialization F82C  
                    __end_of_main FA9A               __end_of_w16_r16_spi F98E  
                    _write_AD7147 FA9A                            ??_main 0033  
                   main@device_ID 0035                     __activetblptr 000000  
                ___awdiv@dividend 0001                       w32_spi@data 0003  
                   main@indicator 0039                    __CFG_WDTEN$OFF 000000  
                          _RCREG2 000F6E                            _SPBRG2 000F6F  
                          _TXREG2 000F6D                            _TXSTA2 000F6C  
                __end_of_delay_ms F89E                         ??_w32_spi 0005  
                  __CFG_XINST$OFF 000000                         ??___awdiv 0005  
                  __CFG_STVREN$ON 000000                            _get_ID F7FC  
                __end_of_init_pin F74E                            clear_0 F852  
                ___awdiv@quotient 0007                            main@bb 0033  
                    __pdataCOMRAM 003A                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
               ??_uart_write_char 0001           w16_r16_spi@address_high 000B  
         _uart_write_unsigned_int F7A0                        __accesstop 0060  
         __end_of__initialization F858                     ___rparam_used 000001  
                     _w16_r16_spi F90C                    __pcstackCOMRAM 0001  
                      __pbssBANK0 0060              __size_of_read_sensor 0026  
              __size_of_init_uart 0014                           ?_get_ID 0017  
              __size_of_setup_mcu 000E                __size_of_setup_spi 001C  
                       ?_delay_ms 0009                           _SSP1BUF 000FC9  
                   w16_r16_spi@p1 0005                     w16_r16_spi@p2 0007  
                   w16_r16_spi@p3 0013                     w16_r16_spi@p4 0015  
       ??_uart_write_unsigned_int 0003                         ?_init_pin 0001  
                         _w32_spi F89E                           __Hparam 0000  
                         __Lparam 0000                           ___awdiv F98E  
                 __size_of_get_ID 0030                           __pcinit F82C  
                         __ramtop 1000                           __ptext0 FA12  
                         __ptext1 F7A0                           __ptext2 F722  
                         __ptext3 F774                           __ptext4 F7BA  
                         __ptext5 F72E                           __ptext6 F74E  
                         __ptext7 F760                           __ptext8 F73C  
                         __ptext9 FB24                    w32_spi@address 0001  
               __end_of_init_uart F774                        ??_delay_ms 000B  
            end_of_initialization F858                     ?_setup_AD7147 0001  
                      ??_init_pin 0001                 __end_of_setup_mcu F73C  
               __end_of_setup_spi F7D6                           postdec1 000FE5  
                         postdec2 000FDD   __end_of_uart_write_unsigned_int F7BA  
                         postinc0 000FEE                           postinc2 000FDE  
         __size_of_uart_read_char 0014                   _uart_write_char F722  
                       _PORTCbits 000F82                         _PORTDbits 000F83  
                      _setup_port F74E                    ??_setup_AD7147 0023  
                    ?_w16_r16_spi 0001                         w32_spi@p1 0007  
                       w32_spi@p2 0009                         w32_spi@p3 000B  
                       w32_spi@p4 000D              w16_r16_spi@blank_low 000F  
                   __pidataCOMRAM F788                    __end_of_get_ID F82C  
             w32_spi@address_high 0011               start_initialization F82C  
             uart_write_char@data 0001           __end_of_uart_write_char F72E  
         setup_AD7147@StageBuffer 0023                          ??_get_ID 0019  
                     ?_setup_port 0001            write_AD7147@DataBuffer 001B  
                   ??_read_sensor 0019                 __size_of_delay_ms 0040  
                        ?_w32_spi 0001                 __size_of_init_pin 0012  
                  _uart_read_char F774                          ?___awdiv 0001  
            __end_of_setup_AD7147 FFF8                     ?_write_AD7147 0017  
                        _BAUDCON2 000F7C      uart_write_unsigned_int@char1 0003  
    uart_write_unsigned_int@char2 0004                  w32_spi@data_high 0015  
                       _init_uart F760                         delay_ms@j 000C  
                       delay_ms@n 0009               __end_of_read_sensor F7FC  
   write_AD7147@NumberOfRegisters 0019                          _PIE1bits 000F9D  
             __size_of_setup_port 0012                  ?_uart_write_char 0001  
          __end_of_uart_read_char F788                          _PIR3bits 000FA4  
            __size_of_w16_r16_spi 0082                         _setup_mcu F72E  
                       _setup_spi F7BA                    ??_write_AD7147 001D  
        ?_uart_write_unsigned_int 0001                        ?_init_uart 0001  
                       copy_data0 F840                w32_spi@address_low 000F  
                 _AD7147Registers 0078                        _CDC_RESULT 0060  
                        __Hrparam 0000                   ?_uart_read_char 0001  
                    get_ID@result 001A                  __size_of_w32_spi 006E  
                        __Lrparam 0000           read_sensor@sensor_value 001B  
                __size_of___awdiv 0084                        ?_setup_mcu 0001  
                      ?_setup_spi 0001                          _delay_ms F85E  
            read_sensor@register1 0019                          __ptext10 FA9A  
                        __ptext11 F89E                          __ptext12 F7D6  
                        __ptext13 F7FC                          __ptext14 F90C  
                        __ptext15 F85E                          __ptext16 F98E  
                    _SSP1CON1bits 000FC6                       _read_sensor F7D6  
                   __size_of_main 0088                   w32_spi@data_low 0013  
                        _init_pin F73C                 read_sensor@sensor 0017  
             _CDC_RESULT_REGISTER 003A             __size_of_setup_AD7147 04D4  
                   write_AD7147@i 0021                      _SSP1STATbits 000FC7  
              w16_r16_spi@address 0001                      ??_setup_port 0001  
         write_AD7147@enable_word 001F                       ??_init_uart 0001  
            __end_of_write_AD7147 FB24                      _setup_AD7147 FB24  
                      _RCSTA2bits 000F6B                __end_of_setup_port F760  
                     ??_setup_mcu 0001                       ??_setup_spi 0001  
               w16_r16_spi@result 000D     uart_write_unsigned_int@number 0001  
